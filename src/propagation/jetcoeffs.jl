# DO NOT MODIFY THIS FILE BY HAND

# Methods of `TaylorIntegration._allocate_jetcoeffs!` and `TaylorIntegration.jetcoeffs!` generated by @taylorize for the functions
# in src/propagation/asteroid_dynamical_models.jl

# To update the functions do the following:
# 1.- Update the corresponding function in src/propagation/asteroid_dynamical_models.jl
# 2.- using TaylorIntegration
# 2.- ex = :(paste here the modified function)
# 3.- x, y = TaylorIntegration._make_parsed_jetcoeffs(ex)
# 4.- Paste x and y in this file

# TaylorIntegration._allocate_jetcoeffs! method for src/propagation/asteroid_dynamical_models.jl: RNp1BP_pN_A_J23E_J2S_ng_eph_threads!
function TaylorIntegration._allocate_jetcoeffs!(::Val{RNp1BP_pN_A_J23E_J2S_ng_eph_threads!}, t::Taylor1{_T}, q::AbstractArray{Taylor1{_S}, _N}, dq::AbstractArray{Taylor1{_S}, _N}, params) where {_T <: Real, _S <: Number, _N}
    order = t.order
    local jd0 = params.jd0
    local dsj2k = t + (jd0 - JD_J2000)
    local ss16asteph_t = evaleph(params.sseph, dsj2k, q[1])
    local acceph_t = evaleph(params.acceph, dsj2k, q[1])
    local newtonianNb_Potential_t = evaleph(params.poteph, dsj2k, q[1])
    local S = eltype(q)
    local UJ_interaction = params.UJ_interaction
    local N = params.N
    local Nm1 = N - 1
    local μ = params.μ
    local zero_q_1 = auxzero(q[1])
    X = Array{S}(undef, N)
    Y = Array{S}(undef, N)
    Z = Array{S}(undef, N)
    r_p2 = Array{S}(undef, N)
    r_p1d2 = Array{S}(undef, N)
    r_p3d2 = Array{S}(undef, N)
    r_p7d2 = Array{S}(undef, N)
    newtonianCoeff = Array{S}(undef, N)
    ui = Array{S}(undef, N - 1)
    vi = Array{S}(undef, N - 1)
    wi = Array{S}(undef, N - 1)
    U = Array{S}(undef, N)
    V = Array{S}(undef, N)
    W = Array{S}(undef, N)
    _4dq = Array{S}(undef, 3)
    _4U_m_3X = Array{S}(undef, N)
    _4V_m_3Y = Array{S}(undef, N)
    _4W_m_3Z = Array{S}(undef, N)
    UU = Array{S}(undef, N)
    VV = Array{S}(undef, N)
    WW = Array{S}(undef, N)
    newtonian1b_Potential = Array{S}(undef, N)
    newtonianNb_Potential = Array{S}(undef, N)
    newton_acc_X = Array{S}(undef, N)
    newton_acc_Y = Array{S}(undef, N)
    newton_acc_Z = Array{S}(undef, N)
    v2 = Array{S}(undef, N)
    vi_dot_vj = Array{S}(undef, N)
    pn2 = Array{S}(undef, N)
    U_t_pn2 = Array{S}(undef, N)
    V_t_pn2 = Array{S}(undef, N)
    W_t_pn2 = Array{S}(undef, N)
    pn3 = Array{S}(undef, N)
    pNX_t_pn3 = Array{S}(undef, N)
    pNY_t_pn3 = Array{S}(undef, N)
    pNZ_t_pn3 = Array{S}(undef, N)
    _4ϕj = Array{S}(undef, N)
    ϕi_plus_4ϕj = Array{S}(undef, N)
    sj2_plus_2si2_minus_4vivj = Array{S}(undef, N)
    ϕs_and_vs = Array{S}(undef, N)
    pn1t1_7 = Array{S}(undef, N)
    pNX_t_X = Array{S}(undef, N)
    pNY_t_Y = Array{S}(undef, N)
    pNZ_t_Z = Array{S}(undef, N)
    pn1 = Array{S}(undef, N)
    X_t_pn1 = Array{S}(undef, N)
    Y_t_pn1 = Array{S}(undef, N)
    Z_t_pn1 = Array{S}(undef, N)
    pntempX = Taylor1(identity(constant_term(zero_q_1)), order)
    pntempY = Taylor1(identity(constant_term(zero_q_1)), order)
    pntempZ = Taylor1(identity(constant_term(zero_q_1)), order)
    t31 = Array{S}(undef, N)
    t32 = Array{S}(undef, N)
    t33 = Array{S}(undef, N)
    r_sin_ϕ = Array{S}(undef, N)
    sin_ϕ = Array{S}(undef, N)
    ϕ = Array{S}(undef, N)
    cos_ϕ = Array{S}(undef, N)
    sin2_ϕ = Array{S}(undef, N)
    sin3_ϕ = Array{S}(undef, N)
    sin4_ϕ = Array{S}(undef, N)
    F_J2_x = Array{S}(undef, N)
    F_J2_y = Array{S}(undef, N)
    F_J2_z = Array{S}(undef, N)
    F_J2_x1 = Array{S}(undef, N)
    F_J2_y1 = Array{S}(undef, N)
    F_J2_z1 = Array{S}(undef, N)
    F_J2_x2 = Array{S}(undef, N)
    F_J2_y2 = Array{S}(undef, N)
    F_J2_z2 = Array{S}(undef, N)
    temp_accX_i = Array{S}(undef, N)
    temp_accY_i = Array{S}(undef, N)
    temp_accZ_i = Array{S}(undef, N)
    P_2_sin_ϕ = Array{S}(undef, N)
    ∂P_2_sin_ϕ = Array{S}(undef, N)
    P_3_sin_ϕ = Array{S}(undef, N)
    ∂P_3_sin_ϕ = Array{S}(undef, N)
    m_c_ϕ_∂P_2 = Array{S}(undef, N)
    m_c_ϕ_∂P_3 = Array{S}(undef, N)
    Λ2j_div_r4 = Array{S}(undef, N)
    Λ3j_div_r5 = Array{S}(undef, N)
    F_J_ξ = Array{S}(undef, N)
    F_J_η = Array{S}(undef, N)
    F_J_ζ = Array{S}(undef, N)
    F_J2_ξ = Array{S}(undef, N)
    F_J2_η = Array{S}(undef, N)
    F_J2_ζ = Array{S}(undef, N)
    F_J3_ξ = Array{S}(undef, N)
    F_J3_η = Array{S}(undef, N)
    F_J3_ζ = Array{S}(undef, N)
    ξx = Array{S}(undef, N)
    ξy = Array{S}(undef, N)
    ξz = Array{S}(undef, N)
    ηx = Array{S}(undef, N)
    ηy = Array{S}(undef, N)
    ηz = Array{S}(undef, N)
    ηx1 = Array{S}(undef, N)
    ηy1 = Array{S}(undef, N)
    ηz1 = Array{S}(undef, N)
    ηx2 = Array{S}(undef, N)
    ηy2 = Array{S}(undef, N)
    ηz2 = Array{S}(undef, N)
    ζx = Array{S}(undef, N)
    ζy = Array{S}(undef, N)
    ζz = Array{S}(undef, N)
    ζx1 = Array{S}(undef, N)
    ζy1 = Array{S}(undef, N)
    ζz1 = Array{S}(undef, N)
    ζx2 = Array{S}(undef, N)
    ζy2 = Array{S}(undef, N)
    ζz2 = Array{S}(undef, N)
    accX = Taylor1(identity(constant_term(zero_q_1)), order)
    accY = Taylor1(identity(constant_term(zero_q_1)), order)
    accZ = Taylor1(identity(constant_term(zero_q_1)), order)
    local M_ = Array{S}(undef, 3, 3, N)
    local M_[:, :, ea] = t2c_jpl_de430(dsj2k) .+ zero_q_1
    dq[1] = Taylor1(identity(constant_term(q[4])), order)
    dq[2] = Taylor1(identity(constant_term(q[5])), order)
    dq[3] = Taylor1(identity(constant_term(q[6])), order)
    newtonianNb_Potential[N] = Taylor1(identity(constant_term(zero_q_1)), order)
    _4dq[1] = Taylor1(constant_term(4) * constant_term(dq[1]), order)
    _4dq[2] = Taylor1(constant_term(4) * constant_term(dq[2]), order)
    _4dq[3] = Taylor1(constant_term(4) * constant_term(dq[3]), order)
    tmp694 = Array{Taylor1{_S}}(undef, size(ui))
    for i = CartesianIndices(tmp694)
        tmp694[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp697 = Array{Taylor1{_S}}(undef, size(vi))
    for i = CartesianIndices(tmp697)
        tmp697[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp700 = Array{Taylor1{_S}}(undef, size(wi))
    for i = CartesianIndices(tmp700)
        tmp700[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn2x = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(pn2x)
        pn2x[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn2y = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(pn2y)
        pn2y[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn2z = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(pn2z)
        pn2z[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp708 = Array{Taylor1{_S}}(undef, size(UU))
    for i = CartesianIndices(tmp708)
        tmp708[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp711 = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(tmp711)
        tmp711[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp713 = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(tmp713)
        tmp713[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp714 = Array{Taylor1{_S}}(undef, size(tmp711))
    for i = CartesianIndices(tmp714)
        tmp714[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp716 = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(tmp716)
        tmp716[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp724 = Array{Taylor1{_S}}(undef, size(pn2x))
    for i = CartesianIndices(tmp724)
        tmp724[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp725 = Array{Taylor1{_S}}(undef, size(tmp724))
    for i = CartesianIndices(tmp725)
        tmp725[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp820 = Array{Taylor1{_S}}(undef, size(ui))
    for i = CartesianIndices(tmp820)
        tmp820[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp822 = Array{Taylor1{_S}}(undef, size(vi))
    for i = CartesianIndices(tmp822)
        tmp822[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp823 = Array{Taylor1{_S}}(undef, size(tmp820))
    for i = CartesianIndices(tmp823)
        tmp823[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp825 = Array{Taylor1{_S}}(undef, size(wi))
    for i = CartesianIndices(tmp825)
        tmp825[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp736 = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(tmp736)
        tmp736[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp738 = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(tmp738)
        tmp738[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp740 = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(tmp740)
        tmp740[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp742 = Array{Taylor1{_S}}(undef, size(t31))
    for i = CartesianIndices(tmp742)
        tmp742[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp949 = Array{Taylor1{_S}}(undef, size(sin_ϕ))
    for i = CartesianIndices(tmp949)
        tmp949[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp950 = Array{Taylor1{_S}}(undef, size(ϕ))
    for i = CartesianIndices(tmp950)
        tmp950[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp752 = Array{Taylor1{_S}}(undef, size(sin2_ϕ))
    for i = CartesianIndices(tmp752)
        tmp752[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp758 = Array{Taylor1{_S}}(undef, size(sin_ϕ))
    for i = CartesianIndices(tmp758)
        tmp758[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp760 = Array{Taylor1{_S}}(undef, size(sin3_ϕ))
    for i = CartesianIndices(tmp760)
        tmp760[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp764 = Array{Taylor1{_S}}(undef, size(sin2_ϕ))
    for i = CartesianIndices(tmp764)
        tmp764[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp767 = Array{Taylor1{_S}}(undef, size(r_p2))
    for i = CartesianIndices(tmp767)
        tmp767[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp768 = Array{Taylor1{_S}}(undef, size(Λ2))
    for i = CartesianIndices(tmp768)
        tmp768[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp771 = Array{Taylor1{_S}}(undef, size(r_p1d2))
    for i = CartesianIndices(tmp771)
        tmp771[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp772 = Array{Taylor1{_S}}(undef, size(Λ3))
    for i = CartesianIndices(tmp772)
        tmp772[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp774 = Array{Taylor1{_S}}(undef, size(cos_ϕ))
    for i = CartesianIndices(tmp774)
        tmp774[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp776 = Array{Taylor1{_S}}(undef, size(cos_ϕ))
    for i = CartesianIndices(tmp776)
        tmp776[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp779 = Array{Taylor1{_S}}(undef, size(Λ2j_div_r4))
    for i = CartesianIndices(tmp779)
        tmp779[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp783 = Array{Taylor1{_S}}(undef, size(Λ3j_div_r5))
    for i = CartesianIndices(tmp783)
        tmp783[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp786 = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(tmp786)
        tmp786[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp788 = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(tmp788)
        tmp788[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp790 = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(tmp790)
        tmp790[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    #= REPL[73]:250 =# Threads.@threads for i = 1:Nm1
            ui[i] = Taylor1(identity(constant_term(ss16asteph_t[3 * ((N - 1) + i) - 2])), order)
            vi[i] = Taylor1(identity(constant_term(ss16asteph_t[3 * ((N - 1) + i) - 1])), order)
            wi[i] = Taylor1(identity(constant_term(ss16asteph_t[3 * ((N - 1) + i)])), order)
            X[i] = Taylor1(constant_term(ss16asteph_t[3i - 2]) - constant_term(q[1]), order)
            Y[i] = Taylor1(constant_term(ss16asteph_t[3i - 1]) - constant_term(q[2]), order)
            Z[i] = Taylor1(constant_term(ss16asteph_t[3i]) - constant_term(q[3]), order)
            U[i] = Taylor1(constant_term(ui[i]) - constant_term(dq[1]), order)
            V[i] = Taylor1(constant_term(vi[i]) - constant_term(dq[2]), order)
            W[i] = Taylor1(constant_term(wi[i]) - constant_term(dq[3]), order)
            tmp694[i] = Taylor1(constant_term(-3) * constant_term(ui[i]), order)
            _4U_m_3X[i] = Taylor1(constant_term(tmp694[i]) + constant_term(_4dq[1]), order)
            tmp697[i] = Taylor1(constant_term(-3) * constant_term(vi[i]), order)
            _4V_m_3Y[i] = Taylor1(constant_term(tmp697[i]) + constant_term(_4dq[2]), order)
            tmp700[i] = Taylor1(constant_term(-3) * constant_term(wi[i]), order)
            _4W_m_3Z[i] = Taylor1(constant_term(tmp700[i]) + constant_term(_4dq[3]), order)
            pn2x[i] = Taylor1(constant_term(X[i]) * constant_term(_4U_m_3X[i]), order)
            pn2y[i] = Taylor1(constant_term(Y[i]) * constant_term(_4V_m_3Y[i]), order)
            pn2z[i] = Taylor1(constant_term(Z[i]) * constant_term(_4W_m_3Z[i]), order)
            UU[i] = Taylor1(constant_term(ui[i]) * constant_term(dq[1]), order)
            VV[i] = Taylor1(constant_term(vi[i]) * constant_term(dq[2]), order)
            WW[i] = Taylor1(constant_term(wi[i]) * constant_term(dq[3]), order)
            tmp708[i] = Taylor1(constant_term(UU[i]) + constant_term(VV[i]), order)
            vi_dot_vj[i] = Taylor1(constant_term(tmp708[i]) + constant_term(WW[i]), order)
            tmp711[i] = Taylor1(constant_term(X[i]) ^ float(constant_term(2)), order)
            tmp713[i] = Taylor1(constant_term(Y[i]) ^ float(constant_term(2)), order)
            tmp714[i] = Taylor1(constant_term(tmp711[i]) + constant_term(tmp713[i]), order)
            tmp716[i] = Taylor1(constant_term(Z[i]) ^ float(constant_term(2)), order)
            r_p2[i] = Taylor1(constant_term(tmp714[i]) + constant_term(tmp716[i]), order)
            r_p1d2[i] = Taylor1(sqrt(constant_term(r_p2[i])), order)
            r_p3d2[i] = Taylor1(constant_term(r_p2[i]) ^ float(constant_term(1.5)), order)
            r_p7d2[i] = Taylor1(constant_term(r_p2[i]) ^ float(constant_term(3.5)), order)
            newtonianCoeff[i] = Taylor1(constant_term(μ[i]) / constant_term(r_p3d2[i]), order)
            tmp724[i] = Taylor1(constant_term(pn2x[i]) + constant_term(pn2y[i]), order)
            tmp725[i] = Taylor1(constant_term(tmp724[i]) + constant_term(pn2z[i]), order)
            pn2[i] = Taylor1(constant_term(newtonianCoeff[i]) * constant_term(tmp725[i]), order)
            newton_acc_X[i] = Taylor1(constant_term(X[i]) * constant_term(newtonianCoeff[i]), order)
            newton_acc_Y[i] = Taylor1(constant_term(Y[i]) * constant_term(newtonianCoeff[i]), order)
            newton_acc_Z[i] = Taylor1(constant_term(Z[i]) * constant_term(newtonianCoeff[i]), order)
            newtonian1b_Potential[i] = Taylor1(constant_term(μ[i]) / constant_term(r_p1d2[i]), order)
            pn3[i] = Taylor1(constant_term(3.5) * constant_term(newtonian1b_Potential[i]), order)
            U_t_pn2[i] = Taylor1(constant_term(pn2[i]) * constant_term(U[i]), order)
            V_t_pn2[i] = Taylor1(constant_term(pn2[i]) * constant_term(V[i]), order)
            W_t_pn2[i] = Taylor1(constant_term(pn2[i]) * constant_term(W[i]), order)
            if UJ_interaction[i]
                tmp736[i] = Taylor1(-(constant_term(X[i])), order)
                t31[i] = Taylor1(constant_term(tmp736[i]) * constant_term(M_[1, 3, i]), order)
                tmp738[i] = Taylor1(-(constant_term(Y[i])), order)
                t32[i] = Taylor1(constant_term(tmp738[i]) * constant_term(M_[2, 3, i]), order)
                tmp740[i] = Taylor1(-(constant_term(Z[i])), order)
                t33[i] = Taylor1(constant_term(tmp740[i]) * constant_term(M_[3, 3, i]), order)
                tmp742[i] = Taylor1(constant_term(t31[i]) + constant_term(t32[i]), order)
                r_sin_ϕ[i] = Taylor1(constant_term(tmp742[i]) + constant_term(t33[i]), order)
                sin_ϕ[i] = Taylor1(constant_term(r_sin_ϕ[i]) / constant_term(r_p1d2[i]), order)
                ϕ[i] = Taylor1(asin(constant_term(sin_ϕ[i])), order)
                tmp949[i] = Taylor1(sqrt(1 - constant_term(sin_ϕ[i]) ^ 2), order)
                cos_ϕ[i] = Taylor1(cos(constant_term(ϕ[i])), order)
                tmp950[i] = Taylor1(sin(constant_term(ϕ[i])), order)
                sin2_ϕ[i] = Taylor1(constant_term(sin_ϕ[i]) ^ float(constant_term(2)), order)
                sin3_ϕ[i] = Taylor1(constant_term(sin_ϕ[i]) ^ float(constant_term(3)), order)
                tmp752[i] = Taylor1(constant_term(1.5) * constant_term(sin2_ϕ[i]), order)
                P_2_sin_ϕ[i] = Taylor1(constant_term(tmp752[i]) - constant_term(0.5), order)
                ∂P_2_sin_ϕ[i] = Taylor1(constant_term(3) * constant_term(sin_ϕ[i]), order)
                tmp758[i] = Taylor1(constant_term(-1.5) * constant_term(sin_ϕ[i]), order)
                tmp760[i] = Taylor1(constant_term(2.5) * constant_term(sin3_ϕ[i]), order)
                P_3_sin_ϕ[i] = Taylor1(constant_term(tmp758[i]) + constant_term(tmp760[i]), order)
                tmp764[i] = Taylor1(constant_term(7.5) * constant_term(sin2_ϕ[i]), order)
                ∂P_3_sin_ϕ[i] = Taylor1(constant_term(-1.5) + constant_term(tmp764[i]), order)
                tmp767[i] = Taylor1(constant_term(r_p2[i]) ^ float(constant_term(2)), order)
                tmp768[i] = Taylor1(constant_term(Λ2[i]) / constant_term(tmp767[i]), order)
                Λ2j_div_r4[i] = Taylor1(-(constant_term(tmp768[i])), order)
                tmp771[i] = Taylor1(constant_term(r_p1d2[i]) ^ float(constant_term(5)), order)
                tmp772[i] = Taylor1(constant_term(Λ3[i]) / constant_term(tmp771[i]), order)
                Λ3j_div_r5[i] = Taylor1(-(constant_term(tmp772[i])), order)
                tmp774[i] = Taylor1(-(constant_term(cos_ϕ[i])), order)
                m_c_ϕ_∂P_2[i] = Taylor1(constant_term(tmp774[i]) * constant_term(∂P_2_sin_ϕ[i]), order)
                tmp776[i] = Taylor1(-(constant_term(cos_ϕ[i])), order)
                m_c_ϕ_∂P_3[i] = Taylor1(constant_term(tmp776[i]) * constant_term(∂P_3_sin_ϕ[i]), order)
                tmp779[i] = Taylor1(constant_term(Λ2j_div_r4[i]) * constant_term(3), order)
                F_J2_ξ[i] = Taylor1(constant_term(tmp779[i]) * constant_term(P_2_sin_ϕ[i]), order)
                F_J2_ζ[i] = Taylor1(constant_term(Λ2j_div_r4[i]) * constant_term(m_c_ϕ_∂P_2[i]), order)
                tmp783[i] = Taylor1(constant_term(Λ3j_div_r5[i]) * constant_term(4), order)
                F_J3_ξ[i] = Taylor1(constant_term(tmp783[i]) * constant_term(P_3_sin_ϕ[i]), order)
                F_J3_ζ[i] = Taylor1(constant_term(Λ3j_div_r5[i]) * constant_term(m_c_ϕ_∂P_3[i]), order)
                F_J_ξ[i] = Taylor1(identity(constant_term(F_J2_ξ[i])), order)
                F_J_ζ[i] = Taylor1(identity(constant_term(F_J2_ζ[i])), order)
                tmp786[i] = Taylor1(-(constant_term(X[i])), order)
                ξx[i] = Taylor1(constant_term(tmp786[i]) / constant_term(r_p1d2[i]), order)
                tmp788[i] = Taylor1(-(constant_term(Y[i])), order)
                ξy[i] = Taylor1(constant_term(tmp788[i]) / constant_term(r_p1d2[i]), order)
                tmp790[i] = Taylor1(-(constant_term(Z[i])), order)
                ξz[i] = Taylor1(constant_term(tmp790[i]) / constant_term(r_p1d2[i]), order)
                ηx1[i] = Taylor1(constant_term(M_[2, 3, i]) * constant_term(ξz[i]), order)
                ηy1[i] = Taylor1(constant_term(M_[3, 3, i]) * constant_term(ξx[i]), order)
                ηz1[i] = Taylor1(constant_term(M_[1, 3, i]) * constant_term(ξy[i]), order)
                ηx2[i] = Taylor1(constant_term(M_[3, 3, i]) * constant_term(ξy[i]), order)
                ηy2[i] = Taylor1(constant_term(M_[1, 3, i]) * constant_term(ξz[i]), order)
                ηz2[i] = Taylor1(constant_term(M_[2, 3, i]) * constant_term(ξx[i]), order)
                ηx[i] = Taylor1(constant_term(ηx1[i]) - constant_term(ηx2[i]), order)
                ηy[i] = Taylor1(constant_term(ηy1[i]) - constant_term(ηy2[i]), order)
                ηz[i] = Taylor1(constant_term(ηz1[i]) - constant_term(ηz2[i]), order)
                ζx1[i] = Taylor1(constant_term(ξy[i]) * constant_term(ηz[i]), order)
                ζy1[i] = Taylor1(constant_term(ξz[i]) * constant_term(ηx[i]), order)
                ζz1[i] = Taylor1(constant_term(ξx[i]) * constant_term(ηy[i]), order)
                ζx2[i] = Taylor1(constant_term(ξz[i]) * constant_term(ηy[i]), order)
                ζy2[i] = Taylor1(constant_term(ξx[i]) * constant_term(ηz[i]), order)
                ζz2[i] = Taylor1(constant_term(ξy[i]) * constant_term(ηx[i]), order)
                ζx[i] = Taylor1(constant_term(ζx1[i]) - constant_term(ζx2[i]), order)
                ζy[i] = Taylor1(constant_term(ζy1[i]) - constant_term(ζy2[i]), order)
                ζz[i] = Taylor1(constant_term(ζz1[i]) - constant_term(ζz2[i]), order)
                F_J2_x1[i] = Taylor1(constant_term(F_J_ξ[i]) * constant_term(ξx[i]), order)
                F_J2_y1[i] = Taylor1(constant_term(F_J_ξ[i]) * constant_term(ξy[i]), order)
                F_J2_z1[i] = Taylor1(constant_term(F_J_ξ[i]) * constant_term(ξz[i]), order)
                F_J2_x2[i] = Taylor1(constant_term(F_J_ζ[i]) * constant_term(ζx[i]), order)
                F_J2_y2[i] = Taylor1(constant_term(F_J_ζ[i]) * constant_term(ζy[i]), order)
                F_J2_z2[i] = Taylor1(constant_term(F_J_ζ[i]) * constant_term(ζz[i]), order)
                F_J2_x[i] = Taylor1(constant_term(F_J2_x1[i]) + constant_term(F_J2_x2[i]), order)
                F_J2_y[i] = Taylor1(constant_term(F_J2_y1[i]) + constant_term(F_J2_y2[i]), order)
                F_J2_z[i] = Taylor1(constant_term(F_J2_z1[i]) + constant_term(F_J2_z2[i]), order)
            end
            tmp820[i] = Taylor1(constant_term(ui[i]) ^ float(constant_term(2)), order)
            tmp822[i] = Taylor1(constant_term(vi[i]) ^ float(constant_term(2)), order)
            tmp823[i] = Taylor1(constant_term(tmp820[i]) + constant_term(tmp822[i]), order)
            tmp825[i] = Taylor1(constant_term(wi[i]) ^ float(constant_term(2)), order)
            v2[i] = Taylor1(constant_term(tmp823[i]) + constant_term(tmp825[i]), order)
        end
    tmp828 = Taylor1(constant_term(q[4]) ^ float(constant_term(2)), order)
    tmp830 = Taylor1(constant_term(q[5]) ^ float(constant_term(2)), order)
    tmp831 = Taylor1(constant_term(tmp828) + constant_term(tmp830), order)
    tmp833 = Taylor1(constant_term(q[6]) ^ float(constant_term(2)), order)
    v2[N] = Taylor1(constant_term(tmp831) + constant_term(tmp833), order)
    temp_004 = Array{Taylor1{_S}}(undef, size(newtonian1b_Potential))
    for i = CartesianIndices(temp_004)
        temp_004[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp836 = Array{Taylor1{_S}}(undef, size(μ))
    for i = CartesianIndices(tmp836)
        tmp836[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp838 = Array{Taylor1{_S}}(undef, size(μ))
    for i = CartesianIndices(tmp838)
        tmp838[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp840 = Array{Taylor1{_S}}(undef, size(μ))
    for i = CartesianIndices(tmp840)
        tmp840[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    for i = 1:Nm1
        temp_004[i] = Taylor1(constant_term(newtonian1b_Potential[i]) + constant_term(newtonianNb_Potential[N]), order)
        newtonianNb_Potential[N] = Taylor1(identity(constant_term(temp_004[i])), order)
        if UJ_interaction[i]
            tmp836[i] = Taylor1(constant_term(μ[i]) * constant_term(F_J2_x[i]), order)
            temp_accX_i[i] = Taylor1(constant_term(accX) - constant_term(tmp836[i]), order)
            accX = Taylor1(identity(constant_term(temp_accX_i[i])), order)
            tmp838[i] = Taylor1(constant_term(μ[i]) * constant_term(F_J2_y[i]), order)
            temp_accY_i[i] = Taylor1(constant_term(accY) - constant_term(tmp838[i]), order)
            accY = Taylor1(identity(constant_term(temp_accY_i[i])), order)
            tmp840[i] = Taylor1(constant_term(μ[i]) * constant_term(F_J2_z[i]), order)
            temp_accZ_i[i] = Taylor1(constant_term(accZ) - constant_term(tmp840[i]), order)
            accZ = Taylor1(identity(constant_term(temp_accZ_i[i])), order)
        end
    end
    _4ϕj[N] = Taylor1(constant_term(4) * constant_term(newtonianNb_Potential[N]), order)
    tmp846 = Array{Taylor1{_S}}(undef, size(v2))
    for i = CartesianIndices(tmp846)
        tmp846[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp848 = Array{Taylor1{_S}}(undef, size(vi_dot_vj))
    for i = CartesianIndices(tmp848)
        tmp848[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp849 = Array{Taylor1{_S}}(undef, size(tmp846))
    for i = CartesianIndices(tmp849)
        tmp849[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    Xij_t_Ui = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(Xij_t_Ui)
        Xij_t_Ui[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    Yij_t_Vi = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(Yij_t_Vi)
        Yij_t_Vi[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    Zij_t_Wi = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(Zij_t_Wi)
        Zij_t_Wi[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp855 = Array{Taylor1{_S}}(undef, size(Xij_t_Ui))
    for i = CartesianIndices(tmp855)
        tmp855[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    Rij_dot_Vi = Array{Taylor1{_S}}(undef, size(tmp855))
    for i = CartesianIndices(Rij_dot_Vi)
        Rij_dot_Vi[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp858 = Array{Taylor1{_S}}(undef, size(Rij_dot_Vi))
    for i = CartesianIndices(tmp858)
        tmp858[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn1t7 = Array{Taylor1{_S}}(undef, size(tmp858))
    for i = CartesianIndices(pn1t7)
        pn1t7[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp861 = Array{Taylor1{_S}}(undef, size(pn1t7))
    for i = CartesianIndices(tmp861)
        tmp861[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn1t2_7 = Array{Taylor1{_S}}(undef, size(ϕs_and_vs))
    for i = CartesianIndices(pn1t2_7)
        pn1t2_7[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp868 = Array{Taylor1{_S}}(undef, size(pNX_t_X))
    for i = CartesianIndices(tmp868)
        tmp868[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp869 = Array{Taylor1{_S}}(undef, size(tmp868))
    for i = CartesianIndices(tmp869)
        tmp869[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp870 = Array{Taylor1{_S}}(undef, size(tmp869))
    for i = CartesianIndices(tmp870)
        tmp870[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    #= REPL[73]:452 =# Threads.@threads for i = 1:10
            ϕi_plus_4ϕj[i] = Taylor1(constant_term(newtonianNb_Potential_t[i]) + constant_term(_4ϕj[N]), order)
            tmp846[i] = Taylor1(constant_term(2) * constant_term(v2[i]), order)
            tmp848[i] = Taylor1(constant_term(4) * constant_term(vi_dot_vj[i]), order)
            tmp849[i] = Taylor1(constant_term(tmp846[i]) - constant_term(tmp848[i]), order)
            sj2_plus_2si2_minus_4vivj[i] = Taylor1(constant_term(tmp849[i]) + constant_term(v2[N]), order)
            ϕs_and_vs[i] = Taylor1(constant_term(sj2_plus_2si2_minus_4vivj[i]) - constant_term(ϕi_plus_4ϕj[i]), order)
            Xij_t_Ui[i] = Taylor1(constant_term(X[i]) * constant_term(ui[i]), order)
            Yij_t_Vi[i] = Taylor1(constant_term(Y[i]) * constant_term(vi[i]), order)
            Zij_t_Wi[i] = Taylor1(constant_term(Z[i]) * constant_term(wi[i]), order)
            tmp855[i] = Taylor1(constant_term(Xij_t_Ui[i]) + constant_term(Yij_t_Vi[i]), order)
            Rij_dot_Vi[i] = Taylor1(constant_term(tmp855[i]) + constant_term(Zij_t_Wi[i]), order)
            tmp858[i] = Taylor1(constant_term(Rij_dot_Vi[i]) ^ float(constant_term(2)), order)
            pn1t7[i] = Taylor1(constant_term(tmp858[i]) / constant_term(r_p2[i]), order)
            tmp861[i] = Taylor1(constant_term(1.5) * constant_term(pn1t7[i]), order)
            pn1t2_7[i] = Taylor1(constant_term(ϕs_and_vs[i]) - constant_term(tmp861[i]), order)
            pn1t1_7[i] = Taylor1(constant_term(c_p2) + constant_term(pn1t2_7[i]), order)
            pNX_t_X[i] = Taylor1(constant_term(acceph_t[3i - 2]) * constant_term(X[i]), order)
            pNY_t_Y[i] = Taylor1(constant_term(acceph_t[3i - 1]) * constant_term(Y[i]), order)
            pNZ_t_Z[i] = Taylor1(constant_term(acceph_t[3i]) * constant_term(Z[i]), order)
            tmp868[i] = Taylor1(constant_term(pNX_t_X[i]) + constant_term(pNY_t_Y[i]), order)
            tmp869[i] = Taylor1(constant_term(tmp868[i]) + constant_term(pNZ_t_Z[i]), order)
            tmp870[i] = Taylor1(constant_term(0.5) * constant_term(tmp869[i]), order)
            pn1[i] = Taylor1(constant_term(pn1t1_7[i]) + constant_term(tmp870[i]), order)
            X_t_pn1[i] = Taylor1(constant_term(newton_acc_X[i]) * constant_term(pn1[i]), order)
            Y_t_pn1[i] = Taylor1(constant_term(newton_acc_Y[i]) * constant_term(pn1[i]), order)
            Z_t_pn1[i] = Taylor1(constant_term(newton_acc_Z[i]) * constant_term(pn1[i]), order)
            pNX_t_pn3[i] = Taylor1(constant_term(acceph_t[3i - 2]) * constant_term(pn3[i]), order)
            pNY_t_pn3[i] = Taylor1(constant_term(acceph_t[3i - 1]) * constant_term(pn3[i]), order)
            pNZ_t_pn3[i] = Taylor1(constant_term(acceph_t[3i]) * constant_term(pn3[i]), order)
        end
    tmp878 = Array{Taylor1{_S}}(undef, size(U_t_pn2))
    for i = CartesianIndices(tmp878)
        tmp878[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    termpnx = Array{Taylor1{_S}}(undef, size(X_t_pn1))
    for i = CartesianIndices(termpnx)
        termpnx[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    sumpnx = Array{Taylor1{_S}}(undef, size(termpnx))
    for i = CartesianIndices(sumpnx)
        sumpnx[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp881 = Array{Taylor1{_S}}(undef, size(V_t_pn2))
    for i = CartesianIndices(tmp881)
        tmp881[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    termpny = Array{Taylor1{_S}}(undef, size(Y_t_pn1))
    for i = CartesianIndices(termpny)
        termpny[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    sumpny = Array{Taylor1{_S}}(undef, size(termpny))
    for i = CartesianIndices(sumpny)
        sumpny[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp884 = Array{Taylor1{_S}}(undef, size(W_t_pn2))
    for i = CartesianIndices(tmp884)
        tmp884[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    termpnz = Array{Taylor1{_S}}(undef, size(Z_t_pn1))
    for i = CartesianIndices(termpnz)
        termpnz[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    sumpnz = Array{Taylor1{_S}}(undef, size(termpnz))
    for i = CartesianIndices(sumpnz)
        sumpnz[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    for i = 1:10
        tmp878[i] = Taylor1(constant_term(U_t_pn2[i]) + constant_term(pNX_t_pn3[i]), order)
        termpnx[i] = Taylor1(constant_term(X_t_pn1[i]) + constant_term(tmp878[i]), order)
        sumpnx[i] = Taylor1(constant_term(pntempX) + constant_term(termpnx[i]), order)
        pntempX = Taylor1(identity(constant_term(sumpnx[i])), order)
        tmp881[i] = Taylor1(constant_term(V_t_pn2[i]) + constant_term(pNY_t_pn3[i]), order)
        termpny[i] = Taylor1(constant_term(Y_t_pn1[i]) + constant_term(tmp881[i]), order)
        sumpny[i] = Taylor1(constant_term(pntempY) + constant_term(termpny[i]), order)
        pntempY = Taylor1(identity(constant_term(sumpny[i])), order)
        tmp884[i] = Taylor1(constant_term(W_t_pn2[i]) + constant_term(pNZ_t_pn3[i]), order)
        termpnz[i] = Taylor1(constant_term(Z_t_pn1[i]) + constant_term(tmp884[i]), order)
        sumpnz[i] = Taylor1(constant_term(pntempZ) + constant_term(termpnz[i]), order)
        pntempZ = Taylor1(identity(constant_term(sumpnz[i])), order)
    end
    #= REPL[73]:505 =# Threads.@threads for i = 11:Nm1
            X_t_pn1[i] = Taylor1(constant_term(c_p2) * constant_term(newton_acc_X[i]), order)
            Y_t_pn1[i] = Taylor1(constant_term(c_p2) * constant_term(newton_acc_Y[i]), order)
            Z_t_pn1[i] = Taylor1(constant_term(c_p2) * constant_term(newton_acc_Z[i]), order)
        end
    for i = 11:Nm1
        termpnx[i] = Taylor1(identity(constant_term(X_t_pn1[i])), order)
        sumpnx[i] = Taylor1(constant_term(pntempX) + constant_term(termpnx[i]), order)
        pntempX = Taylor1(identity(constant_term(sumpnx[i])), order)
        termpny[i] = Taylor1(identity(constant_term(Y_t_pn1[i])), order)
        sumpny[i] = Taylor1(constant_term(pntempY) + constant_term(termpny[i]), order)
        pntempY = Taylor1(identity(constant_term(sumpny[i])), order)
        termpnz[i] = Taylor1(identity(constant_term(Z_t_pn1[i])), order)
        sumpnz[i] = Taylor1(constant_term(pntempZ) + constant_term(termpnz[i]), order)
        pntempZ = Taylor1(identity(constant_term(sumpnz[i])), order)
    end
    postNewtonX = Taylor1(constant_term(pntempX) * constant_term(c_m2), order)
    postNewtonY = Taylor1(constant_term(pntempY) * constant_term(c_m2), order)
    postNewtonZ = Taylor1(constant_term(pntempZ) * constant_term(c_m2), order)
    tmp896 = Taylor1(constant_term(Y[1]) * constant_term(W[1]), order)
    tmp897 = Taylor1(constant_term(Z[1]) * constant_term(V[1]), order)
    hx = Taylor1(constant_term(tmp896) - constant_term(tmp897), order)
    tmp899 = Taylor1(constant_term(Z[1]) * constant_term(U[1]), order)
    tmp900 = Taylor1(constant_term(X[1]) * constant_term(W[1]), order)
    hy = Taylor1(constant_term(tmp899) - constant_term(tmp900), order)
    tmp902 = Taylor1(constant_term(X[1]) * constant_term(V[1]), order)
    tmp903 = Taylor1(constant_term(Y[1]) * constant_term(U[1]), order)
    hz = Taylor1(constant_term(tmp902) - constant_term(tmp903), order)
    tmp905 = Taylor1(constant_term(hz) * constant_term(Y[1]), order)
    tmp906 = Taylor1(constant_term(hy) * constant_term(Z[1]), order)
    t_x = Taylor1(constant_term(tmp905) - constant_term(tmp906), order)
    tmp908 = Taylor1(constant_term(hx) * constant_term(Z[1]), order)
    tmp909 = Taylor1(constant_term(hz) * constant_term(X[1]), order)
    t_y = Taylor1(constant_term(tmp908) - constant_term(tmp909), order)
    tmp911 = Taylor1(constant_term(hy) * constant_term(X[1]), order)
    tmp912 = Taylor1(constant_term(hx) * constant_term(Y[1]), order)
    t_z = Taylor1(constant_term(tmp911) - constant_term(tmp912), order)
    tmp915 = Taylor1(constant_term(t_x) ^ float(constant_term(2)), order)
    tmp917 = Taylor1(constant_term(t_y) ^ float(constant_term(2)), order)
    tmp918 = Taylor1(constant_term(tmp915) + constant_term(tmp917), order)
    tmp920 = Taylor1(constant_term(t_z) ^ float(constant_term(2)), order)
    tmp921 = Taylor1(constant_term(tmp918) + constant_term(tmp920), order)
    t_norm = Taylor1(sqrt(constant_term(tmp921)), order)
    t_x_unit = Taylor1(constant_term(t_x) / constant_term(t_norm), order)
    t_y_unit = Taylor1(constant_term(t_y) / constant_term(t_norm), order)
    t_z_unit = Taylor1(constant_term(t_z) / constant_term(t_norm), order)
    tmp926 = Taylor1(constant_term(X[1]) / constant_term(r_p1d2[1]), order)
    r_x_unit = Taylor1(-(constant_term(tmp926)), order)
    tmp928 = Taylor1(constant_term(Y[1]) / constant_term(r_p1d2[1]), order)
    r_y_unit = Taylor1(-(constant_term(tmp928)), order)
    tmp930 = Taylor1(constant_term(Z[1]) / constant_term(r_p1d2[1]), order)
    r_z_unit = Taylor1(-(constant_term(tmp930)), order)
    g_r = Taylor1(identity(constant_term(r_p2[1])), order)
    A2_t_g_r = Taylor1(constant_term(q[7]) / constant_term(g_r), order)
    A1_t_g_r = Taylor1(constant_term(q[8]) / constant_term(g_r), order)
    tmp934 = Taylor1(constant_term(A2_t_g_r) * constant_term(t_x_unit), order)
    tmp935 = Taylor1(constant_term(A1_t_g_r) * constant_term(r_x_unit), order)
    NGAx = Taylor1(constant_term(tmp934) + constant_term(tmp935), order)
    tmp937 = Taylor1(constant_term(A2_t_g_r) * constant_term(t_y_unit), order)
    tmp938 = Taylor1(constant_term(A1_t_g_r) * constant_term(r_y_unit), order)
    NGAy = Taylor1(constant_term(tmp937) + constant_term(tmp938), order)
    tmp940 = Taylor1(constant_term(A2_t_g_r) * constant_term(t_z_unit), order)
    tmp941 = Taylor1(constant_term(A1_t_g_r) * constant_term(r_z_unit), order)
    NGAz = Taylor1(constant_term(tmp940) + constant_term(tmp941), order)
    tmp943 = Taylor1(constant_term(postNewtonX) + constant_term(accX), order)
    dq[4] = Taylor1(constant_term(tmp943) + constant_term(NGAx), order)
    tmp945 = Taylor1(constant_term(postNewtonY) + constant_term(accY), order)
    dq[5] = Taylor1(constant_term(tmp945) + constant_term(NGAy), order)
    tmp947 = Taylor1(constant_term(postNewtonZ) + constant_term(accZ), order)
    dq[6] = Taylor1(constant_term(tmp947) + constant_term(NGAz), order)
    dq[7] = Taylor1(identity(constant_term(zero_q_1)), order)
    dq[8] = Taylor1(identity(constant_term(zero_q_1)), order)
    return TaylorIntegration.RetAlloc{Taylor1{_S}}([tmp828, tmp830, tmp831, tmp833, tmp896, tmp897, tmp899, tmp900, tmp902, tmp903, tmp905, tmp906, tmp908, tmp909, tmp911, tmp912, tmp915, tmp917, tmp918, tmp920, tmp921, tmp926, tmp928, tmp930, tmp934, tmp935, tmp937, tmp938, tmp940, tmp941, tmp943, tmp945, tmp947, pntempX, pntempY, pntempZ, accX, accY, accZ, postNewtonX, postNewtonY, postNewtonZ, hx, hy, hz, t_x, t_y, t_z, t_norm, t_x_unit, t_y_unit, t_z_unit, r_x_unit, r_y_unit, r_z_unit, g_r, A2_t_g_r, A1_t_g_r, NGAx, NGAy, NGAz], [X, Y, Z, r_p2, r_p1d2, r_p3d2, r_p7d2, newtonianCoeff, ui, vi, wi, U, V, W, _4dq, _4U_m_3X, _4V_m_3Y, _4W_m_3Z, UU, VV, WW, newtonian1b_Potential, newtonianNb_Potential, newton_acc_X, newton_acc_Y, newton_acc_Z, v2, vi_dot_vj, pn2, U_t_pn2, V_t_pn2, W_t_pn2, pn3, pNX_t_pn3, pNY_t_pn3, pNZ_t_pn3, _4ϕj, ϕi_plus_4ϕj, sj2_plus_2si2_minus_4vivj, ϕs_and_vs, pn1t1_7, pNX_t_X, pNY_t_Y, pNZ_t_Z, pn1, X_t_pn1, Y_t_pn1, Z_t_pn1, t31, t32, t33, r_sin_ϕ, sin_ϕ, ϕ, cos_ϕ, sin2_ϕ, sin3_ϕ, F_J2_x, F_J2_y, F_J2_z, F_J2_x1, F_J2_y1, F_J2_z1, F_J2_x2, F_J2_y2, F_J2_z2, temp_accX_i, temp_accY_i, temp_accZ_i, P_2_sin_ϕ, ∂P_2_sin_ϕ, P_3_sin_ϕ, ∂P_3_sin_ϕ, m_c_ϕ_∂P_2, m_c_ϕ_∂P_3, Λ2j_div_r4, Λ3j_div_r5, F_J_ξ, F_J_ζ, F_J2_ξ, F_J2_ζ, F_J3_ξ, F_J3_ζ, ξx, ξy, ξz, ηx, ηy, ηz, ηx1, ηy1, ηz1, ηx2, ηy2, ηz2, ζx, ζy, ζz, ζx1, ζy1, ζz1, ζx2, ζy2, ζz2, tmp694, tmp697, tmp700, pn2x, pn2y, pn2z, tmp708, tmp711, tmp713, tmp714, tmp716, tmp724, tmp725, tmp736, tmp738, tmp740, tmp742, tmp949, tmp950, tmp752, tmp758, tmp760, tmp764, tmp767, tmp768, tmp771, tmp772, tmp774, tmp776, tmp779, tmp783, tmp786, tmp788, tmp790, tmp820, tmp822, tmp823, tmp825, temp_004, tmp836, tmp838, tmp840, tmp846, tmp848, tmp849, Xij_t_Ui, Yij_t_Vi, Zij_t_Wi, tmp855, Rij_dot_Vi, tmp858, pn1t7, tmp861, pn1t2_7, tmp868, tmp869, tmp870, tmp878, termpnx, sumpnx, tmp881, termpny, sumpny, tmp884, termpnz, sumpnz], [Array{Taylor1{_S}, 2}(undef, 0, 0)], [Array{Taylor1{_S}, 3}(undef, 0, 0, 0)], [Array{Taylor1{_S}, 4}(undef, 0, 0, 0, 0)])
end

# TaylorIntegration.jetcoeffs! method for src/propagation/asteroid_dynamical_models.jl: RNp1BP_pN_A_J23E_J2S_ng_eph_threads!
function TaylorIntegration.jetcoeffs!(::Val{RNp1BP_pN_A_J23E_J2S_ng_eph_threads!}, t::Taylor1{_T}, q::AbstractArray{Taylor1{_S}, _N}, dq::AbstractArray{Taylor1{_S}, _N}, params, __ralloc::TaylorIntegration.RetAlloc{Taylor1{_S}}) where {_T <: Real, _S <: Number, _N}
    order = t.order
    tmp828 = __ralloc.v0[1]
    tmp830 = __ralloc.v0[2]
    tmp831 = __ralloc.v0[3]
    tmp833 = __ralloc.v0[4]
    tmp896 = __ralloc.v0[5]
    tmp897 = __ralloc.v0[6]
    tmp899 = __ralloc.v0[7]
    tmp900 = __ralloc.v0[8]
    tmp902 = __ralloc.v0[9]
    tmp903 = __ralloc.v0[10]
    tmp905 = __ralloc.v0[11]
    tmp906 = __ralloc.v0[12]
    tmp908 = __ralloc.v0[13]
    tmp909 = __ralloc.v0[14]
    tmp911 = __ralloc.v0[15]
    tmp912 = __ralloc.v0[16]
    tmp915 = __ralloc.v0[17]
    tmp917 = __ralloc.v0[18]
    tmp918 = __ralloc.v0[19]
    tmp920 = __ralloc.v0[20]
    tmp921 = __ralloc.v0[21]
    tmp926 = __ralloc.v0[22]
    tmp928 = __ralloc.v0[23]
    tmp930 = __ralloc.v0[24]
    tmp934 = __ralloc.v0[25]
    tmp935 = __ralloc.v0[26]
    tmp937 = __ralloc.v0[27]
    tmp938 = __ralloc.v0[28]
    tmp940 = __ralloc.v0[29]
    tmp941 = __ralloc.v0[30]
    tmp943 = __ralloc.v0[31]
    tmp945 = __ralloc.v0[32]
    tmp947 = __ralloc.v0[33]
    pntempX = __ralloc.v0[34]
    pntempY = __ralloc.v0[35]
    pntempZ = __ralloc.v0[36]
    accX = __ralloc.v0[37]
    accY = __ralloc.v0[38]
    accZ = __ralloc.v0[39]
    postNewtonX = __ralloc.v0[40]
    postNewtonY = __ralloc.v0[41]
    postNewtonZ = __ralloc.v0[42]
    hx = __ralloc.v0[43]
    hy = __ralloc.v0[44]
    hz = __ralloc.v0[45]
    t_x = __ralloc.v0[46]
    t_y = __ralloc.v0[47]
    t_z = __ralloc.v0[48]
    t_norm = __ralloc.v0[49]
    t_x_unit = __ralloc.v0[50]
    t_y_unit = __ralloc.v0[51]
    t_z_unit = __ralloc.v0[52]
    r_x_unit = __ralloc.v0[53]
    r_y_unit = __ralloc.v0[54]
    r_z_unit = __ralloc.v0[55]
    g_r = __ralloc.v0[56]
    A2_t_g_r = __ralloc.v0[57]
    A1_t_g_r = __ralloc.v0[58]
    NGAx = __ralloc.v0[59]
    NGAy = __ralloc.v0[60]
    NGAz = __ralloc.v0[61]
    X = __ralloc.v1[1]
    Y = __ralloc.v1[2]
    Z = __ralloc.v1[3]
    r_p2 = __ralloc.v1[4]
    r_p1d2 = __ralloc.v1[5]
    r_p3d2 = __ralloc.v1[6]
    r_p7d2 = __ralloc.v1[7]
    newtonianCoeff = __ralloc.v1[8]
    ui = __ralloc.v1[9]
    vi = __ralloc.v1[10]
    wi = __ralloc.v1[11]
    U = __ralloc.v1[12]
    V = __ralloc.v1[13]
    W = __ralloc.v1[14]
    _4dq = __ralloc.v1[15]
    _4U_m_3X = __ralloc.v1[16]
    _4V_m_3Y = __ralloc.v1[17]
    _4W_m_3Z = __ralloc.v1[18]
    UU = __ralloc.v1[19]
    VV = __ralloc.v1[20]
    WW = __ralloc.v1[21]
    newtonian1b_Potential = __ralloc.v1[22]
    newtonianNb_Potential = __ralloc.v1[23]
    newton_acc_X = __ralloc.v1[24]
    newton_acc_Y = __ralloc.v1[25]
    newton_acc_Z = __ralloc.v1[26]
    v2 = __ralloc.v1[27]
    vi_dot_vj = __ralloc.v1[28]
    pn2 = __ralloc.v1[29]
    U_t_pn2 = __ralloc.v1[30]
    V_t_pn2 = __ralloc.v1[31]
    W_t_pn2 = __ralloc.v1[32]
    pn3 = __ralloc.v1[33]
    pNX_t_pn3 = __ralloc.v1[34]
    pNY_t_pn3 = __ralloc.v1[35]
    pNZ_t_pn3 = __ralloc.v1[36]
    _4ϕj = __ralloc.v1[37]
    ϕi_plus_4ϕj = __ralloc.v1[38]
    sj2_plus_2si2_minus_4vivj = __ralloc.v1[39]
    ϕs_and_vs = __ralloc.v1[40]
    pn1t1_7 = __ralloc.v1[41]
    pNX_t_X = __ralloc.v1[42]
    pNY_t_Y = __ralloc.v1[43]
    pNZ_t_Z = __ralloc.v1[44]
    pn1 = __ralloc.v1[45]
    X_t_pn1 = __ralloc.v1[46]
    Y_t_pn1 = __ralloc.v1[47]
    Z_t_pn1 = __ralloc.v1[48]
    t31 = __ralloc.v1[49]
    t32 = __ralloc.v1[50]
    t33 = __ralloc.v1[51]
    r_sin_ϕ = __ralloc.v1[52]
    sin_ϕ = __ralloc.v1[53]
    ϕ = __ralloc.v1[54]
    cos_ϕ = __ralloc.v1[55]
    sin2_ϕ = __ralloc.v1[56]
    sin3_ϕ = __ralloc.v1[57]
    F_J2_x = __ralloc.v1[58]
    F_J2_y = __ralloc.v1[59]
    F_J2_z = __ralloc.v1[60]
    F_J2_x1 = __ralloc.v1[61]
    F_J2_y1 = __ralloc.v1[62]
    F_J2_z1 = __ralloc.v1[63]
    F_J2_x2 = __ralloc.v1[64]
    F_J2_y2 = __ralloc.v1[65]
    F_J2_z2 = __ralloc.v1[66]
    temp_accX_i = __ralloc.v1[67]
    temp_accY_i = __ralloc.v1[68]
    temp_accZ_i = __ralloc.v1[69]
    P_2_sin_ϕ = __ralloc.v1[70]
    ∂P_2_sin_ϕ = __ralloc.v1[71]
    P_3_sin_ϕ = __ralloc.v1[72]
    ∂P_3_sin_ϕ = __ralloc.v1[73]
    m_c_ϕ_∂P_2 = __ralloc.v1[74]
    m_c_ϕ_∂P_3 = __ralloc.v1[75]
    Λ2j_div_r4 = __ralloc.v1[76]
    Λ3j_div_r5 = __ralloc.v1[77]
    F_J_ξ = __ralloc.v1[78]
    F_J_ζ = __ralloc.v1[79]
    F_J2_ξ = __ralloc.v1[80]
    F_J2_ζ = __ralloc.v1[81]
    F_J3_ξ = __ralloc.v1[82]
    F_J3_ζ = __ralloc.v1[83]
    ξx = __ralloc.v1[84]
    ξy = __ralloc.v1[85]
    ξz = __ralloc.v1[86]
    ηx = __ralloc.v1[87]
    ηy = __ralloc.v1[88]
    ηz = __ralloc.v1[89]
    ηx1 = __ralloc.v1[90]
    ηy1 = __ralloc.v1[91]
    ηz1 = __ralloc.v1[92]
    ηx2 = __ralloc.v1[93]
    ηy2 = __ralloc.v1[94]
    ηz2 = __ralloc.v1[95]
    ζx = __ralloc.v1[96]
    ζy = __ralloc.v1[97]
    ζz = __ralloc.v1[98]
    ζx1 = __ralloc.v1[99]
    ζy1 = __ralloc.v1[100]
    ζz1 = __ralloc.v1[101]
    ζx2 = __ralloc.v1[102]
    ζy2 = __ralloc.v1[103]
    ζz2 = __ralloc.v1[104]
    tmp694 = __ralloc.v1[105]
    tmp697 = __ralloc.v1[106]
    tmp700 = __ralloc.v1[107]
    pn2x = __ralloc.v1[108]
    pn2y = __ralloc.v1[109]
    pn2z = __ralloc.v1[110]
    tmp708 = __ralloc.v1[111]
    tmp711 = __ralloc.v1[112]
    tmp713 = __ralloc.v1[113]
    tmp714 = __ralloc.v1[114]
    tmp716 = __ralloc.v1[115]
    tmp724 = __ralloc.v1[116]
    tmp725 = __ralloc.v1[117]
    tmp736 = __ralloc.v1[118]
    tmp738 = __ralloc.v1[119]
    tmp740 = __ralloc.v1[120]
    tmp742 = __ralloc.v1[121]
    tmp949 = __ralloc.v1[122]
    tmp950 = __ralloc.v1[123]
    tmp752 = __ralloc.v1[124]
    tmp758 = __ralloc.v1[125]
    tmp760 = __ralloc.v1[126]
    tmp764 = __ralloc.v1[127]
    tmp767 = __ralloc.v1[128]
    tmp768 = __ralloc.v1[129]
    tmp771 = __ralloc.v1[130]
    tmp772 = __ralloc.v1[131]
    tmp774 = __ralloc.v1[132]
    tmp776 = __ralloc.v1[133]
    tmp779 = __ralloc.v1[134]
    tmp783 = __ralloc.v1[135]
    tmp786 = __ralloc.v1[136]
    tmp788 = __ralloc.v1[137]
    tmp790 = __ralloc.v1[138]
    tmp820 = __ralloc.v1[139]
    tmp822 = __ralloc.v1[140]
    tmp823 = __ralloc.v1[141]
    tmp825 = __ralloc.v1[142]
    temp_004 = __ralloc.v1[143]
    tmp836 = __ralloc.v1[144]
    tmp838 = __ralloc.v1[145]
    tmp840 = __ralloc.v1[146]
    tmp846 = __ralloc.v1[147]
    tmp848 = __ralloc.v1[148]
    tmp849 = __ralloc.v1[149]
    Xij_t_Ui = __ralloc.v1[150]
    Yij_t_Vi = __ralloc.v1[151]
    Zij_t_Wi = __ralloc.v1[152]
    tmp855 = __ralloc.v1[153]
    Rij_dot_Vi = __ralloc.v1[154]
    tmp858 = __ralloc.v1[155]
    pn1t7 = __ralloc.v1[156]
    tmp861 = __ralloc.v1[157]
    pn1t2_7 = __ralloc.v1[158]
    tmp868 = __ralloc.v1[159]
    tmp869 = __ralloc.v1[160]
    tmp870 = __ralloc.v1[161]
    tmp878 = __ralloc.v1[162]
    termpnx = __ralloc.v1[163]
    sumpnx = __ralloc.v1[164]
    tmp881 = __ralloc.v1[165]
    termpny = __ralloc.v1[166]
    sumpny = __ralloc.v1[167]
    tmp884 = __ralloc.v1[168]
    termpnz = __ralloc.v1[169]
    sumpnz = __ralloc.v1[170]
    local jd0 = params.jd0
    local dsj2k = t + (jd0 - JD_J2000)
    local ss16asteph_t = evaleph(params.sseph, dsj2k, q[1])
    local acceph_t = evaleph(params.acceph, dsj2k, q[1])
    local newtonianNb_Potential_t = evaleph(params.poteph, dsj2k, q[1])
    local S = eltype(q)
    local UJ_interaction = params.UJ_interaction
    local N = params.N
    local Nm1 = N - 1
    local μ = params.μ
    local zero_q_1 = auxzero(q[1])
    TaylorSeries.zero!(pntempX)
    pntempX.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(pntempY)
    pntempY.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(pntempZ)
    pntempZ.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(accX)
    accX.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(accY)
    accY.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(accZ)
    accZ.coeffs[1] = identity(constant_term(zero_q_1))
    local M_ = Array{S}(undef, 3, 3, N)
    local M_[:, :, ea] = t2c_jpl_de430(dsj2k) .+ zero_q_1
    TaylorSeries.zero!(dq[1])
    (dq[1]).coeffs[1] = identity(constant_term(q[4]))
    TaylorSeries.zero!(dq[2])
    (dq[2]).coeffs[1] = identity(constant_term(q[5]))
    TaylorSeries.zero!(dq[3])
    (dq[3]).coeffs[1] = identity(constant_term(q[6]))
    TaylorSeries.zero!(newtonianNb_Potential[N])
    (newtonianNb_Potential[N]).coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(_4dq[1])
    (_4dq[1]).coeffs[1] = constant_term(4) * constant_term(dq[1])
    TaylorSeries.zero!(_4dq[2])
    (_4dq[2]).coeffs[1] = constant_term(4) * constant_term(dq[2])
    TaylorSeries.zero!(_4dq[3])
    (_4dq[3]).coeffs[1] = constant_term(4) * constant_term(dq[3])
    #= REPL[73]:250 =# Threads.@threads for i = 1:Nm1
            TaylorSeries.zero!(ui[i])
            (ui[i]).coeffs[1] = identity(constant_term(ss16asteph_t[3 * ((N - 1) + i) - 2]))
            TaylorSeries.zero!(vi[i])
            (vi[i]).coeffs[1] = identity(constant_term(ss16asteph_t[3 * ((N - 1) + i) - 1]))
            TaylorSeries.zero!(wi[i])
            (wi[i]).coeffs[1] = identity(constant_term(ss16asteph_t[3 * ((N - 1) + i)]))
            TaylorSeries.zero!(X[i])
            (X[i]).coeffs[1] = constant_term(ss16asteph_t[3i - 2]) - constant_term(q[1])
            TaylorSeries.zero!(Y[i])
            (Y[i]).coeffs[1] = constant_term(ss16asteph_t[3i - 1]) - constant_term(q[2])
            TaylorSeries.zero!(Z[i])
            (Z[i]).coeffs[1] = constant_term(ss16asteph_t[3i]) - constant_term(q[3])
            TaylorSeries.zero!(U[i])
            (U[i]).coeffs[1] = constant_term(ui[i]) - constant_term(dq[1])
            TaylorSeries.zero!(V[i])
            (V[i]).coeffs[1] = constant_term(vi[i]) - constant_term(dq[2])
            TaylorSeries.zero!(W[i])
            (W[i]).coeffs[1] = constant_term(wi[i]) - constant_term(dq[3])
            TaylorSeries.zero!(tmp694[i])
            (tmp694[i]).coeffs[1] = constant_term(-3) * constant_term(ui[i])
            TaylorSeries.zero!(_4U_m_3X[i])
            (_4U_m_3X[i]).coeffs[1] = constant_term(tmp694[i]) + constant_term(_4dq[1])
            TaylorSeries.zero!(tmp697[i])
            (tmp697[i]).coeffs[1] = constant_term(-3) * constant_term(vi[i])
            TaylorSeries.zero!(_4V_m_3Y[i])
            (_4V_m_3Y[i]).coeffs[1] = constant_term(tmp697[i]) + constant_term(_4dq[2])
            TaylorSeries.zero!(tmp700[i])
            (tmp700[i]).coeffs[1] = constant_term(-3) * constant_term(wi[i])
            TaylorSeries.zero!(_4W_m_3Z[i])
            (_4W_m_3Z[i]).coeffs[1] = constant_term(tmp700[i]) + constant_term(_4dq[3])
            TaylorSeries.zero!(pn2x[i])
            (pn2x[i]).coeffs[1] = constant_term(X[i]) * constant_term(_4U_m_3X[i])
            TaylorSeries.zero!(pn2y[i])
            (pn2y[i]).coeffs[1] = constant_term(Y[i]) * constant_term(_4V_m_3Y[i])
            TaylorSeries.zero!(pn2z[i])
            (pn2z[i]).coeffs[1] = constant_term(Z[i]) * constant_term(_4W_m_3Z[i])
            TaylorSeries.zero!(UU[i])
            (UU[i]).coeffs[1] = constant_term(ui[i]) * constant_term(dq[1])
            TaylorSeries.zero!(VV[i])
            (VV[i]).coeffs[1] = constant_term(vi[i]) * constant_term(dq[2])
            TaylorSeries.zero!(WW[i])
            (WW[i]).coeffs[1] = constant_term(wi[i]) * constant_term(dq[3])
            TaylorSeries.zero!(tmp708[i])
            (tmp708[i]).coeffs[1] = constant_term(UU[i]) + constant_term(VV[i])
            TaylorSeries.zero!(vi_dot_vj[i])
            (vi_dot_vj[i]).coeffs[1] = constant_term(tmp708[i]) + constant_term(WW[i])
            TaylorSeries.zero!(tmp711[i])
            (tmp711[i]).coeffs[1] = constant_term(X[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp713[i])
            (tmp713[i]).coeffs[1] = constant_term(Y[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp714[i])
            (tmp714[i]).coeffs[1] = constant_term(tmp711[i]) + constant_term(tmp713[i])
            TaylorSeries.zero!(tmp716[i])
            (tmp716[i]).coeffs[1] = constant_term(Z[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(r_p2[i])
            (r_p2[i]).coeffs[1] = constant_term(tmp714[i]) + constant_term(tmp716[i])
            TaylorSeries.zero!(r_p1d2[i])
            (r_p1d2[i]).coeffs[1] = sqrt(constant_term(r_p2[i]))
            TaylorSeries.zero!(r_p3d2[i])
            (r_p3d2[i]).coeffs[1] = constant_term(r_p2[i]) ^ float(constant_term(1.5))
            TaylorSeries.zero!(r_p7d2[i])
            (r_p7d2[i]).coeffs[1] = constant_term(r_p2[i]) ^ float(constant_term(3.5))
            TaylorSeries.zero!(newtonianCoeff[i])
            (newtonianCoeff[i]).coeffs[1] = constant_term(μ[i]) / constant_term(r_p3d2[i])
            TaylorSeries.zero!(tmp724[i])
            (tmp724[i]).coeffs[1] = constant_term(pn2x[i]) + constant_term(pn2y[i])
            TaylorSeries.zero!(tmp725[i])
            (tmp725[i]).coeffs[1] = constant_term(tmp724[i]) + constant_term(pn2z[i])
            TaylorSeries.zero!(pn2[i])
            (pn2[i]).coeffs[1] = constant_term(newtonianCoeff[i]) * constant_term(tmp725[i])
            TaylorSeries.zero!(newton_acc_X[i])
            (newton_acc_X[i]).coeffs[1] = constant_term(X[i]) * constant_term(newtonianCoeff[i])
            TaylorSeries.zero!(newton_acc_Y[i])
            (newton_acc_Y[i]).coeffs[1] = constant_term(Y[i]) * constant_term(newtonianCoeff[i])
            TaylorSeries.zero!(newton_acc_Z[i])
            (newton_acc_Z[i]).coeffs[1] = constant_term(Z[i]) * constant_term(newtonianCoeff[i])
            TaylorSeries.zero!(newtonian1b_Potential[i])
            (newtonian1b_Potential[i]).coeffs[1] = constant_term(μ[i]) / constant_term(r_p1d2[i])
            TaylorSeries.zero!(pn3[i])
            (pn3[i]).coeffs[1] = constant_term(3.5) * constant_term(newtonian1b_Potential[i])
            TaylorSeries.zero!(U_t_pn2[i])
            (U_t_pn2[i]).coeffs[1] = constant_term(pn2[i]) * constant_term(U[i])
            TaylorSeries.zero!(V_t_pn2[i])
            (V_t_pn2[i]).coeffs[1] = constant_term(pn2[i]) * constant_term(V[i])
            TaylorSeries.zero!(W_t_pn2[i])
            (W_t_pn2[i]).coeffs[1] = constant_term(pn2[i]) * constant_term(W[i])
            if UJ_interaction[i]
                TaylorSeries.zero!(tmp736[i])
                (tmp736[i]).coeffs[1] = -(constant_term(X[i]))
                TaylorSeries.zero!(t31[i])
                (t31[i]).coeffs[1] = constant_term(tmp736[i]) * constant_term(M_[1, 3, i])
                TaylorSeries.zero!(tmp738[i])
                (tmp738[i]).coeffs[1] = -(constant_term(Y[i]))
                TaylorSeries.zero!(t32[i])
                (t32[i]).coeffs[1] = constant_term(tmp738[i]) * constant_term(M_[2, 3, i])
                TaylorSeries.zero!(tmp740[i])
                (tmp740[i]).coeffs[1] = -(constant_term(Z[i]))
                TaylorSeries.zero!(t33[i])
                (t33[i]).coeffs[1] = constant_term(tmp740[i]) * constant_term(M_[3, 3, i])
                TaylorSeries.zero!(tmp742[i])
                (tmp742[i]).coeffs[1] = constant_term(t31[i]) + constant_term(t32[i])
                TaylorSeries.zero!(r_sin_ϕ[i])
                (r_sin_ϕ[i]).coeffs[1] = constant_term(tmp742[i]) + constant_term(t33[i])
                TaylorSeries.zero!(sin_ϕ[i])
                (sin_ϕ[i]).coeffs[1] = constant_term(r_sin_ϕ[i]) / constant_term(r_p1d2[i])
                TaylorSeries.zero!(ϕ[i])
                (ϕ[i]).coeffs[1] = asin(constant_term(sin_ϕ[i]))
                TaylorSeries.zero!(tmp949[i])
                (tmp949[i]).coeffs[1] = sqrt(1 - constant_term(sin_ϕ[i]) ^ 2)
                TaylorSeries.zero!(cos_ϕ[i])
                (cos_ϕ[i]).coeffs[1] = cos(constant_term(ϕ[i]))
                TaylorSeries.zero!(tmp950[i])
                (tmp950[i]).coeffs[1] = sin(constant_term(ϕ[i]))
                TaylorSeries.zero!(sin2_ϕ[i])
                (sin2_ϕ[i]).coeffs[1] = constant_term(sin_ϕ[i]) ^ float(constant_term(2))
                TaylorSeries.zero!(sin3_ϕ[i])
                (sin3_ϕ[i]).coeffs[1] = constant_term(sin_ϕ[i]) ^ float(constant_term(3))
                TaylorSeries.zero!(tmp752[i])
                (tmp752[i]).coeffs[1] = constant_term(1.5) * constant_term(sin2_ϕ[i])
                TaylorSeries.zero!(P_2_sin_ϕ[i])
                (P_2_sin_ϕ[i]).coeffs[1] = constant_term(tmp752[i]) - constant_term(0.5)
                TaylorSeries.zero!(∂P_2_sin_ϕ[i])
                (∂P_2_sin_ϕ[i]).coeffs[1] = constant_term(3) * constant_term(sin_ϕ[i])
                TaylorSeries.zero!(tmp758[i])
                (tmp758[i]).coeffs[1] = constant_term(-1.5) * constant_term(sin_ϕ[i])
                TaylorSeries.zero!(tmp760[i])
                (tmp760[i]).coeffs[1] = constant_term(2.5) * constant_term(sin3_ϕ[i])
                TaylorSeries.zero!(P_3_sin_ϕ[i])
                (P_3_sin_ϕ[i]).coeffs[1] = constant_term(tmp758[i]) + constant_term(tmp760[i])
                TaylorSeries.zero!(tmp764[i])
                (tmp764[i]).coeffs[1] = constant_term(7.5) * constant_term(sin2_ϕ[i])
                TaylorSeries.zero!(∂P_3_sin_ϕ[i])
                (∂P_3_sin_ϕ[i]).coeffs[1] = constant_term(-1.5) + constant_term(tmp764[i])
                TaylorSeries.zero!(tmp767[i])
                (tmp767[i]).coeffs[1] = constant_term(r_p2[i]) ^ float(constant_term(2))
                TaylorSeries.zero!(tmp768[i])
                (tmp768[i]).coeffs[1] = constant_term(Λ2[i]) / constant_term(tmp767[i])
                TaylorSeries.zero!(Λ2j_div_r4[i])
                (Λ2j_div_r4[i]).coeffs[1] = -(constant_term(tmp768[i]))
                TaylorSeries.zero!(tmp771[i])
                (tmp771[i]).coeffs[1] = constant_term(r_p1d2[i]) ^ float(constant_term(5))
                TaylorSeries.zero!(tmp772[i])
                (tmp772[i]).coeffs[1] = constant_term(Λ3[i]) / constant_term(tmp771[i])
                TaylorSeries.zero!(Λ3j_div_r5[i])
                (Λ3j_div_r5[i]).coeffs[1] = -(constant_term(tmp772[i]))
                TaylorSeries.zero!(tmp774[i])
                (tmp774[i]).coeffs[1] = -(constant_term(cos_ϕ[i]))
                TaylorSeries.zero!(m_c_ϕ_∂P_2[i])
                (m_c_ϕ_∂P_2[i]).coeffs[1] = constant_term(tmp774[i]) * constant_term(∂P_2_sin_ϕ[i])
                TaylorSeries.zero!(tmp776[i])
                (tmp776[i]).coeffs[1] = -(constant_term(cos_ϕ[i]))
                TaylorSeries.zero!(m_c_ϕ_∂P_3[i])
                (m_c_ϕ_∂P_3[i]).coeffs[1] = constant_term(tmp776[i]) * constant_term(∂P_3_sin_ϕ[i])
                TaylorSeries.zero!(tmp779[i])
                (tmp779[i]).coeffs[1] = constant_term(Λ2j_div_r4[i]) * constant_term(3)
                TaylorSeries.zero!(F_J2_ξ[i])
                (F_J2_ξ[i]).coeffs[1] = constant_term(tmp779[i]) * constant_term(P_2_sin_ϕ[i])
                TaylorSeries.zero!(F_J2_ζ[i])
                (F_J2_ζ[i]).coeffs[1] = constant_term(Λ2j_div_r4[i]) * constant_term(m_c_ϕ_∂P_2[i])
                TaylorSeries.zero!(tmp783[i])
                (tmp783[i]).coeffs[1] = constant_term(Λ3j_div_r5[i]) * constant_term(4)
                TaylorSeries.zero!(F_J3_ξ[i])
                (F_J3_ξ[i]).coeffs[1] = constant_term(tmp783[i]) * constant_term(P_3_sin_ϕ[i])
                TaylorSeries.zero!(F_J3_ζ[i])
                (F_J3_ζ[i]).coeffs[1] = constant_term(Λ3j_div_r5[i]) * constant_term(m_c_ϕ_∂P_3[i])
                TaylorSeries.zero!(F_J_ξ[i])
                (F_J_ξ[i]).coeffs[1] = identity(constant_term(F_J2_ξ[i]))
                TaylorSeries.zero!(F_J_ζ[i])
                (F_J_ζ[i]).coeffs[1] = identity(constant_term(F_J2_ζ[i]))
                TaylorSeries.zero!(tmp786[i])
                (tmp786[i]).coeffs[1] = -(constant_term(X[i]))
                TaylorSeries.zero!(ξx[i])
                (ξx[i]).coeffs[1] = constant_term(tmp786[i]) / constant_term(r_p1d2[i])
                TaylorSeries.zero!(tmp788[i])
                (tmp788[i]).coeffs[1] = -(constant_term(Y[i]))
                TaylorSeries.zero!(ξy[i])
                (ξy[i]).coeffs[1] = constant_term(tmp788[i]) / constant_term(r_p1d2[i])
                TaylorSeries.zero!(tmp790[i])
                (tmp790[i]).coeffs[1] = -(constant_term(Z[i]))
                TaylorSeries.zero!(ξz[i])
                (ξz[i]).coeffs[1] = constant_term(tmp790[i]) / constant_term(r_p1d2[i])
                TaylorSeries.zero!(ηx1[i])
                (ηx1[i]).coeffs[1] = constant_term(M_[2, 3, i]) * constant_term(ξz[i])
                TaylorSeries.zero!(ηy1[i])
                (ηy1[i]).coeffs[1] = constant_term(M_[3, 3, i]) * constant_term(ξx[i])
                TaylorSeries.zero!(ηz1[i])
                (ηz1[i]).coeffs[1] = constant_term(M_[1, 3, i]) * constant_term(ξy[i])
                TaylorSeries.zero!(ηx2[i])
                (ηx2[i]).coeffs[1] = constant_term(M_[3, 3, i]) * constant_term(ξy[i])
                TaylorSeries.zero!(ηy2[i])
                (ηy2[i]).coeffs[1] = constant_term(M_[1, 3, i]) * constant_term(ξz[i])
                TaylorSeries.zero!(ηz2[i])
                (ηz2[i]).coeffs[1] = constant_term(M_[2, 3, i]) * constant_term(ξx[i])
                TaylorSeries.zero!(ηx[i])
                (ηx[i]).coeffs[1] = constant_term(ηx1[i]) - constant_term(ηx2[i])
                TaylorSeries.zero!(ηy[i])
                (ηy[i]).coeffs[1] = constant_term(ηy1[i]) - constant_term(ηy2[i])
                TaylorSeries.zero!(ηz[i])
                (ηz[i]).coeffs[1] = constant_term(ηz1[i]) - constant_term(ηz2[i])
                TaylorSeries.zero!(ζx1[i])
                (ζx1[i]).coeffs[1] = constant_term(ξy[i]) * constant_term(ηz[i])
                TaylorSeries.zero!(ζy1[i])
                (ζy1[i]).coeffs[1] = constant_term(ξz[i]) * constant_term(ηx[i])
                TaylorSeries.zero!(ζz1[i])
                (ζz1[i]).coeffs[1] = constant_term(ξx[i]) * constant_term(ηy[i])
                TaylorSeries.zero!(ζx2[i])
                (ζx2[i]).coeffs[1] = constant_term(ξz[i]) * constant_term(ηy[i])
                TaylorSeries.zero!(ζy2[i])
                (ζy2[i]).coeffs[1] = constant_term(ξx[i]) * constant_term(ηz[i])
                TaylorSeries.zero!(ζz2[i])
                (ζz2[i]).coeffs[1] = constant_term(ξy[i]) * constant_term(ηx[i])
                TaylorSeries.zero!(ζx[i])
                (ζx[i]).coeffs[1] = constant_term(ζx1[i]) - constant_term(ζx2[i])
                TaylorSeries.zero!(ζy[i])
                (ζy[i]).coeffs[1] = constant_term(ζy1[i]) - constant_term(ζy2[i])
                TaylorSeries.zero!(ζz[i])
                (ζz[i]).coeffs[1] = constant_term(ζz1[i]) - constant_term(ζz2[i])
                TaylorSeries.zero!(F_J2_x1[i])
                (F_J2_x1[i]).coeffs[1] = constant_term(F_J_ξ[i]) * constant_term(ξx[i])
                TaylorSeries.zero!(F_J2_y1[i])
                (F_J2_y1[i]).coeffs[1] = constant_term(F_J_ξ[i]) * constant_term(ξy[i])
                TaylorSeries.zero!(F_J2_z1[i])
                (F_J2_z1[i]).coeffs[1] = constant_term(F_J_ξ[i]) * constant_term(ξz[i])
                TaylorSeries.zero!(F_J2_x2[i])
                (F_J2_x2[i]).coeffs[1] = constant_term(F_J_ζ[i]) * constant_term(ζx[i])
                TaylorSeries.zero!(F_J2_y2[i])
                (F_J2_y2[i]).coeffs[1] = constant_term(F_J_ζ[i]) * constant_term(ζy[i])
                TaylorSeries.zero!(F_J2_z2[i])
                (F_J2_z2[i]).coeffs[1] = constant_term(F_J_ζ[i]) * constant_term(ζz[i])
                TaylorSeries.zero!(F_J2_x[i])
                (F_J2_x[i]).coeffs[1] = constant_term(F_J2_x1[i]) + constant_term(F_J2_x2[i])
                TaylorSeries.zero!(F_J2_y[i])
                (F_J2_y[i]).coeffs[1] = constant_term(F_J2_y1[i]) + constant_term(F_J2_y2[i])
                TaylorSeries.zero!(F_J2_z[i])
                (F_J2_z[i]).coeffs[1] = constant_term(F_J2_z1[i]) + constant_term(F_J2_z2[i])
            end
            TaylorSeries.zero!(tmp820[i])
            (tmp820[i]).coeffs[1] = constant_term(ui[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp822[i])
            (tmp822[i]).coeffs[1] = constant_term(vi[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp823[i])
            (tmp823[i]).coeffs[1] = constant_term(tmp820[i]) + constant_term(tmp822[i])
            TaylorSeries.zero!(tmp825[i])
            (tmp825[i]).coeffs[1] = constant_term(wi[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(v2[i])
            (v2[i]).coeffs[1] = constant_term(tmp823[i]) + constant_term(tmp825[i])
        end
    TaylorSeries.zero!(tmp828)
    tmp828.coeffs[1] = constant_term(q[4]) ^ float(constant_term(2))
    TaylorSeries.zero!(tmp830)
    tmp830.coeffs[1] = constant_term(q[5]) ^ float(constant_term(2))
    TaylorSeries.zero!(tmp831)
    tmp831.coeffs[1] = constant_term(tmp828) + constant_term(tmp830)
    TaylorSeries.zero!(tmp833)
    tmp833.coeffs[1] = constant_term(q[6]) ^ float(constant_term(2))
    TaylorSeries.zero!(v2[N])
    (v2[N]).coeffs[1] = constant_term(tmp831) + constant_term(tmp833)
    for i = 1:Nm1
        TaylorSeries.zero!(temp_004[i])
        (temp_004[i]).coeffs[1] = constant_term(newtonian1b_Potential[i]) + constant_term(newtonianNb_Potential[N])
        TaylorSeries.zero!(newtonianNb_Potential[N])
        (newtonianNb_Potential[N]).coeffs[1] = identity(constant_term(temp_004[i]))
        if UJ_interaction[i]
            TaylorSeries.zero!(tmp836[i])
            (tmp836[i]).coeffs[1] = constant_term(μ[i]) * constant_term(F_J2_x[i])
            TaylorSeries.zero!(temp_accX_i[i])
            (temp_accX_i[i]).coeffs[1] = constant_term(accX) - constant_term(tmp836[i])
            TaylorSeries.zero!(accX)
            accX.coeffs[1] = identity(constant_term(temp_accX_i[i]))
            TaylorSeries.zero!(tmp838[i])
            (tmp838[i]).coeffs[1] = constant_term(μ[i]) * constant_term(F_J2_y[i])
            TaylorSeries.zero!(temp_accY_i[i])
            (temp_accY_i[i]).coeffs[1] = constant_term(accY) - constant_term(tmp838[i])
            TaylorSeries.zero!(accY)
            accY.coeffs[1] = identity(constant_term(temp_accY_i[i]))
            TaylorSeries.zero!(tmp840[i])
            (tmp840[i]).coeffs[1] = constant_term(μ[i]) * constant_term(F_J2_z[i])
            TaylorSeries.zero!(temp_accZ_i[i])
            (temp_accZ_i[i]).coeffs[1] = constant_term(accZ) - constant_term(tmp840[i])
            TaylorSeries.zero!(accZ)
            accZ.coeffs[1] = identity(constant_term(temp_accZ_i[i]))
        end
    end
    TaylorSeries.zero!(_4ϕj[N])
    (_4ϕj[N]).coeffs[1] = constant_term(4) * constant_term(newtonianNb_Potential[N])
    #= REPL[73]:452 =# Threads.@threads for i = 1:10
            TaylorSeries.zero!(ϕi_plus_4ϕj[i])
            (ϕi_plus_4ϕj[i]).coeffs[1] = constant_term(newtonianNb_Potential_t[i]) + constant_term(_4ϕj[N])
            TaylorSeries.zero!(tmp846[i])
            (tmp846[i]).coeffs[1] = constant_term(2) * constant_term(v2[i])
            TaylorSeries.zero!(tmp848[i])
            (tmp848[i]).coeffs[1] = constant_term(4) * constant_term(vi_dot_vj[i])
            TaylorSeries.zero!(tmp849[i])
            (tmp849[i]).coeffs[1] = constant_term(tmp846[i]) - constant_term(tmp848[i])
            TaylorSeries.zero!(sj2_plus_2si2_minus_4vivj[i])
            (sj2_plus_2si2_minus_4vivj[i]).coeffs[1] = constant_term(tmp849[i]) + constant_term(v2[N])
            TaylorSeries.zero!(ϕs_and_vs[i])
            (ϕs_and_vs[i]).coeffs[1] = constant_term(sj2_plus_2si2_minus_4vivj[i]) - constant_term(ϕi_plus_4ϕj[i])
            TaylorSeries.zero!(Xij_t_Ui[i])
            (Xij_t_Ui[i]).coeffs[1] = constant_term(X[i]) * constant_term(ui[i])
            TaylorSeries.zero!(Yij_t_Vi[i])
            (Yij_t_Vi[i]).coeffs[1] = constant_term(Y[i]) * constant_term(vi[i])
            TaylorSeries.zero!(Zij_t_Wi[i])
            (Zij_t_Wi[i]).coeffs[1] = constant_term(Z[i]) * constant_term(wi[i])
            TaylorSeries.zero!(tmp855[i])
            (tmp855[i]).coeffs[1] = constant_term(Xij_t_Ui[i]) + constant_term(Yij_t_Vi[i])
            TaylorSeries.zero!(Rij_dot_Vi[i])
            (Rij_dot_Vi[i]).coeffs[1] = constant_term(tmp855[i]) + constant_term(Zij_t_Wi[i])
            TaylorSeries.zero!(tmp858[i])
            (tmp858[i]).coeffs[1] = constant_term(Rij_dot_Vi[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(pn1t7[i])
            (pn1t7[i]).coeffs[1] = constant_term(tmp858[i]) / constant_term(r_p2[i])
            TaylorSeries.zero!(tmp861[i])
            (tmp861[i]).coeffs[1] = constant_term(1.5) * constant_term(pn1t7[i])
            TaylorSeries.zero!(pn1t2_7[i])
            (pn1t2_7[i]).coeffs[1] = constant_term(ϕs_and_vs[i]) - constant_term(tmp861[i])
            TaylorSeries.zero!(pn1t1_7[i])
            (pn1t1_7[i]).coeffs[1] = constant_term(c_p2) + constant_term(pn1t2_7[i])
            TaylorSeries.zero!(pNX_t_X[i])
            (pNX_t_X[i]).coeffs[1] = constant_term(acceph_t[3i - 2]) * constant_term(X[i])
            TaylorSeries.zero!(pNY_t_Y[i])
            (pNY_t_Y[i]).coeffs[1] = constant_term(acceph_t[3i - 1]) * constant_term(Y[i])
            TaylorSeries.zero!(pNZ_t_Z[i])
            (pNZ_t_Z[i]).coeffs[1] = constant_term(acceph_t[3i]) * constant_term(Z[i])
            TaylorSeries.zero!(tmp868[i])
            (tmp868[i]).coeffs[1] = constant_term(pNX_t_X[i]) + constant_term(pNY_t_Y[i])
            TaylorSeries.zero!(tmp869[i])
            (tmp869[i]).coeffs[1] = constant_term(tmp868[i]) + constant_term(pNZ_t_Z[i])
            TaylorSeries.zero!(tmp870[i])
            (tmp870[i]).coeffs[1] = constant_term(0.5) * constant_term(tmp869[i])
            TaylorSeries.zero!(pn1[i])
            (pn1[i]).coeffs[1] = constant_term(pn1t1_7[i]) + constant_term(tmp870[i])
            TaylorSeries.zero!(X_t_pn1[i])
            (X_t_pn1[i]).coeffs[1] = constant_term(newton_acc_X[i]) * constant_term(pn1[i])
            TaylorSeries.zero!(Y_t_pn1[i])
            (Y_t_pn1[i]).coeffs[1] = constant_term(newton_acc_Y[i]) * constant_term(pn1[i])
            TaylorSeries.zero!(Z_t_pn1[i])
            (Z_t_pn1[i]).coeffs[1] = constant_term(newton_acc_Z[i]) * constant_term(pn1[i])
            TaylorSeries.zero!(pNX_t_pn3[i])
            (pNX_t_pn3[i]).coeffs[1] = constant_term(acceph_t[3i - 2]) * constant_term(pn3[i])
            TaylorSeries.zero!(pNY_t_pn3[i])
            (pNY_t_pn3[i]).coeffs[1] = constant_term(acceph_t[3i - 1]) * constant_term(pn3[i])
            TaylorSeries.zero!(pNZ_t_pn3[i])
            (pNZ_t_pn3[i]).coeffs[1] = constant_term(acceph_t[3i]) * constant_term(pn3[i])
        end
    for i = 1:10
        TaylorSeries.zero!(tmp878[i])
        (tmp878[i]).coeffs[1] = constant_term(U_t_pn2[i]) + constant_term(pNX_t_pn3[i])
        TaylorSeries.zero!(termpnx[i])
        (termpnx[i]).coeffs[1] = constant_term(X_t_pn1[i]) + constant_term(tmp878[i])
        TaylorSeries.zero!(sumpnx[i])
        (sumpnx[i]).coeffs[1] = constant_term(pntempX) + constant_term(termpnx[i])
        TaylorSeries.zero!(pntempX)
        pntempX.coeffs[1] = identity(constant_term(sumpnx[i]))
        TaylorSeries.zero!(tmp881[i])
        (tmp881[i]).coeffs[1] = constant_term(V_t_pn2[i]) + constant_term(pNY_t_pn3[i])
        TaylorSeries.zero!(termpny[i])
        (termpny[i]).coeffs[1] = constant_term(Y_t_pn1[i]) + constant_term(tmp881[i])
        TaylorSeries.zero!(sumpny[i])
        (sumpny[i]).coeffs[1] = constant_term(pntempY) + constant_term(termpny[i])
        TaylorSeries.zero!(pntempY)
        pntempY.coeffs[1] = identity(constant_term(sumpny[i]))
        TaylorSeries.zero!(tmp884[i])
        (tmp884[i]).coeffs[1] = constant_term(W_t_pn2[i]) + constant_term(pNZ_t_pn3[i])
        TaylorSeries.zero!(termpnz[i])
        (termpnz[i]).coeffs[1] = constant_term(Z_t_pn1[i]) + constant_term(tmp884[i])
        TaylorSeries.zero!(sumpnz[i])
        (sumpnz[i]).coeffs[1] = constant_term(pntempZ) + constant_term(termpnz[i])
        TaylorSeries.zero!(pntempZ)
        pntempZ.coeffs[1] = identity(constant_term(sumpnz[i]))
    end
    #= REPL[73]:505 =# Threads.@threads for i = 11:Nm1
            TaylorSeries.zero!(X_t_pn1[i])
            (X_t_pn1[i]).coeffs[1] = constant_term(c_p2) * constant_term(newton_acc_X[i])
            TaylorSeries.zero!(Y_t_pn1[i])
            (Y_t_pn1[i]).coeffs[1] = constant_term(c_p2) * constant_term(newton_acc_Y[i])
            TaylorSeries.zero!(Z_t_pn1[i])
            (Z_t_pn1[i]).coeffs[1] = constant_term(c_p2) * constant_term(newton_acc_Z[i])
        end
    for i = 11:Nm1
        TaylorSeries.zero!(termpnx[i])
        (termpnx[i]).coeffs[1] = identity(constant_term(X_t_pn1[i]))
        TaylorSeries.zero!(sumpnx[i])
        (sumpnx[i]).coeffs[1] = constant_term(pntempX) + constant_term(termpnx[i])
        TaylorSeries.zero!(pntempX)
        pntempX.coeffs[1] = identity(constant_term(sumpnx[i]))
        TaylorSeries.zero!(termpny[i])
        (termpny[i]).coeffs[1] = identity(constant_term(Y_t_pn1[i]))
        TaylorSeries.zero!(sumpny[i])
        (sumpny[i]).coeffs[1] = constant_term(pntempY) + constant_term(termpny[i])
        TaylorSeries.zero!(pntempY)
        pntempY.coeffs[1] = identity(constant_term(sumpny[i]))
        TaylorSeries.zero!(termpnz[i])
        (termpnz[i]).coeffs[1] = identity(constant_term(Z_t_pn1[i]))
        TaylorSeries.zero!(sumpnz[i])
        (sumpnz[i]).coeffs[1] = constant_term(pntempZ) + constant_term(termpnz[i])
        TaylorSeries.zero!(pntempZ)
        pntempZ.coeffs[1] = identity(constant_term(sumpnz[i]))
    end
    TaylorSeries.zero!(postNewtonX)
    postNewtonX.coeffs[1] = constant_term(pntempX) * constant_term(c_m2)
    TaylorSeries.zero!(postNewtonY)
    postNewtonY.coeffs[1] = constant_term(pntempY) * constant_term(c_m2)
    TaylorSeries.zero!(postNewtonZ)
    postNewtonZ.coeffs[1] = constant_term(pntempZ) * constant_term(c_m2)
    TaylorSeries.zero!(tmp896)
    tmp896.coeffs[1] = constant_term(Y[1]) * constant_term(W[1])
    TaylorSeries.zero!(tmp897)
    tmp897.coeffs[1] = constant_term(Z[1]) * constant_term(V[1])
    TaylorSeries.zero!(hx)
    hx.coeffs[1] = constant_term(tmp896) - constant_term(tmp897)
    TaylorSeries.zero!(tmp899)
    tmp899.coeffs[1] = constant_term(Z[1]) * constant_term(U[1])
    TaylorSeries.zero!(tmp900)
    tmp900.coeffs[1] = constant_term(X[1]) * constant_term(W[1])
    TaylorSeries.zero!(hy)
    hy.coeffs[1] = constant_term(tmp899) - constant_term(tmp900)
    TaylorSeries.zero!(tmp902)
    tmp902.coeffs[1] = constant_term(X[1]) * constant_term(V[1])
    TaylorSeries.zero!(tmp903)
    tmp903.coeffs[1] = constant_term(Y[1]) * constant_term(U[1])
    TaylorSeries.zero!(hz)
    hz.coeffs[1] = constant_term(tmp902) - constant_term(tmp903)
    TaylorSeries.zero!(tmp905)
    tmp905.coeffs[1] = constant_term(hz) * constant_term(Y[1])
    TaylorSeries.zero!(tmp906)
    tmp906.coeffs[1] = constant_term(hy) * constant_term(Z[1])
    TaylorSeries.zero!(t_x)
    t_x.coeffs[1] = constant_term(tmp905) - constant_term(tmp906)
    TaylorSeries.zero!(tmp908)
    tmp908.coeffs[1] = constant_term(hx) * constant_term(Z[1])
    TaylorSeries.zero!(tmp909)
    tmp909.coeffs[1] = constant_term(hz) * constant_term(X[1])
    TaylorSeries.zero!(t_y)
    t_y.coeffs[1] = constant_term(tmp908) - constant_term(tmp909)
    TaylorSeries.zero!(tmp911)
    tmp911.coeffs[1] = constant_term(hy) * constant_term(X[1])
    TaylorSeries.zero!(tmp912)
    tmp912.coeffs[1] = constant_term(hx) * constant_term(Y[1])
    TaylorSeries.zero!(t_z)
    t_z.coeffs[1] = constant_term(tmp911) - constant_term(tmp912)
    TaylorSeries.zero!(tmp915)
    tmp915.coeffs[1] = constant_term(t_x) ^ float(constant_term(2))
    TaylorSeries.zero!(tmp917)
    tmp917.coeffs[1] = constant_term(t_y) ^ float(constant_term(2))
    TaylorSeries.zero!(tmp918)
    tmp918.coeffs[1] = constant_term(tmp915) + constant_term(tmp917)
    TaylorSeries.zero!(tmp920)
    tmp920.coeffs[1] = constant_term(t_z) ^ float(constant_term(2))
    TaylorSeries.zero!(tmp921)
    tmp921.coeffs[1] = constant_term(tmp918) + constant_term(tmp920)
    TaylorSeries.zero!(t_norm)
    t_norm.coeffs[1] = sqrt(constant_term(tmp921))
    TaylorSeries.zero!(t_x_unit)
    t_x_unit.coeffs[1] = constant_term(t_x) / constant_term(t_norm)
    TaylorSeries.zero!(t_y_unit)
    t_y_unit.coeffs[1] = constant_term(t_y) / constant_term(t_norm)
    TaylorSeries.zero!(t_z_unit)
    t_z_unit.coeffs[1] = constant_term(t_z) / constant_term(t_norm)
    TaylorSeries.zero!(tmp926)
    tmp926.coeffs[1] = constant_term(X[1]) / constant_term(r_p1d2[1])
    TaylorSeries.zero!(r_x_unit)
    r_x_unit.coeffs[1] = -(constant_term(tmp926))
    TaylorSeries.zero!(tmp928)
    tmp928.coeffs[1] = constant_term(Y[1]) / constant_term(r_p1d2[1])
    TaylorSeries.zero!(r_y_unit)
    r_y_unit.coeffs[1] = -(constant_term(tmp928))
    TaylorSeries.zero!(tmp930)
    tmp930.coeffs[1] = constant_term(Z[1]) / constant_term(r_p1d2[1])
    TaylorSeries.zero!(r_z_unit)
    r_z_unit.coeffs[1] = -(constant_term(tmp930))
    TaylorSeries.zero!(g_r)
    g_r.coeffs[1] = identity(constant_term(r_p2[1]))
    TaylorSeries.zero!(A2_t_g_r)
    A2_t_g_r.coeffs[1] = constant_term(q[7]) / constant_term(g_r)
    TaylorSeries.zero!(A1_t_g_r)
    A1_t_g_r.coeffs[1] = constant_term(q[8]) / constant_term(g_r)
    TaylorSeries.zero!(tmp934)
    tmp934.coeffs[1] = constant_term(A2_t_g_r) * constant_term(t_x_unit)
    TaylorSeries.zero!(tmp935)
    tmp935.coeffs[1] = constant_term(A1_t_g_r) * constant_term(r_x_unit)
    TaylorSeries.zero!(NGAx)
    NGAx.coeffs[1] = constant_term(tmp934) + constant_term(tmp935)
    TaylorSeries.zero!(tmp937)
    tmp937.coeffs[1] = constant_term(A2_t_g_r) * constant_term(t_y_unit)
    TaylorSeries.zero!(tmp938)
    tmp938.coeffs[1] = constant_term(A1_t_g_r) * constant_term(r_y_unit)
    TaylorSeries.zero!(NGAy)
    NGAy.coeffs[1] = constant_term(tmp937) + constant_term(tmp938)
    TaylorSeries.zero!(tmp940)
    tmp940.coeffs[1] = constant_term(A2_t_g_r) * constant_term(t_z_unit)
    TaylorSeries.zero!(tmp941)
    tmp941.coeffs[1] = constant_term(A1_t_g_r) * constant_term(r_z_unit)
    TaylorSeries.zero!(NGAz)
    NGAz.coeffs[1] = constant_term(tmp940) + constant_term(tmp941)
    TaylorSeries.zero!(tmp943)
    tmp943.coeffs[1] = constant_term(postNewtonX) + constant_term(accX)
    TaylorSeries.zero!(dq[4])
    (dq[4]).coeffs[1] = constant_term(tmp943) + constant_term(NGAx)
    TaylorSeries.zero!(tmp945)
    tmp945.coeffs[1] = constant_term(postNewtonY) + constant_term(accY)
    TaylorSeries.zero!(dq[5])
    (dq[5]).coeffs[1] = constant_term(tmp945) + constant_term(NGAy)
    TaylorSeries.zero!(tmp947)
    tmp947.coeffs[1] = constant_term(postNewtonZ) + constant_term(accZ)
    TaylorSeries.zero!(dq[6])
    (dq[6]).coeffs[1] = constant_term(tmp947) + constant_term(NGAz)
    TaylorSeries.zero!(dq[7])
    (dq[7]).coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(dq[8])
    (dq[8]).coeffs[1] = identity(constant_term(zero_q_1))
    for __idx = eachindex(q)
        (q[__idx]).coeffs[2] = (dq[__idx]).coeffs[1]
    end
    for ord = 1:order - 1
        ordnext = ord + 1
        TaylorSeries.identity!(pntempX, zero_q_1, ord)
        TaylorSeries.identity!(pntempY, zero_q_1, ord)
        TaylorSeries.identity!(pntempZ, zero_q_1, ord)
        TaylorSeries.identity!(accX, zero_q_1, ord)
        TaylorSeries.identity!(accY, zero_q_1, ord)
        TaylorSeries.identity!(accZ, zero_q_1, ord)
        TaylorSeries.identity!(dq[1], q[4], ord)
        TaylorSeries.identity!(dq[2], q[5], ord)
        TaylorSeries.identity!(dq[3], q[6], ord)
        TaylorSeries.identity!(newtonianNb_Potential[N], zero_q_1, ord)
        TaylorSeries.mul!(_4dq[1], 4, dq[1], ord)
        TaylorSeries.mul!(_4dq[2], 4, dq[2], ord)
        TaylorSeries.mul!(_4dq[3], 4, dq[3], ord)
        #= REPL[73]:250 =# Threads.@threads for i = 1:Nm1
                TaylorSeries.identity!(ui[i], ss16asteph_t[3 * ((N - 1) + i) - 2], ord)
                TaylorSeries.identity!(vi[i], ss16asteph_t[3 * ((N - 1) + i) - 1], ord)
                TaylorSeries.identity!(wi[i], ss16asteph_t[3 * ((N - 1) + i)], ord)
                TaylorSeries.subst!(X[i], ss16asteph_t[3i - 2], q[1], ord)
                TaylorSeries.subst!(Y[i], ss16asteph_t[3i - 1], q[2], ord)
                TaylorSeries.subst!(Z[i], ss16asteph_t[3i], q[3], ord)
                TaylorSeries.subst!(U[i], ui[i], dq[1], ord)
                TaylorSeries.subst!(V[i], vi[i], dq[2], ord)
                TaylorSeries.subst!(W[i], wi[i], dq[3], ord)
                TaylorSeries.mul!(tmp694[i], -3, ui[i], ord)
                TaylorSeries.add!(_4U_m_3X[i], tmp694[i], _4dq[1], ord)
                TaylorSeries.mul!(tmp697[i], -3, vi[i], ord)
                TaylorSeries.add!(_4V_m_3Y[i], tmp697[i], _4dq[2], ord)
                TaylorSeries.mul!(tmp700[i], -3, wi[i], ord)
                TaylorSeries.add!(_4W_m_3Z[i], tmp700[i], _4dq[3], ord)
                TaylorSeries.mul!(pn2x[i], X[i], _4U_m_3X[i], ord)
                TaylorSeries.mul!(pn2y[i], Y[i], _4V_m_3Y[i], ord)
                TaylorSeries.mul!(pn2z[i], Z[i], _4W_m_3Z[i], ord)
                TaylorSeries.mul!(UU[i], ui[i], dq[1], ord)
                TaylorSeries.mul!(VV[i], vi[i], dq[2], ord)
                TaylorSeries.mul!(WW[i], wi[i], dq[3], ord)
                TaylorSeries.add!(tmp708[i], UU[i], VV[i], ord)
                TaylorSeries.add!(vi_dot_vj[i], tmp708[i], WW[i], ord)
                TaylorSeries.pow!(tmp711[i], X[i], 2, ord)
                TaylorSeries.pow!(tmp713[i], Y[i], 2, ord)
                TaylorSeries.add!(tmp714[i], tmp711[i], tmp713[i], ord)
                TaylorSeries.pow!(tmp716[i], Z[i], 2, ord)
                TaylorSeries.add!(r_p2[i], tmp714[i], tmp716[i], ord)
                TaylorSeries.sqrt!(r_p1d2[i], r_p2[i], ord)
                TaylorSeries.pow!(r_p3d2[i], r_p2[i], 1.5, ord)
                TaylorSeries.pow!(r_p7d2[i], r_p2[i], 3.5, ord)
                TaylorSeries.div!(newtonianCoeff[i], μ[i], r_p3d2[i], ord)
                TaylorSeries.add!(tmp724[i], pn2x[i], pn2y[i], ord)
                TaylorSeries.add!(tmp725[i], tmp724[i], pn2z[i], ord)
                TaylorSeries.mul!(pn2[i], newtonianCoeff[i], tmp725[i], ord)
                TaylorSeries.mul!(newton_acc_X[i], X[i], newtonianCoeff[i], ord)
                TaylorSeries.mul!(newton_acc_Y[i], Y[i], newtonianCoeff[i], ord)
                TaylorSeries.mul!(newton_acc_Z[i], Z[i], newtonianCoeff[i], ord)
                TaylorSeries.div!(newtonian1b_Potential[i], μ[i], r_p1d2[i], ord)
                TaylorSeries.mul!(pn3[i], 3.5, newtonian1b_Potential[i], ord)
                TaylorSeries.mul!(U_t_pn2[i], pn2[i], U[i], ord)
                TaylorSeries.mul!(V_t_pn2[i], pn2[i], V[i], ord)
                TaylorSeries.mul!(W_t_pn2[i], pn2[i], W[i], ord)
                if UJ_interaction[i]
                    TaylorSeries.subst!(tmp736[i], X[i], ord)
                    TaylorSeries.mul!(t31[i], tmp736[i], M_[1, 3, i], ord)
                    TaylorSeries.subst!(tmp738[i], Y[i], ord)
                    TaylorSeries.mul!(t32[i], tmp738[i], M_[2, 3, i], ord)
                    TaylorSeries.subst!(tmp740[i], Z[i], ord)
                    TaylorSeries.mul!(t33[i], tmp740[i], M_[3, 3, i], ord)
                    TaylorSeries.add!(tmp742[i], t31[i], t32[i], ord)
                    TaylorSeries.add!(r_sin_ϕ[i], tmp742[i], t33[i], ord)
                    TaylorSeries.div!(sin_ϕ[i], r_sin_ϕ[i], r_p1d2[i], ord)
                    TaylorSeries.asin!(ϕ[i], sin_ϕ[i], tmp949[i], ord)
                    TaylorSeries.sincos!(tmp950[i], cos_ϕ[i], ϕ[i], ord)
                    TaylorSeries.pow!(sin2_ϕ[i], sin_ϕ[i], 2, ord)
                    TaylorSeries.pow!(sin3_ϕ[i], sin_ϕ[i], 3, ord)
                    TaylorSeries.mul!(tmp752[i], 1.5, sin2_ϕ[i], ord)
                    TaylorSeries.subst!(P_2_sin_ϕ[i], tmp752[i], 0.5, ord)
                    TaylorSeries.mul!(∂P_2_sin_ϕ[i], 3, sin_ϕ[i], ord)
                    TaylorSeries.mul!(tmp758[i], -1.5, sin_ϕ[i], ord)
                    TaylorSeries.mul!(tmp760[i], 2.5, sin3_ϕ[i], ord)
                    TaylorSeries.add!(P_3_sin_ϕ[i], tmp758[i], tmp760[i], ord)
                    TaylorSeries.mul!(tmp764[i], 7.5, sin2_ϕ[i], ord)
                    TaylorSeries.add!(∂P_3_sin_ϕ[i], -1.5, tmp764[i], ord)
                    TaylorSeries.pow!(tmp767[i], r_p2[i], 2, ord)
                    TaylorSeries.div!(tmp768[i], Λ2[i], tmp767[i], ord)
                    TaylorSeries.subst!(Λ2j_div_r4[i], tmp768[i], ord)
                    TaylorSeries.pow!(tmp771[i], r_p1d2[i], 5, ord)
                    TaylorSeries.div!(tmp772[i], Λ3[i], tmp771[i], ord)
                    TaylorSeries.subst!(Λ3j_div_r5[i], tmp772[i], ord)
                    TaylorSeries.subst!(tmp774[i], cos_ϕ[i], ord)
                    TaylorSeries.mul!(m_c_ϕ_∂P_2[i], tmp774[i], ∂P_2_sin_ϕ[i], ord)
                    TaylorSeries.subst!(tmp776[i], cos_ϕ[i], ord)
                    TaylorSeries.mul!(m_c_ϕ_∂P_3[i], tmp776[i], ∂P_3_sin_ϕ[i], ord)
                    TaylorSeries.mul!(tmp779[i], Λ2j_div_r4[i], 3, ord)
                    TaylorSeries.mul!(F_J2_ξ[i], tmp779[i], P_2_sin_ϕ[i], ord)
                    TaylorSeries.mul!(F_J2_ζ[i], Λ2j_div_r4[i], m_c_ϕ_∂P_2[i], ord)
                    TaylorSeries.mul!(tmp783[i], Λ3j_div_r5[i], 4, ord)
                    TaylorSeries.mul!(F_J3_ξ[i], tmp783[i], P_3_sin_ϕ[i], ord)
                    TaylorSeries.mul!(F_J3_ζ[i], Λ3j_div_r5[i], m_c_ϕ_∂P_3[i], ord)
                    TaylorSeries.identity!(F_J_ξ[i], F_J2_ξ[i], ord)
                    TaylorSeries.identity!(F_J_ζ[i], F_J2_ζ[i], ord)
                    TaylorSeries.subst!(tmp786[i], X[i], ord)
                    TaylorSeries.div!(ξx[i], tmp786[i], r_p1d2[i], ord)
                    TaylorSeries.subst!(tmp788[i], Y[i], ord)
                    TaylorSeries.div!(ξy[i], tmp788[i], r_p1d2[i], ord)
                    TaylorSeries.subst!(tmp790[i], Z[i], ord)
                    TaylorSeries.div!(ξz[i], tmp790[i], r_p1d2[i], ord)
                    TaylorSeries.mul!(ηx1[i], M_[2, 3, i], ξz[i], ord)
                    TaylorSeries.mul!(ηy1[i], M_[3, 3, i], ξx[i], ord)
                    TaylorSeries.mul!(ηz1[i], M_[1, 3, i], ξy[i], ord)
                    TaylorSeries.mul!(ηx2[i], M_[3, 3, i], ξy[i], ord)
                    TaylorSeries.mul!(ηy2[i], M_[1, 3, i], ξz[i], ord)
                    TaylorSeries.mul!(ηz2[i], M_[2, 3, i], ξx[i], ord)
                    TaylorSeries.subst!(ηx[i], ηx1[i], ηx2[i], ord)
                    TaylorSeries.subst!(ηy[i], ηy1[i], ηy2[i], ord)
                    TaylorSeries.subst!(ηz[i], ηz1[i], ηz2[i], ord)
                    TaylorSeries.mul!(ζx1[i], ξy[i], ηz[i], ord)
                    TaylorSeries.mul!(ζy1[i], ξz[i], ηx[i], ord)
                    TaylorSeries.mul!(ζz1[i], ξx[i], ηy[i], ord)
                    TaylorSeries.mul!(ζx2[i], ξz[i], ηy[i], ord)
                    TaylorSeries.mul!(ζy2[i], ξx[i], ηz[i], ord)
                    TaylorSeries.mul!(ζz2[i], ξy[i], ηx[i], ord)
                    TaylorSeries.subst!(ζx[i], ζx1[i], ζx2[i], ord)
                    TaylorSeries.subst!(ζy[i], ζy1[i], ζy2[i], ord)
                    TaylorSeries.subst!(ζz[i], ζz1[i], ζz2[i], ord)
                    TaylorSeries.mul!(F_J2_x1[i], F_J_ξ[i], ξx[i], ord)
                    TaylorSeries.mul!(F_J2_y1[i], F_J_ξ[i], ξy[i], ord)
                    TaylorSeries.mul!(F_J2_z1[i], F_J_ξ[i], ξz[i], ord)
                    TaylorSeries.mul!(F_J2_x2[i], F_J_ζ[i], ζx[i], ord)
                    TaylorSeries.mul!(F_J2_y2[i], F_J_ζ[i], ζy[i], ord)
                    TaylorSeries.mul!(F_J2_z2[i], F_J_ζ[i], ζz[i], ord)
                    TaylorSeries.add!(F_J2_x[i], F_J2_x1[i], F_J2_x2[i], ord)
                    TaylorSeries.add!(F_J2_y[i], F_J2_y1[i], F_J2_y2[i], ord)
                    TaylorSeries.add!(F_J2_z[i], F_J2_z1[i], F_J2_z2[i], ord)
                end
                TaylorSeries.pow!(tmp820[i], ui[i], 2, ord)
                TaylorSeries.pow!(tmp822[i], vi[i], 2, ord)
                TaylorSeries.add!(tmp823[i], tmp820[i], tmp822[i], ord)
                TaylorSeries.pow!(tmp825[i], wi[i], 2, ord)
                TaylorSeries.add!(v2[i], tmp823[i], tmp825[i], ord)
            end
        TaylorSeries.pow!(tmp828, q[4], 2, ord)
        TaylorSeries.pow!(tmp830, q[5], 2, ord)
        TaylorSeries.add!(tmp831, tmp828, tmp830, ord)
        TaylorSeries.pow!(tmp833, q[6], 2, ord)
        TaylorSeries.add!(v2[N], tmp831, tmp833, ord)
        for i = 1:Nm1
            TaylorSeries.add!(temp_004[i], newtonian1b_Potential[i], newtonianNb_Potential[N], ord)
            TaylorSeries.identity!(newtonianNb_Potential[N], temp_004[i], ord)
            if UJ_interaction[i]
                TaylorSeries.mul!(tmp836[i], μ[i], F_J2_x[i], ord)
                TaylorSeries.subst!(temp_accX_i[i], accX, tmp836[i], ord)
                TaylorSeries.identity!(accX, temp_accX_i[i], ord)
                TaylorSeries.mul!(tmp838[i], μ[i], F_J2_y[i], ord)
                TaylorSeries.subst!(temp_accY_i[i], accY, tmp838[i], ord)
                TaylorSeries.identity!(accY, temp_accY_i[i], ord)
                TaylorSeries.mul!(tmp840[i], μ[i], F_J2_z[i], ord)
                TaylorSeries.subst!(temp_accZ_i[i], accZ, tmp840[i], ord)
                TaylorSeries.identity!(accZ, temp_accZ_i[i], ord)
            end
        end
        TaylorSeries.mul!(_4ϕj[N], 4, newtonianNb_Potential[N], ord)
        #= REPL[73]:452 =# Threads.@threads for i = 1:10
                TaylorSeries.add!(ϕi_plus_4ϕj[i], newtonianNb_Potential_t[i], _4ϕj[N], ord)
                TaylorSeries.mul!(tmp846[i], 2, v2[i], ord)
                TaylorSeries.mul!(tmp848[i], 4, vi_dot_vj[i], ord)
                TaylorSeries.subst!(tmp849[i], tmp846[i], tmp848[i], ord)
                TaylorSeries.add!(sj2_plus_2si2_minus_4vivj[i], tmp849[i], v2[N], ord)
                TaylorSeries.subst!(ϕs_and_vs[i], sj2_plus_2si2_minus_4vivj[i], ϕi_plus_4ϕj[i], ord)
                TaylorSeries.mul!(Xij_t_Ui[i], X[i], ui[i], ord)
                TaylorSeries.mul!(Yij_t_Vi[i], Y[i], vi[i], ord)
                TaylorSeries.mul!(Zij_t_Wi[i], Z[i], wi[i], ord)
                TaylorSeries.add!(tmp855[i], Xij_t_Ui[i], Yij_t_Vi[i], ord)
                TaylorSeries.add!(Rij_dot_Vi[i], tmp855[i], Zij_t_Wi[i], ord)
                TaylorSeries.pow!(tmp858[i], Rij_dot_Vi[i], 2, ord)
                TaylorSeries.div!(pn1t7[i], tmp858[i], r_p2[i], ord)
                TaylorSeries.mul!(tmp861[i], 1.5, pn1t7[i], ord)
                TaylorSeries.subst!(pn1t2_7[i], ϕs_and_vs[i], tmp861[i], ord)
                TaylorSeries.add!(pn1t1_7[i], c_p2, pn1t2_7[i], ord)
                TaylorSeries.mul!(pNX_t_X[i], acceph_t[3i - 2], X[i], ord)
                TaylorSeries.mul!(pNY_t_Y[i], acceph_t[3i - 1], Y[i], ord)
                TaylorSeries.mul!(pNZ_t_Z[i], acceph_t[3i], Z[i], ord)
                TaylorSeries.add!(tmp868[i], pNX_t_X[i], pNY_t_Y[i], ord)
                TaylorSeries.add!(tmp869[i], tmp868[i], pNZ_t_Z[i], ord)
                TaylorSeries.mul!(tmp870[i], 0.5, tmp869[i], ord)
                TaylorSeries.add!(pn1[i], pn1t1_7[i], tmp870[i], ord)
                TaylorSeries.mul!(X_t_pn1[i], newton_acc_X[i], pn1[i], ord)
                TaylorSeries.mul!(Y_t_pn1[i], newton_acc_Y[i], pn1[i], ord)
                TaylorSeries.mul!(Z_t_pn1[i], newton_acc_Z[i], pn1[i], ord)
                TaylorSeries.mul!(pNX_t_pn3[i], acceph_t[3i - 2], pn3[i], ord)
                TaylorSeries.mul!(pNY_t_pn3[i], acceph_t[3i - 1], pn3[i], ord)
                TaylorSeries.mul!(pNZ_t_pn3[i], acceph_t[3i], pn3[i], ord)
            end
        for i = 1:10
            TaylorSeries.add!(tmp878[i], U_t_pn2[i], pNX_t_pn3[i], ord)
            TaylorSeries.add!(termpnx[i], X_t_pn1[i], tmp878[i], ord)
            TaylorSeries.add!(sumpnx[i], pntempX, termpnx[i], ord)
            TaylorSeries.identity!(pntempX, sumpnx[i], ord)
            TaylorSeries.add!(tmp881[i], V_t_pn2[i], pNY_t_pn3[i], ord)
            TaylorSeries.add!(termpny[i], Y_t_pn1[i], tmp881[i], ord)
            TaylorSeries.add!(sumpny[i], pntempY, termpny[i], ord)
            TaylorSeries.identity!(pntempY, sumpny[i], ord)
            TaylorSeries.add!(tmp884[i], W_t_pn2[i], pNZ_t_pn3[i], ord)
            TaylorSeries.add!(termpnz[i], Z_t_pn1[i], tmp884[i], ord)
            TaylorSeries.add!(sumpnz[i], pntempZ, termpnz[i], ord)
            TaylorSeries.identity!(pntempZ, sumpnz[i], ord)
        end
        #= REPL[73]:505 =# Threads.@threads for i = 11:Nm1
                TaylorSeries.mul!(X_t_pn1[i], c_p2, newton_acc_X[i], ord)
                TaylorSeries.mul!(Y_t_pn1[i], c_p2, newton_acc_Y[i], ord)
                TaylorSeries.mul!(Z_t_pn1[i], c_p2, newton_acc_Z[i], ord)
            end
        for i = 11:Nm1
            TaylorSeries.identity!(termpnx[i], X_t_pn1[i], ord)
            TaylorSeries.add!(sumpnx[i], pntempX, termpnx[i], ord)
            TaylorSeries.identity!(pntempX, sumpnx[i], ord)
            TaylorSeries.identity!(termpny[i], Y_t_pn1[i], ord)
            TaylorSeries.add!(sumpny[i], pntempY, termpny[i], ord)
            TaylorSeries.identity!(pntempY, sumpny[i], ord)
            TaylorSeries.identity!(termpnz[i], Z_t_pn1[i], ord)
            TaylorSeries.add!(sumpnz[i], pntempZ, termpnz[i], ord)
            TaylorSeries.identity!(pntempZ, sumpnz[i], ord)
        end
        TaylorSeries.mul!(postNewtonX, pntempX, c_m2, ord)
        TaylorSeries.mul!(postNewtonY, pntempY, c_m2, ord)
        TaylorSeries.mul!(postNewtonZ, pntempZ, c_m2, ord)
        TaylorSeries.mul!(tmp896, Y[1], W[1], ord)
        TaylorSeries.mul!(tmp897, Z[1], V[1], ord)
        TaylorSeries.subst!(hx, tmp896, tmp897, ord)
        TaylorSeries.mul!(tmp899, Z[1], U[1], ord)
        TaylorSeries.mul!(tmp900, X[1], W[1], ord)
        TaylorSeries.subst!(hy, tmp899, tmp900, ord)
        TaylorSeries.mul!(tmp902, X[1], V[1], ord)
        TaylorSeries.mul!(tmp903, Y[1], U[1], ord)
        TaylorSeries.subst!(hz, tmp902, tmp903, ord)
        TaylorSeries.mul!(tmp905, hz, Y[1], ord)
        TaylorSeries.mul!(tmp906, hy, Z[1], ord)
        TaylorSeries.subst!(t_x, tmp905, tmp906, ord)
        TaylorSeries.mul!(tmp908, hx, Z[1], ord)
        TaylorSeries.mul!(tmp909, hz, X[1], ord)
        TaylorSeries.subst!(t_y, tmp908, tmp909, ord)
        TaylorSeries.mul!(tmp911, hy, X[1], ord)
        TaylorSeries.mul!(tmp912, hx, Y[1], ord)
        TaylorSeries.subst!(t_z, tmp911, tmp912, ord)
        TaylorSeries.pow!(tmp915, t_x, 2, ord)
        TaylorSeries.pow!(tmp917, t_y, 2, ord)
        TaylorSeries.add!(tmp918, tmp915, tmp917, ord)
        TaylorSeries.pow!(tmp920, t_z, 2, ord)
        TaylorSeries.add!(tmp921, tmp918, tmp920, ord)
        TaylorSeries.sqrt!(t_norm, tmp921, ord)
        TaylorSeries.div!(t_x_unit, t_x, t_norm, ord)
        TaylorSeries.div!(t_y_unit, t_y, t_norm, ord)
        TaylorSeries.div!(t_z_unit, t_z, t_norm, ord)
        TaylorSeries.div!(tmp926, X[1], r_p1d2[1], ord)
        TaylorSeries.subst!(r_x_unit, tmp926, ord)
        TaylorSeries.div!(tmp928, Y[1], r_p1d2[1], ord)
        TaylorSeries.subst!(r_y_unit, tmp928, ord)
        TaylorSeries.div!(tmp930, Z[1], r_p1d2[1], ord)
        TaylorSeries.subst!(r_z_unit, tmp930, ord)
        TaylorSeries.identity!(g_r, r_p2[1], ord)
        TaylorSeries.div!(A2_t_g_r, q[7], g_r, ord)
        TaylorSeries.div!(A1_t_g_r, q[8], g_r, ord)
        TaylorSeries.mul!(tmp934, A2_t_g_r, t_x_unit, ord)
        TaylorSeries.mul!(tmp935, A1_t_g_r, r_x_unit, ord)
        TaylorSeries.add!(NGAx, tmp934, tmp935, ord)
        TaylorSeries.mul!(tmp937, A2_t_g_r, t_y_unit, ord)
        TaylorSeries.mul!(tmp938, A1_t_g_r, r_y_unit, ord)
        TaylorSeries.add!(NGAy, tmp937, tmp938, ord)
        TaylorSeries.mul!(tmp940, A2_t_g_r, t_z_unit, ord)
        TaylorSeries.mul!(tmp941, A1_t_g_r, r_z_unit, ord)
        TaylorSeries.add!(NGAz, tmp940, tmp941, ord)
        TaylorSeries.add!(tmp943, postNewtonX, accX, ord)
        TaylorSeries.add!(dq[4], tmp943, NGAx, ord)
        TaylorSeries.add!(tmp945, postNewtonY, accY, ord)
        TaylorSeries.add!(dq[5], tmp945, NGAy, ord)
        TaylorSeries.add!(tmp947, postNewtonZ, accZ, ord)
        TaylorSeries.add!(dq[6], tmp947, NGAz, ord)
        TaylorSeries.identity!(dq[7], zero_q_1, ord)
        TaylorSeries.identity!(dq[8], zero_q_1, ord)
        for __idx = eachindex(q)
            (q[__idx]).coeffs[ordnext + 1] = (dq[__idx]).coeffs[ordnext] / ordnext
        end
    end
    return nothing
end

# TaylorIntegration._allocate_jetcoeffs! method for src/propagation/asteroid_dynamical_models.jl: RNp1BP_pN_A_J23E_J2S_eph_threads!
function TaylorIntegration._allocate_jetcoeffs!(::Val{RNp1BP_pN_A_J23E_J2S_eph_threads!}, t::Taylor1{_T}, q::AbstractArray{Taylor1{_S}, _N}, dq::AbstractArray{Taylor1{_S}, _N}, params) where {_T <: Real, _S <: Number, _N}
    order = t.order
    local jd0 = params.jd0
    local dsj2k = t + (jd0 - JD_J2000)
    local ss16asteph_t = evaleph(params.sseph, dsj2k, q[1])
    local acceph_t = evaleph(params.acceph, dsj2k, q[1])
    local newtonianNb_Potential_t = evaleph(params.poteph, dsj2k, q[1])
    local S = eltype(q)
    local UJ_interaction = params.UJ_interaction
    local N = params.N
    local Nm1 = N - 1
    local μ = params.μ
    local zero_q_1 = auxzero(q[1])
    X = Array{S}(undef, N)
    Y = Array{S}(undef, N)
    Z = Array{S}(undef, N)
    r_p2 = Array{S}(undef, N)
    r_p1d2 = Array{S}(undef, N)
    r_p3d2 = Array{S}(undef, N)
    r_p7d2 = Array{S}(undef, N)
    newtonianCoeff = Array{S}(undef, N)
    ui = Array{S}(undef, N - 1)
    vi = Array{S}(undef, N - 1)
    wi = Array{S}(undef, N - 1)
    U = Array{S}(undef, N)
    V = Array{S}(undef, N)
    W = Array{S}(undef, N)
    _4dq = Array{S}(undef, 3)
    _4U_m_3X = Array{S}(undef, N)
    _4V_m_3Y = Array{S}(undef, N)
    _4W_m_3Z = Array{S}(undef, N)
    UU = Array{S}(undef, N)
    VV = Array{S}(undef, N)
    WW = Array{S}(undef, N)
    newtonian1b_Potential = Array{S}(undef, N)
    newtonianNb_Potential = Array{S}(undef, N)
    newton_acc_X = Array{S}(undef, N)
    newton_acc_Y = Array{S}(undef, N)
    newton_acc_Z = Array{S}(undef, N)
    v2 = Array{S}(undef, N)
    vi_dot_vj = Array{S}(undef, N)
    pn2 = Array{S}(undef, N)
    U_t_pn2 = Array{S}(undef, N)
    V_t_pn2 = Array{S}(undef, N)
    W_t_pn2 = Array{S}(undef, N)
    pn3 = Array{S}(undef, N)
    pNX_t_pn3 = Array{S}(undef, N)
    pNY_t_pn3 = Array{S}(undef, N)
    pNZ_t_pn3 = Array{S}(undef, N)
    _4ϕj = Array{S}(undef, N)
    ϕi_plus_4ϕj = Array{S}(undef, N)
    sj2_plus_2si2_minus_4vivj = Array{S}(undef, N)
    ϕs_and_vs = Array{S}(undef, N)
    pn1t1_7 = Array{S}(undef, N)
    pNX_t_X = Array{S}(undef, N)
    pNY_t_Y = Array{S}(undef, N)
    pNZ_t_Z = Array{S}(undef, N)
    pn1 = Array{S}(undef, N)
    X_t_pn1 = Array{S}(undef, N)
    Y_t_pn1 = Array{S}(undef, N)
    Z_t_pn1 = Array{S}(undef, N)
    pntempX = Taylor1(identity(constant_term(zero_q_1)), order)
    pntempY = Taylor1(identity(constant_term(zero_q_1)), order)
    pntempZ = Taylor1(identity(constant_term(zero_q_1)), order)
    t31 = Array{S}(undef, N)
    t32 = Array{S}(undef, N)
    t33 = Array{S}(undef, N)
    r_sin_ϕ = Array{S}(undef, N)
    sin_ϕ = Array{S}(undef, N)
    ϕ = Array{S}(undef, N)
    cos_ϕ = Array{S}(undef, N)
    sin2_ϕ = Array{S}(undef, N)
    sin3_ϕ = Array{S}(undef, N)
    sin4_ϕ = Array{S}(undef, N)
    F_J2_x = Array{S}(undef, N)
    F_J2_y = Array{S}(undef, N)
    F_J2_z = Array{S}(undef, N)
    F_J2_x1 = Array{S}(undef, N)
    F_J2_y1 = Array{S}(undef, N)
    F_J2_z1 = Array{S}(undef, N)
    F_J2_x2 = Array{S}(undef, N)
    F_J2_y2 = Array{S}(undef, N)
    F_J2_z2 = Array{S}(undef, N)
    temp_accX_i = Array{S}(undef, N)
    temp_accY_i = Array{S}(undef, N)
    temp_accZ_i = Array{S}(undef, N)
    P_2_sin_ϕ = Array{S}(undef, N)
    ∂P_2_sin_ϕ = Array{S}(undef, N)
    P_3_sin_ϕ = Array{S}(undef, N)
    ∂P_3_sin_ϕ = Array{S}(undef, N)
    m_c_ϕ_∂P_2 = Array{S}(undef, N)
    m_c_ϕ_∂P_3 = Array{S}(undef, N)
    Λ2j_div_r4 = Array{S}(undef, N)
    Λ3j_div_r5 = Array{S}(undef, N)
    F_J_ξ = Array{S}(undef, N)
    F_J_η = Array{S}(undef, N)
    F_J_ζ = Array{S}(undef, N)
    F_J2_ξ = Array{S}(undef, N)
    F_J2_η = Array{S}(undef, N)
    F_J2_ζ = Array{S}(undef, N)
    F_J3_ξ = Array{S}(undef, N)
    F_J3_η = Array{S}(undef, N)
    F_J3_ζ = Array{S}(undef, N)
    ξx = Array{S}(undef, N)
    ξy = Array{S}(undef, N)
    ξz = Array{S}(undef, N)
    ηx = Array{S}(undef, N)
    ηy = Array{S}(undef, N)
    ηz = Array{S}(undef, N)
    ηx1 = Array{S}(undef, N)
    ηy1 = Array{S}(undef, N)
    ηz1 = Array{S}(undef, N)
    ηx2 = Array{S}(undef, N)
    ηy2 = Array{S}(undef, N)
    ηz2 = Array{S}(undef, N)
    ζx = Array{S}(undef, N)
    ζy = Array{S}(undef, N)
    ζz = Array{S}(undef, N)
    ζx1 = Array{S}(undef, N)
    ζy1 = Array{S}(undef, N)
    ζz1 = Array{S}(undef, N)
    ζx2 = Array{S}(undef, N)
    ζy2 = Array{S}(undef, N)
    ζz2 = Array{S}(undef, N)
    accX = Taylor1(identity(constant_term(zero_q_1)), order)
    accY = Taylor1(identity(constant_term(zero_q_1)), order)
    accZ = Taylor1(identity(constant_term(zero_q_1)), order)
    local M_ = Array{S}(undef, 3, 3, N)
    local M_[:, :, ea] = t2c_jpl_de430(dsj2k) .+ zero_q_1
    dq[1] = Taylor1(identity(constant_term(q[4])), order)
    dq[2] = Taylor1(identity(constant_term(q[5])), order)
    dq[3] = Taylor1(identity(constant_term(q[6])), order)
    newtonianNb_Potential[N] = Taylor1(identity(constant_term(zero_q_1)), order)
    _4dq[1] = Taylor1(constant_term(4) * constant_term(dq[1]), order)
    _4dq[2] = Taylor1(constant_term(4) * constant_term(dq[2]), order)
    _4dq[3] = Taylor1(constant_term(4) * constant_term(dq[3]), order)
    tmp1322 = Array{Taylor1{_S}}(undef, size(ui))
    for i = CartesianIndices(tmp1322)
        tmp1322[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1325 = Array{Taylor1{_S}}(undef, size(vi))
    for i = CartesianIndices(tmp1325)
        tmp1325[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1328 = Array{Taylor1{_S}}(undef, size(wi))
    for i = CartesianIndices(tmp1328)
        tmp1328[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn2x = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(pn2x)
        pn2x[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn2y = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(pn2y)
        pn2y[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn2z = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(pn2z)
        pn2z[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1336 = Array{Taylor1{_S}}(undef, size(UU))
    for i = CartesianIndices(tmp1336)
        tmp1336[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1339 = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(tmp1339)
        tmp1339[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1341 = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(tmp1341)
        tmp1341[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1342 = Array{Taylor1{_S}}(undef, size(tmp1339))
    for i = CartesianIndices(tmp1342)
        tmp1342[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1344 = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(tmp1344)
        tmp1344[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1352 = Array{Taylor1{_S}}(undef, size(pn2x))
    for i = CartesianIndices(tmp1352)
        tmp1352[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1353 = Array{Taylor1{_S}}(undef, size(tmp1352))
    for i = CartesianIndices(tmp1353)
        tmp1353[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1448 = Array{Taylor1{_S}}(undef, size(ui))
    for i = CartesianIndices(tmp1448)
        tmp1448[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1450 = Array{Taylor1{_S}}(undef, size(vi))
    for i = CartesianIndices(tmp1450)
        tmp1450[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1451 = Array{Taylor1{_S}}(undef, size(tmp1448))
    for i = CartesianIndices(tmp1451)
        tmp1451[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1453 = Array{Taylor1{_S}}(undef, size(wi))
    for i = CartesianIndices(tmp1453)
        tmp1453[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1364 = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(tmp1364)
        tmp1364[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1366 = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(tmp1366)
        tmp1366[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1368 = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(tmp1368)
        tmp1368[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1370 = Array{Taylor1{_S}}(undef, size(t31))
    for i = CartesianIndices(tmp1370)
        tmp1370[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1527 = Array{Taylor1{_S}}(undef, size(sin_ϕ))
    for i = CartesianIndices(tmp1527)
        tmp1527[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1528 = Array{Taylor1{_S}}(undef, size(ϕ))
    for i = CartesianIndices(tmp1528)
        tmp1528[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1380 = Array{Taylor1{_S}}(undef, size(sin2_ϕ))
    for i = CartesianIndices(tmp1380)
        tmp1380[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1386 = Array{Taylor1{_S}}(undef, size(sin_ϕ))
    for i = CartesianIndices(tmp1386)
        tmp1386[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1388 = Array{Taylor1{_S}}(undef, size(sin3_ϕ))
    for i = CartesianIndices(tmp1388)
        tmp1388[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1392 = Array{Taylor1{_S}}(undef, size(sin2_ϕ))
    for i = CartesianIndices(tmp1392)
        tmp1392[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1395 = Array{Taylor1{_S}}(undef, size(r_p2))
    for i = CartesianIndices(tmp1395)
        tmp1395[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1396 = Array{Taylor1{_S}}(undef, size(Λ2))
    for i = CartesianIndices(tmp1396)
        tmp1396[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1399 = Array{Taylor1{_S}}(undef, size(r_p1d2))
    for i = CartesianIndices(tmp1399)
        tmp1399[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1400 = Array{Taylor1{_S}}(undef, size(Λ3))
    for i = CartesianIndices(tmp1400)
        tmp1400[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1402 = Array{Taylor1{_S}}(undef, size(cos_ϕ))
    for i = CartesianIndices(tmp1402)
        tmp1402[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1404 = Array{Taylor1{_S}}(undef, size(cos_ϕ))
    for i = CartesianIndices(tmp1404)
        tmp1404[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1407 = Array{Taylor1{_S}}(undef, size(Λ2j_div_r4))
    for i = CartesianIndices(tmp1407)
        tmp1407[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1411 = Array{Taylor1{_S}}(undef, size(Λ3j_div_r5))
    for i = CartesianIndices(tmp1411)
        tmp1411[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1414 = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(tmp1414)
        tmp1414[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1416 = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(tmp1416)
        tmp1416[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1418 = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(tmp1418)
        tmp1418[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    #= REPL[79]:250 =# Threads.@threads for i = 1:Nm1
            ui[i] = Taylor1(identity(constant_term(ss16asteph_t[3 * ((N - 1) + i) - 2])), order)
            vi[i] = Taylor1(identity(constant_term(ss16asteph_t[3 * ((N - 1) + i) - 1])), order)
            wi[i] = Taylor1(identity(constant_term(ss16asteph_t[3 * ((N - 1) + i)])), order)
            X[i] = Taylor1(constant_term(ss16asteph_t[3i - 2]) - constant_term(q[1]), order)
            Y[i] = Taylor1(constant_term(ss16asteph_t[3i - 1]) - constant_term(q[2]), order)
            Z[i] = Taylor1(constant_term(ss16asteph_t[3i]) - constant_term(q[3]), order)
            U[i] = Taylor1(constant_term(ui[i]) - constant_term(dq[1]), order)
            V[i] = Taylor1(constant_term(vi[i]) - constant_term(dq[2]), order)
            W[i] = Taylor1(constant_term(wi[i]) - constant_term(dq[3]), order)
            tmp1322[i] = Taylor1(constant_term(-3) * constant_term(ui[i]), order)
            _4U_m_3X[i] = Taylor1(constant_term(tmp1322[i]) + constant_term(_4dq[1]), order)
            tmp1325[i] = Taylor1(constant_term(-3) * constant_term(vi[i]), order)
            _4V_m_3Y[i] = Taylor1(constant_term(tmp1325[i]) + constant_term(_4dq[2]), order)
            tmp1328[i] = Taylor1(constant_term(-3) * constant_term(wi[i]), order)
            _4W_m_3Z[i] = Taylor1(constant_term(tmp1328[i]) + constant_term(_4dq[3]), order)
            pn2x[i] = Taylor1(constant_term(X[i]) * constant_term(_4U_m_3X[i]), order)
            pn2y[i] = Taylor1(constant_term(Y[i]) * constant_term(_4V_m_3Y[i]), order)
            pn2z[i] = Taylor1(constant_term(Z[i]) * constant_term(_4W_m_3Z[i]), order)
            UU[i] = Taylor1(constant_term(ui[i]) * constant_term(dq[1]), order)
            VV[i] = Taylor1(constant_term(vi[i]) * constant_term(dq[2]), order)
            WW[i] = Taylor1(constant_term(wi[i]) * constant_term(dq[3]), order)
            tmp1336[i] = Taylor1(constant_term(UU[i]) + constant_term(VV[i]), order)
            vi_dot_vj[i] = Taylor1(constant_term(tmp1336[i]) + constant_term(WW[i]), order)
            tmp1339[i] = Taylor1(constant_term(X[i]) ^ float(constant_term(2)), order)
            tmp1341[i] = Taylor1(constant_term(Y[i]) ^ float(constant_term(2)), order)
            tmp1342[i] = Taylor1(constant_term(tmp1339[i]) + constant_term(tmp1341[i]), order)
            tmp1344[i] = Taylor1(constant_term(Z[i]) ^ float(constant_term(2)), order)
            r_p2[i] = Taylor1(constant_term(tmp1342[i]) + constant_term(tmp1344[i]), order)
            r_p1d2[i] = Taylor1(sqrt(constant_term(r_p2[i])), order)
            r_p3d2[i] = Taylor1(constant_term(r_p2[i]) ^ float(constant_term(1.5)), order)
            r_p7d2[i] = Taylor1(constant_term(r_p2[i]) ^ float(constant_term(3.5)), order)
            newtonianCoeff[i] = Taylor1(constant_term(μ[i]) / constant_term(r_p3d2[i]), order)
            tmp1352[i] = Taylor1(constant_term(pn2x[i]) + constant_term(pn2y[i]), order)
            tmp1353[i] = Taylor1(constant_term(tmp1352[i]) + constant_term(pn2z[i]), order)
            pn2[i] = Taylor1(constant_term(newtonianCoeff[i]) * constant_term(tmp1353[i]), order)
            newton_acc_X[i] = Taylor1(constant_term(X[i]) * constant_term(newtonianCoeff[i]), order)
            newton_acc_Y[i] = Taylor1(constant_term(Y[i]) * constant_term(newtonianCoeff[i]), order)
            newton_acc_Z[i] = Taylor1(constant_term(Z[i]) * constant_term(newtonianCoeff[i]), order)
            newtonian1b_Potential[i] = Taylor1(constant_term(μ[i]) / constant_term(r_p1d2[i]), order)
            pn3[i] = Taylor1(constant_term(3.5) * constant_term(newtonian1b_Potential[i]), order)
            U_t_pn2[i] = Taylor1(constant_term(pn2[i]) * constant_term(U[i]), order)
            V_t_pn2[i] = Taylor1(constant_term(pn2[i]) * constant_term(V[i]), order)
            W_t_pn2[i] = Taylor1(constant_term(pn2[i]) * constant_term(W[i]), order)
            if UJ_interaction[i]
                tmp1364[i] = Taylor1(-(constant_term(X[i])), order)
                t31[i] = Taylor1(constant_term(tmp1364[i]) * constant_term(M_[1, 3, i]), order)
                tmp1366[i] = Taylor1(-(constant_term(Y[i])), order)
                t32[i] = Taylor1(constant_term(tmp1366[i]) * constant_term(M_[2, 3, i]), order)
                tmp1368[i] = Taylor1(-(constant_term(Z[i])), order)
                t33[i] = Taylor1(constant_term(tmp1368[i]) * constant_term(M_[3, 3, i]), order)
                tmp1370[i] = Taylor1(constant_term(t31[i]) + constant_term(t32[i]), order)
                r_sin_ϕ[i] = Taylor1(constant_term(tmp1370[i]) + constant_term(t33[i]), order)
                sin_ϕ[i] = Taylor1(constant_term(r_sin_ϕ[i]) / constant_term(r_p1d2[i]), order)
                ϕ[i] = Taylor1(asin(constant_term(sin_ϕ[i])), order)
                tmp1527[i] = Taylor1(sqrt(1 - constant_term(sin_ϕ[i]) ^ 2), order)
                cos_ϕ[i] = Taylor1(cos(constant_term(ϕ[i])), order)
                tmp1528[i] = Taylor1(sin(constant_term(ϕ[i])), order)
                sin2_ϕ[i] = Taylor1(constant_term(sin_ϕ[i]) ^ float(constant_term(2)), order)
                sin3_ϕ[i] = Taylor1(constant_term(sin_ϕ[i]) ^ float(constant_term(3)), order)
                tmp1380[i] = Taylor1(constant_term(1.5) * constant_term(sin2_ϕ[i]), order)
                P_2_sin_ϕ[i] = Taylor1(constant_term(tmp1380[i]) - constant_term(0.5), order)
                ∂P_2_sin_ϕ[i] = Taylor1(constant_term(3) * constant_term(sin_ϕ[i]), order)
                tmp1386[i] = Taylor1(constant_term(-1.5) * constant_term(sin_ϕ[i]), order)
                tmp1388[i] = Taylor1(constant_term(2.5) * constant_term(sin3_ϕ[i]), order)
                P_3_sin_ϕ[i] = Taylor1(constant_term(tmp1386[i]) + constant_term(tmp1388[i]), order)
                tmp1392[i] = Taylor1(constant_term(7.5) * constant_term(sin2_ϕ[i]), order)
                ∂P_3_sin_ϕ[i] = Taylor1(constant_term(-1.5) + constant_term(tmp1392[i]), order)
                tmp1395[i] = Taylor1(constant_term(r_p2[i]) ^ float(constant_term(2)), order)
                tmp1396[i] = Taylor1(constant_term(Λ2[i]) / constant_term(tmp1395[i]), order)
                Λ2j_div_r4[i] = Taylor1(-(constant_term(tmp1396[i])), order)
                tmp1399[i] = Taylor1(constant_term(r_p1d2[i]) ^ float(constant_term(5)), order)
                tmp1400[i] = Taylor1(constant_term(Λ3[i]) / constant_term(tmp1399[i]), order)
                Λ3j_div_r5[i] = Taylor1(-(constant_term(tmp1400[i])), order)
                tmp1402[i] = Taylor1(-(constant_term(cos_ϕ[i])), order)
                m_c_ϕ_∂P_2[i] = Taylor1(constant_term(tmp1402[i]) * constant_term(∂P_2_sin_ϕ[i]), order)
                tmp1404[i] = Taylor1(-(constant_term(cos_ϕ[i])), order)
                m_c_ϕ_∂P_3[i] = Taylor1(constant_term(tmp1404[i]) * constant_term(∂P_3_sin_ϕ[i]), order)
                tmp1407[i] = Taylor1(constant_term(Λ2j_div_r4[i]) * constant_term(3), order)
                F_J2_ξ[i] = Taylor1(constant_term(tmp1407[i]) * constant_term(P_2_sin_ϕ[i]), order)
                F_J2_ζ[i] = Taylor1(constant_term(Λ2j_div_r4[i]) * constant_term(m_c_ϕ_∂P_2[i]), order)
                tmp1411[i] = Taylor1(constant_term(Λ3j_div_r5[i]) * constant_term(4), order)
                F_J3_ξ[i] = Taylor1(constant_term(tmp1411[i]) * constant_term(P_3_sin_ϕ[i]), order)
                F_J3_ζ[i] = Taylor1(constant_term(Λ3j_div_r5[i]) * constant_term(m_c_ϕ_∂P_3[i]), order)
                F_J_ξ[i] = Taylor1(identity(constant_term(F_J2_ξ[i])), order)
                F_J_ζ[i] = Taylor1(identity(constant_term(F_J2_ζ[i])), order)
                tmp1414[i] = Taylor1(-(constant_term(X[i])), order)
                ξx[i] = Taylor1(constant_term(tmp1414[i]) / constant_term(r_p1d2[i]), order)
                tmp1416[i] = Taylor1(-(constant_term(Y[i])), order)
                ξy[i] = Taylor1(constant_term(tmp1416[i]) / constant_term(r_p1d2[i]), order)
                tmp1418[i] = Taylor1(-(constant_term(Z[i])), order)
                ξz[i] = Taylor1(constant_term(tmp1418[i]) / constant_term(r_p1d2[i]), order)
                ηx1[i] = Taylor1(constant_term(M_[2, 3, i]) * constant_term(ξz[i]), order)
                ηy1[i] = Taylor1(constant_term(M_[3, 3, i]) * constant_term(ξx[i]), order)
                ηz1[i] = Taylor1(constant_term(M_[1, 3, i]) * constant_term(ξy[i]), order)
                ηx2[i] = Taylor1(constant_term(M_[3, 3, i]) * constant_term(ξy[i]), order)
                ηy2[i] = Taylor1(constant_term(M_[1, 3, i]) * constant_term(ξz[i]), order)
                ηz2[i] = Taylor1(constant_term(M_[2, 3, i]) * constant_term(ξx[i]), order)
                ηx[i] = Taylor1(constant_term(ηx1[i]) - constant_term(ηx2[i]), order)
                ηy[i] = Taylor1(constant_term(ηy1[i]) - constant_term(ηy2[i]), order)
                ηz[i] = Taylor1(constant_term(ηz1[i]) - constant_term(ηz2[i]), order)
                ζx1[i] = Taylor1(constant_term(ξy[i]) * constant_term(ηz[i]), order)
                ζy1[i] = Taylor1(constant_term(ξz[i]) * constant_term(ηx[i]), order)
                ζz1[i] = Taylor1(constant_term(ξx[i]) * constant_term(ηy[i]), order)
                ζx2[i] = Taylor1(constant_term(ξz[i]) * constant_term(ηy[i]), order)
                ζy2[i] = Taylor1(constant_term(ξx[i]) * constant_term(ηz[i]), order)
                ζz2[i] = Taylor1(constant_term(ξy[i]) * constant_term(ηx[i]), order)
                ζx[i] = Taylor1(constant_term(ζx1[i]) - constant_term(ζx2[i]), order)
                ζy[i] = Taylor1(constant_term(ζy1[i]) - constant_term(ζy2[i]), order)
                ζz[i] = Taylor1(constant_term(ζz1[i]) - constant_term(ζz2[i]), order)
                F_J2_x1[i] = Taylor1(constant_term(F_J_ξ[i]) * constant_term(ξx[i]), order)
                F_J2_y1[i] = Taylor1(constant_term(F_J_ξ[i]) * constant_term(ξy[i]), order)
                F_J2_z1[i] = Taylor1(constant_term(F_J_ξ[i]) * constant_term(ξz[i]), order)
                F_J2_x2[i] = Taylor1(constant_term(F_J_ζ[i]) * constant_term(ζx[i]), order)
                F_J2_y2[i] = Taylor1(constant_term(F_J_ζ[i]) * constant_term(ζy[i]), order)
                F_J2_z2[i] = Taylor1(constant_term(F_J_ζ[i]) * constant_term(ζz[i]), order)
                F_J2_x[i] = Taylor1(constant_term(F_J2_x1[i]) + constant_term(F_J2_x2[i]), order)
                F_J2_y[i] = Taylor1(constant_term(F_J2_y1[i]) + constant_term(F_J2_y2[i]), order)
                F_J2_z[i] = Taylor1(constant_term(F_J2_z1[i]) + constant_term(F_J2_z2[i]), order)
            end
            tmp1448[i] = Taylor1(constant_term(ui[i]) ^ float(constant_term(2)), order)
            tmp1450[i] = Taylor1(constant_term(vi[i]) ^ float(constant_term(2)), order)
            tmp1451[i] = Taylor1(constant_term(tmp1448[i]) + constant_term(tmp1450[i]), order)
            tmp1453[i] = Taylor1(constant_term(wi[i]) ^ float(constant_term(2)), order)
            v2[i] = Taylor1(constant_term(tmp1451[i]) + constant_term(tmp1453[i]), order)
        end
    tmp1456 = Taylor1(constant_term(q[4]) ^ float(constant_term(2)), order)
    tmp1458 = Taylor1(constant_term(q[5]) ^ float(constant_term(2)), order)
    tmp1459 = Taylor1(constant_term(tmp1456) + constant_term(tmp1458), order)
    tmp1461 = Taylor1(constant_term(q[6]) ^ float(constant_term(2)), order)
    v2[N] = Taylor1(constant_term(tmp1459) + constant_term(tmp1461), order)
    temp_004 = Array{Taylor1{_S}}(undef, size(newtonian1b_Potential))
    for i = CartesianIndices(temp_004)
        temp_004[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1464 = Array{Taylor1{_S}}(undef, size(μ))
    for i = CartesianIndices(tmp1464)
        tmp1464[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1466 = Array{Taylor1{_S}}(undef, size(μ))
    for i = CartesianIndices(tmp1466)
        tmp1466[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1468 = Array{Taylor1{_S}}(undef, size(μ))
    for i = CartesianIndices(tmp1468)
        tmp1468[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    for i = 1:Nm1
        temp_004[i] = Taylor1(constant_term(newtonian1b_Potential[i]) + constant_term(newtonianNb_Potential[N]), order)
        newtonianNb_Potential[N] = Taylor1(identity(constant_term(temp_004[i])), order)
        if UJ_interaction[i]
            tmp1464[i] = Taylor1(constant_term(μ[i]) * constant_term(F_J2_x[i]), order)
            temp_accX_i[i] = Taylor1(constant_term(accX) - constant_term(tmp1464[i]), order)
            accX = Taylor1(identity(constant_term(temp_accX_i[i])), order)
            tmp1466[i] = Taylor1(constant_term(μ[i]) * constant_term(F_J2_y[i]), order)
            temp_accY_i[i] = Taylor1(constant_term(accY) - constant_term(tmp1466[i]), order)
            accY = Taylor1(identity(constant_term(temp_accY_i[i])), order)
            tmp1468[i] = Taylor1(constant_term(μ[i]) * constant_term(F_J2_z[i]), order)
            temp_accZ_i[i] = Taylor1(constant_term(accZ) - constant_term(tmp1468[i]), order)
            accZ = Taylor1(identity(constant_term(temp_accZ_i[i])), order)
        end
    end
    _4ϕj[N] = Taylor1(constant_term(4) * constant_term(newtonianNb_Potential[N]), order)
    tmp1474 = Array{Taylor1{_S}}(undef, size(v2))
    for i = CartesianIndices(tmp1474)
        tmp1474[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1476 = Array{Taylor1{_S}}(undef, size(vi_dot_vj))
    for i = CartesianIndices(tmp1476)
        tmp1476[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1477 = Array{Taylor1{_S}}(undef, size(tmp1474))
    for i = CartesianIndices(tmp1477)
        tmp1477[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    Xij_t_Ui = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(Xij_t_Ui)
        Xij_t_Ui[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    Yij_t_Vi = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(Yij_t_Vi)
        Yij_t_Vi[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    Zij_t_Wi = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(Zij_t_Wi)
        Zij_t_Wi[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1483 = Array{Taylor1{_S}}(undef, size(Xij_t_Ui))
    for i = CartesianIndices(tmp1483)
        tmp1483[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    Rij_dot_Vi = Array{Taylor1{_S}}(undef, size(tmp1483))
    for i = CartesianIndices(Rij_dot_Vi)
        Rij_dot_Vi[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1486 = Array{Taylor1{_S}}(undef, size(Rij_dot_Vi))
    for i = CartesianIndices(tmp1486)
        tmp1486[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn1t7 = Array{Taylor1{_S}}(undef, size(tmp1486))
    for i = CartesianIndices(pn1t7)
        pn1t7[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1489 = Array{Taylor1{_S}}(undef, size(pn1t7))
    for i = CartesianIndices(tmp1489)
        tmp1489[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    pn1t2_7 = Array{Taylor1{_S}}(undef, size(ϕs_and_vs))
    for i = CartesianIndices(pn1t2_7)
        pn1t2_7[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1496 = Array{Taylor1{_S}}(undef, size(pNX_t_X))
    for i = CartesianIndices(tmp1496)
        tmp1496[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1497 = Array{Taylor1{_S}}(undef, size(tmp1496))
    for i = CartesianIndices(tmp1497)
        tmp1497[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1498 = Array{Taylor1{_S}}(undef, size(tmp1497))
    for i = CartesianIndices(tmp1498)
        tmp1498[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    #= REPL[79]:452 =# Threads.@threads for i = 1:10
            ϕi_plus_4ϕj[i] = Taylor1(constant_term(newtonianNb_Potential_t[i]) + constant_term(_4ϕj[N]), order)
            tmp1474[i] = Taylor1(constant_term(2) * constant_term(v2[i]), order)
            tmp1476[i] = Taylor1(constant_term(4) * constant_term(vi_dot_vj[i]), order)
            tmp1477[i] = Taylor1(constant_term(tmp1474[i]) - constant_term(tmp1476[i]), order)
            sj2_plus_2si2_minus_4vivj[i] = Taylor1(constant_term(tmp1477[i]) + constant_term(v2[N]), order)
            ϕs_and_vs[i] = Taylor1(constant_term(sj2_plus_2si2_minus_4vivj[i]) - constant_term(ϕi_plus_4ϕj[i]), order)
            Xij_t_Ui[i] = Taylor1(constant_term(X[i]) * constant_term(ui[i]), order)
            Yij_t_Vi[i] = Taylor1(constant_term(Y[i]) * constant_term(vi[i]), order)
            Zij_t_Wi[i] = Taylor1(constant_term(Z[i]) * constant_term(wi[i]), order)
            tmp1483[i] = Taylor1(constant_term(Xij_t_Ui[i]) + constant_term(Yij_t_Vi[i]), order)
            Rij_dot_Vi[i] = Taylor1(constant_term(tmp1483[i]) + constant_term(Zij_t_Wi[i]), order)
            tmp1486[i] = Taylor1(constant_term(Rij_dot_Vi[i]) ^ float(constant_term(2)), order)
            pn1t7[i] = Taylor1(constant_term(tmp1486[i]) / constant_term(r_p2[i]), order)
            tmp1489[i] = Taylor1(constant_term(1.5) * constant_term(pn1t7[i]), order)
            pn1t2_7[i] = Taylor1(constant_term(ϕs_and_vs[i]) - constant_term(tmp1489[i]), order)
            pn1t1_7[i] = Taylor1(constant_term(c_p2) + constant_term(pn1t2_7[i]), order)
            pNX_t_X[i] = Taylor1(constant_term(acceph_t[3i - 2]) * constant_term(X[i]), order)
            pNY_t_Y[i] = Taylor1(constant_term(acceph_t[3i - 1]) * constant_term(Y[i]), order)
            pNZ_t_Z[i] = Taylor1(constant_term(acceph_t[3i]) * constant_term(Z[i]), order)
            tmp1496[i] = Taylor1(constant_term(pNX_t_X[i]) + constant_term(pNY_t_Y[i]), order)
            tmp1497[i] = Taylor1(constant_term(tmp1496[i]) + constant_term(pNZ_t_Z[i]), order)
            tmp1498[i] = Taylor1(constant_term(0.5) * constant_term(tmp1497[i]), order)
            pn1[i] = Taylor1(constant_term(pn1t1_7[i]) + constant_term(tmp1498[i]), order)
            X_t_pn1[i] = Taylor1(constant_term(newton_acc_X[i]) * constant_term(pn1[i]), order)
            Y_t_pn1[i] = Taylor1(constant_term(newton_acc_Y[i]) * constant_term(pn1[i]), order)
            Z_t_pn1[i] = Taylor1(constant_term(newton_acc_Z[i]) * constant_term(pn1[i]), order)
            pNX_t_pn3[i] = Taylor1(constant_term(acceph_t[3i - 2]) * constant_term(pn3[i]), order)
            pNY_t_pn3[i] = Taylor1(constant_term(acceph_t[3i - 1]) * constant_term(pn3[i]), order)
            pNZ_t_pn3[i] = Taylor1(constant_term(acceph_t[3i]) * constant_term(pn3[i]), order)
        end
    tmp1506 = Array{Taylor1{_S}}(undef, size(U_t_pn2))
    for i = CartesianIndices(tmp1506)
        tmp1506[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    termpnx = Array{Taylor1{_S}}(undef, size(X_t_pn1))
    for i = CartesianIndices(termpnx)
        termpnx[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    sumpnx = Array{Taylor1{_S}}(undef, size(termpnx))
    for i = CartesianIndices(sumpnx)
        sumpnx[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1509 = Array{Taylor1{_S}}(undef, size(V_t_pn2))
    for i = CartesianIndices(tmp1509)
        tmp1509[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    termpny = Array{Taylor1{_S}}(undef, size(Y_t_pn1))
    for i = CartesianIndices(termpny)
        termpny[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    sumpny = Array{Taylor1{_S}}(undef, size(termpny))
    for i = CartesianIndices(sumpny)
        sumpny[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1512 = Array{Taylor1{_S}}(undef, size(W_t_pn2))
    for i = CartesianIndices(tmp1512)
        tmp1512[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    termpnz = Array{Taylor1{_S}}(undef, size(Z_t_pn1))
    for i = CartesianIndices(termpnz)
        termpnz[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    sumpnz = Array{Taylor1{_S}}(undef, size(termpnz))
    for i = CartesianIndices(sumpnz)
        sumpnz[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    for i = 1:10
        tmp1506[i] = Taylor1(constant_term(U_t_pn2[i]) + constant_term(pNX_t_pn3[i]), order)
        termpnx[i] = Taylor1(constant_term(X_t_pn1[i]) + constant_term(tmp1506[i]), order)
        sumpnx[i] = Taylor1(constant_term(pntempX) + constant_term(termpnx[i]), order)
        pntempX = Taylor1(identity(constant_term(sumpnx[i])), order)
        tmp1509[i] = Taylor1(constant_term(V_t_pn2[i]) + constant_term(pNY_t_pn3[i]), order)
        termpny[i] = Taylor1(constant_term(Y_t_pn1[i]) + constant_term(tmp1509[i]), order)
        sumpny[i] = Taylor1(constant_term(pntempY) + constant_term(termpny[i]), order)
        pntempY = Taylor1(identity(constant_term(sumpny[i])), order)
        tmp1512[i] = Taylor1(constant_term(W_t_pn2[i]) + constant_term(pNZ_t_pn3[i]), order)
        termpnz[i] = Taylor1(constant_term(Z_t_pn1[i]) + constant_term(tmp1512[i]), order)
        sumpnz[i] = Taylor1(constant_term(pntempZ) + constant_term(termpnz[i]), order)
        pntempZ = Taylor1(identity(constant_term(sumpnz[i])), order)
    end
    #= REPL[79]:505 =# Threads.@threads for i = 11:Nm1
            X_t_pn1[i] = Taylor1(constant_term(c_p2) * constant_term(newton_acc_X[i]), order)
            Y_t_pn1[i] = Taylor1(constant_term(c_p2) * constant_term(newton_acc_Y[i]), order)
            Z_t_pn1[i] = Taylor1(constant_term(c_p2) * constant_term(newton_acc_Z[i]), order)
        end
    for i = 11:Nm1
        termpnx[i] = Taylor1(identity(constant_term(X_t_pn1[i])), order)
        sumpnx[i] = Taylor1(constant_term(pntempX) + constant_term(termpnx[i]), order)
        pntempX = Taylor1(identity(constant_term(sumpnx[i])), order)
        termpny[i] = Taylor1(identity(constant_term(Y_t_pn1[i])), order)
        sumpny[i] = Taylor1(constant_term(pntempY) + constant_term(termpny[i]), order)
        pntempY = Taylor1(identity(constant_term(sumpny[i])), order)
        termpnz[i] = Taylor1(identity(constant_term(Z_t_pn1[i])), order)
        sumpnz[i] = Taylor1(constant_term(pntempZ) + constant_term(termpnz[i]), order)
        pntempZ = Taylor1(identity(constant_term(sumpnz[i])), order)
    end
    postNewtonX = Taylor1(constant_term(pntempX) * constant_term(c_m2), order)
    postNewtonY = Taylor1(constant_term(pntempY) * constant_term(c_m2), order)
    postNewtonZ = Taylor1(constant_term(pntempZ) * constant_term(c_m2), order)
    dq[4] = Taylor1(constant_term(postNewtonX) + constant_term(accX), order)
    dq[5] = Taylor1(constant_term(postNewtonY) + constant_term(accY), order)
    dq[6] = Taylor1(constant_term(postNewtonZ) + constant_term(accZ), order)
    return TaylorIntegration.RetAlloc{Taylor1{_S}}([tmp1456, tmp1458, tmp1459, tmp1461, pntempX, pntempY, pntempZ, accX, accY, accZ, postNewtonX, postNewtonY, postNewtonZ], [X, Y, Z, r_p2, r_p1d2, r_p3d2, r_p7d2, newtonianCoeff, ui, vi, wi, U, V, W, _4dq, _4U_m_3X, _4V_m_3Y, _4W_m_3Z, UU, VV, WW, newtonian1b_Potential, newtonianNb_Potential, newton_acc_X, newton_acc_Y, newton_acc_Z, v2, vi_dot_vj, pn2, U_t_pn2, V_t_pn2, W_t_pn2, pn3, pNX_t_pn3, pNY_t_pn3, pNZ_t_pn3, _4ϕj, ϕi_plus_4ϕj, sj2_plus_2si2_minus_4vivj, ϕs_and_vs, pn1t1_7, pNX_t_X, pNY_t_Y, pNZ_t_Z, pn1, X_t_pn1, Y_t_pn1, Z_t_pn1, t31, t32, t33, r_sin_ϕ, sin_ϕ, ϕ, cos_ϕ, sin2_ϕ, sin3_ϕ, F_J2_x, F_J2_y, F_J2_z, F_J2_x1, F_J2_y1, F_J2_z1, F_J2_x2, F_J2_y2, F_J2_z2, temp_accX_i, temp_accY_i, temp_accZ_i, P_2_sin_ϕ, ∂P_2_sin_ϕ, P_3_sin_ϕ, ∂P_3_sin_ϕ, m_c_ϕ_∂P_2, m_c_ϕ_∂P_3, Λ2j_div_r4, Λ3j_div_r5, F_J_ξ, F_J_ζ, F_J2_ξ, F_J2_ζ, F_J3_ξ, F_J3_ζ, ξx, ξy, ξz, ηx, ηy, ηz, ηx1, ηy1, ηz1, ηx2, ηy2, ηz2, ζx, ζy, ζz, ζx1, ζy1, ζz1, ζx2, ζy2, ζz2, tmp1322, tmp1325, tmp1328, pn2x, pn2y, pn2z, tmp1336, tmp1339, tmp1341, tmp1342, tmp1344, tmp1352, tmp1353, tmp1364, tmp1366, tmp1368, tmp1370, tmp1527, tmp1528, tmp1380, tmp1386, tmp1388, tmp1392, tmp1395, tmp1396, tmp1399, tmp1400, tmp1402, tmp1404, tmp1407, tmp1411, tmp1414, tmp1416, tmp1418, tmp1448, tmp1450, tmp1451, tmp1453, temp_004, tmp1464, tmp1466, tmp1468, tmp1474, tmp1476, tmp1477, Xij_t_Ui, Yij_t_Vi, Zij_t_Wi, tmp1483, Rij_dot_Vi, tmp1486, pn1t7, tmp1489, pn1t2_7, tmp1496, tmp1497, tmp1498, tmp1506, termpnx, sumpnx, tmp1509, termpny, sumpny, tmp1512, termpnz, sumpnz], [Array{Taylor1{_S}, 2}(undef, 0, 0)], [Array{Taylor1{_S}, 3}(undef, 0, 0, 0)], [Array{Taylor1{_S}, 4}(undef, 0, 0, 0, 0)])
end

# TaylorIntegration.jetcoeffs! method for src/propagation/asteroid_dynamical_models.jl: RNp1BP_pN_A_J23E_J2S_eph_threads!
function TaylorIntegration.jetcoeffs!(::Val{RNp1BP_pN_A_J23E_J2S_eph_threads!}, t::Taylor1{_T}, q::AbstractArray{Taylor1{_S}, _N}, dq::AbstractArray{Taylor1{_S}, _N}, params, __ralloc::TaylorIntegration.RetAlloc{Taylor1{_S}}) where {_T <: Real, _S <: Number, _N}
    order = t.order
    tmp1456 = __ralloc.v0[1]
    tmp1458 = __ralloc.v0[2]
    tmp1459 = __ralloc.v0[3]
    tmp1461 = __ralloc.v0[4]
    pntempX = __ralloc.v0[5]
    pntempY = __ralloc.v0[6]
    pntempZ = __ralloc.v0[7]
    accX = __ralloc.v0[8]
    accY = __ralloc.v0[9]
    accZ = __ralloc.v0[10]
    postNewtonX = __ralloc.v0[11]
    postNewtonY = __ralloc.v0[12]
    postNewtonZ = __ralloc.v0[13]
    X = __ralloc.v1[1]
    Y = __ralloc.v1[2]
    Z = __ralloc.v1[3]
    r_p2 = __ralloc.v1[4]
    r_p1d2 = __ralloc.v1[5]
    r_p3d2 = __ralloc.v1[6]
    r_p7d2 = __ralloc.v1[7]
    newtonianCoeff = __ralloc.v1[8]
    ui = __ralloc.v1[9]
    vi = __ralloc.v1[10]
    wi = __ralloc.v1[11]
    U = __ralloc.v1[12]
    V = __ralloc.v1[13]
    W = __ralloc.v1[14]
    _4dq = __ralloc.v1[15]
    _4U_m_3X = __ralloc.v1[16]
    _4V_m_3Y = __ralloc.v1[17]
    _4W_m_3Z = __ralloc.v1[18]
    UU = __ralloc.v1[19]
    VV = __ralloc.v1[20]
    WW = __ralloc.v1[21]
    newtonian1b_Potential = __ralloc.v1[22]
    newtonianNb_Potential = __ralloc.v1[23]
    newton_acc_X = __ralloc.v1[24]
    newton_acc_Y = __ralloc.v1[25]
    newton_acc_Z = __ralloc.v1[26]
    v2 = __ralloc.v1[27]
    vi_dot_vj = __ralloc.v1[28]
    pn2 = __ralloc.v1[29]
    U_t_pn2 = __ralloc.v1[30]
    V_t_pn2 = __ralloc.v1[31]
    W_t_pn2 = __ralloc.v1[32]
    pn3 = __ralloc.v1[33]
    pNX_t_pn3 = __ralloc.v1[34]
    pNY_t_pn3 = __ralloc.v1[35]
    pNZ_t_pn3 = __ralloc.v1[36]
    _4ϕj = __ralloc.v1[37]
    ϕi_plus_4ϕj = __ralloc.v1[38]
    sj2_plus_2si2_minus_4vivj = __ralloc.v1[39]
    ϕs_and_vs = __ralloc.v1[40]
    pn1t1_7 = __ralloc.v1[41]
    pNX_t_X = __ralloc.v1[42]
    pNY_t_Y = __ralloc.v1[43]
    pNZ_t_Z = __ralloc.v1[44]
    pn1 = __ralloc.v1[45]
    X_t_pn1 = __ralloc.v1[46]
    Y_t_pn1 = __ralloc.v1[47]
    Z_t_pn1 = __ralloc.v1[48]
    t31 = __ralloc.v1[49]
    t32 = __ralloc.v1[50]
    t33 = __ralloc.v1[51]
    r_sin_ϕ = __ralloc.v1[52]
    sin_ϕ = __ralloc.v1[53]
    ϕ = __ralloc.v1[54]
    cos_ϕ = __ralloc.v1[55]
    sin2_ϕ = __ralloc.v1[56]
    sin3_ϕ = __ralloc.v1[57]
    F_J2_x = __ralloc.v1[58]
    F_J2_y = __ralloc.v1[59]
    F_J2_z = __ralloc.v1[60]
    F_J2_x1 = __ralloc.v1[61]
    F_J2_y1 = __ralloc.v1[62]
    F_J2_z1 = __ralloc.v1[63]
    F_J2_x2 = __ralloc.v1[64]
    F_J2_y2 = __ralloc.v1[65]
    F_J2_z2 = __ralloc.v1[66]
    temp_accX_i = __ralloc.v1[67]
    temp_accY_i = __ralloc.v1[68]
    temp_accZ_i = __ralloc.v1[69]
    P_2_sin_ϕ = __ralloc.v1[70]
    ∂P_2_sin_ϕ = __ralloc.v1[71]
    P_3_sin_ϕ = __ralloc.v1[72]
    ∂P_3_sin_ϕ = __ralloc.v1[73]
    m_c_ϕ_∂P_2 = __ralloc.v1[74]
    m_c_ϕ_∂P_3 = __ralloc.v1[75]
    Λ2j_div_r4 = __ralloc.v1[76]
    Λ3j_div_r5 = __ralloc.v1[77]
    F_J_ξ = __ralloc.v1[78]
    F_J_ζ = __ralloc.v1[79]
    F_J2_ξ = __ralloc.v1[80]
    F_J2_ζ = __ralloc.v1[81]
    F_J3_ξ = __ralloc.v1[82]
    F_J3_ζ = __ralloc.v1[83]
    ξx = __ralloc.v1[84]
    ξy = __ralloc.v1[85]
    ξz = __ralloc.v1[86]
    ηx = __ralloc.v1[87]
    ηy = __ralloc.v1[88]
    ηz = __ralloc.v1[89]
    ηx1 = __ralloc.v1[90]
    ηy1 = __ralloc.v1[91]
    ηz1 = __ralloc.v1[92]
    ηx2 = __ralloc.v1[93]
    ηy2 = __ralloc.v1[94]
    ηz2 = __ralloc.v1[95]
    ζx = __ralloc.v1[96]
    ζy = __ralloc.v1[97]
    ζz = __ralloc.v1[98]
    ζx1 = __ralloc.v1[99]
    ζy1 = __ralloc.v1[100]
    ζz1 = __ralloc.v1[101]
    ζx2 = __ralloc.v1[102]
    ζy2 = __ralloc.v1[103]
    ζz2 = __ralloc.v1[104]
    tmp1322 = __ralloc.v1[105]
    tmp1325 = __ralloc.v1[106]
    tmp1328 = __ralloc.v1[107]
    pn2x = __ralloc.v1[108]
    pn2y = __ralloc.v1[109]
    pn2z = __ralloc.v1[110]
    tmp1336 = __ralloc.v1[111]
    tmp1339 = __ralloc.v1[112]
    tmp1341 = __ralloc.v1[113]
    tmp1342 = __ralloc.v1[114]
    tmp1344 = __ralloc.v1[115]
    tmp1352 = __ralloc.v1[116]
    tmp1353 = __ralloc.v1[117]
    tmp1364 = __ralloc.v1[118]
    tmp1366 = __ralloc.v1[119]
    tmp1368 = __ralloc.v1[120]
    tmp1370 = __ralloc.v1[121]
    tmp1527 = __ralloc.v1[122]
    tmp1528 = __ralloc.v1[123]
    tmp1380 = __ralloc.v1[124]
    tmp1386 = __ralloc.v1[125]
    tmp1388 = __ralloc.v1[126]
    tmp1392 = __ralloc.v1[127]
    tmp1395 = __ralloc.v1[128]
    tmp1396 = __ralloc.v1[129]
    tmp1399 = __ralloc.v1[130]
    tmp1400 = __ralloc.v1[131]
    tmp1402 = __ralloc.v1[132]
    tmp1404 = __ralloc.v1[133]
    tmp1407 = __ralloc.v1[134]
    tmp1411 = __ralloc.v1[135]
    tmp1414 = __ralloc.v1[136]
    tmp1416 = __ralloc.v1[137]
    tmp1418 = __ralloc.v1[138]
    tmp1448 = __ralloc.v1[139]
    tmp1450 = __ralloc.v1[140]
    tmp1451 = __ralloc.v1[141]
    tmp1453 = __ralloc.v1[142]
    temp_004 = __ralloc.v1[143]
    tmp1464 = __ralloc.v1[144]
    tmp1466 = __ralloc.v1[145]
    tmp1468 = __ralloc.v1[146]
    tmp1474 = __ralloc.v1[147]
    tmp1476 = __ralloc.v1[148]
    tmp1477 = __ralloc.v1[149]
    Xij_t_Ui = __ralloc.v1[150]
    Yij_t_Vi = __ralloc.v1[151]
    Zij_t_Wi = __ralloc.v1[152]
    tmp1483 = __ralloc.v1[153]
    Rij_dot_Vi = __ralloc.v1[154]
    tmp1486 = __ralloc.v1[155]
    pn1t7 = __ralloc.v1[156]
    tmp1489 = __ralloc.v1[157]
    pn1t2_7 = __ralloc.v1[158]
    tmp1496 = __ralloc.v1[159]
    tmp1497 = __ralloc.v1[160]
    tmp1498 = __ralloc.v1[161]
    tmp1506 = __ralloc.v1[162]
    termpnx = __ralloc.v1[163]
    sumpnx = __ralloc.v1[164]
    tmp1509 = __ralloc.v1[165]
    termpny = __ralloc.v1[166]
    sumpny = __ralloc.v1[167]
    tmp1512 = __ralloc.v1[168]
    termpnz = __ralloc.v1[169]
    sumpnz = __ralloc.v1[170]
    local jd0 = params.jd0
    local dsj2k = t + (jd0 - JD_J2000)
    local ss16asteph_t = evaleph(params.sseph, dsj2k, q[1])
    local acceph_t = evaleph(params.acceph, dsj2k, q[1])
    local newtonianNb_Potential_t = evaleph(params.poteph, dsj2k, q[1])
    local S = eltype(q)
    local UJ_interaction = params.UJ_interaction
    local N = params.N
    local Nm1 = N - 1
    local μ = params.μ
    local zero_q_1 = auxzero(q[1])
    TaylorSeries.zero!(pntempX)
    pntempX.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(pntempY)
    pntempY.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(pntempZ)
    pntempZ.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(accX)
    accX.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(accY)
    accY.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(accZ)
    accZ.coeffs[1] = identity(constant_term(zero_q_1))
    local M_ = Array{S}(undef, 3, 3, N)
    local M_[:, :, ea] = t2c_jpl_de430(dsj2k) .+ zero_q_1
    TaylorSeries.zero!(dq[1])
    (dq[1]).coeffs[1] = identity(constant_term(q[4]))
    TaylorSeries.zero!(dq[2])
    (dq[2]).coeffs[1] = identity(constant_term(q[5]))
    TaylorSeries.zero!(dq[3])
    (dq[3]).coeffs[1] = identity(constant_term(q[6]))
    TaylorSeries.zero!(newtonianNb_Potential[N])
    (newtonianNb_Potential[N]).coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(_4dq[1])
    (_4dq[1]).coeffs[1] = constant_term(4) * constant_term(dq[1])
    TaylorSeries.zero!(_4dq[2])
    (_4dq[2]).coeffs[1] = constant_term(4) * constant_term(dq[2])
    TaylorSeries.zero!(_4dq[3])
    (_4dq[3]).coeffs[1] = constant_term(4) * constant_term(dq[3])
    #= REPL[79]:250 =# Threads.@threads for i = 1:Nm1
            TaylorSeries.zero!(ui[i])
            (ui[i]).coeffs[1] = identity(constant_term(ss16asteph_t[3 * ((N - 1) + i) - 2]))
            TaylorSeries.zero!(vi[i])
            (vi[i]).coeffs[1] = identity(constant_term(ss16asteph_t[3 * ((N - 1) + i) - 1]))
            TaylorSeries.zero!(wi[i])
            (wi[i]).coeffs[1] = identity(constant_term(ss16asteph_t[3 * ((N - 1) + i)]))
            TaylorSeries.zero!(X[i])
            (X[i]).coeffs[1] = constant_term(ss16asteph_t[3i - 2]) - constant_term(q[1])
            TaylorSeries.zero!(Y[i])
            (Y[i]).coeffs[1] = constant_term(ss16asteph_t[3i - 1]) - constant_term(q[2])
            TaylorSeries.zero!(Z[i])
            (Z[i]).coeffs[1] = constant_term(ss16asteph_t[3i]) - constant_term(q[3])
            TaylorSeries.zero!(U[i])
            (U[i]).coeffs[1] = constant_term(ui[i]) - constant_term(dq[1])
            TaylorSeries.zero!(V[i])
            (V[i]).coeffs[1] = constant_term(vi[i]) - constant_term(dq[2])
            TaylorSeries.zero!(W[i])
            (W[i]).coeffs[1] = constant_term(wi[i]) - constant_term(dq[3])
            TaylorSeries.zero!(tmp1322[i])
            (tmp1322[i]).coeffs[1] = constant_term(-3) * constant_term(ui[i])
            TaylorSeries.zero!(_4U_m_3X[i])
            (_4U_m_3X[i]).coeffs[1] = constant_term(tmp1322[i]) + constant_term(_4dq[1])
            TaylorSeries.zero!(tmp1325[i])
            (tmp1325[i]).coeffs[1] = constant_term(-3) * constant_term(vi[i])
            TaylorSeries.zero!(_4V_m_3Y[i])
            (_4V_m_3Y[i]).coeffs[1] = constant_term(tmp1325[i]) + constant_term(_4dq[2])
            TaylorSeries.zero!(tmp1328[i])
            (tmp1328[i]).coeffs[1] = constant_term(-3) * constant_term(wi[i])
            TaylorSeries.zero!(_4W_m_3Z[i])
            (_4W_m_3Z[i]).coeffs[1] = constant_term(tmp1328[i]) + constant_term(_4dq[3])
            TaylorSeries.zero!(pn2x[i])
            (pn2x[i]).coeffs[1] = constant_term(X[i]) * constant_term(_4U_m_3X[i])
            TaylorSeries.zero!(pn2y[i])
            (pn2y[i]).coeffs[1] = constant_term(Y[i]) * constant_term(_4V_m_3Y[i])
            TaylorSeries.zero!(pn2z[i])
            (pn2z[i]).coeffs[1] = constant_term(Z[i]) * constant_term(_4W_m_3Z[i])
            TaylorSeries.zero!(UU[i])
            (UU[i]).coeffs[1] = constant_term(ui[i]) * constant_term(dq[1])
            TaylorSeries.zero!(VV[i])
            (VV[i]).coeffs[1] = constant_term(vi[i]) * constant_term(dq[2])
            TaylorSeries.zero!(WW[i])
            (WW[i]).coeffs[1] = constant_term(wi[i]) * constant_term(dq[3])
            TaylorSeries.zero!(tmp1336[i])
            (tmp1336[i]).coeffs[1] = constant_term(UU[i]) + constant_term(VV[i])
            TaylorSeries.zero!(vi_dot_vj[i])
            (vi_dot_vj[i]).coeffs[1] = constant_term(tmp1336[i]) + constant_term(WW[i])
            TaylorSeries.zero!(tmp1339[i])
            (tmp1339[i]).coeffs[1] = constant_term(X[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp1341[i])
            (tmp1341[i]).coeffs[1] = constant_term(Y[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp1342[i])
            (tmp1342[i]).coeffs[1] = constant_term(tmp1339[i]) + constant_term(tmp1341[i])
            TaylorSeries.zero!(tmp1344[i])
            (tmp1344[i]).coeffs[1] = constant_term(Z[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(r_p2[i])
            (r_p2[i]).coeffs[1] = constant_term(tmp1342[i]) + constant_term(tmp1344[i])
            TaylorSeries.zero!(r_p1d2[i])
            (r_p1d2[i]).coeffs[1] = sqrt(constant_term(r_p2[i]))
            TaylorSeries.zero!(r_p3d2[i])
            (r_p3d2[i]).coeffs[1] = constant_term(r_p2[i]) ^ float(constant_term(1.5))
            TaylorSeries.zero!(r_p7d2[i])
            (r_p7d2[i]).coeffs[1] = constant_term(r_p2[i]) ^ float(constant_term(3.5))
            TaylorSeries.zero!(newtonianCoeff[i])
            (newtonianCoeff[i]).coeffs[1] = constant_term(μ[i]) / constant_term(r_p3d2[i])
            TaylorSeries.zero!(tmp1352[i])
            (tmp1352[i]).coeffs[1] = constant_term(pn2x[i]) + constant_term(pn2y[i])
            TaylorSeries.zero!(tmp1353[i])
            (tmp1353[i]).coeffs[1] = constant_term(tmp1352[i]) + constant_term(pn2z[i])
            TaylorSeries.zero!(pn2[i])
            (pn2[i]).coeffs[1] = constant_term(newtonianCoeff[i]) * constant_term(tmp1353[i])
            TaylorSeries.zero!(newton_acc_X[i])
            (newton_acc_X[i]).coeffs[1] = constant_term(X[i]) * constant_term(newtonianCoeff[i])
            TaylorSeries.zero!(newton_acc_Y[i])
            (newton_acc_Y[i]).coeffs[1] = constant_term(Y[i]) * constant_term(newtonianCoeff[i])
            TaylorSeries.zero!(newton_acc_Z[i])
            (newton_acc_Z[i]).coeffs[1] = constant_term(Z[i]) * constant_term(newtonianCoeff[i])
            TaylorSeries.zero!(newtonian1b_Potential[i])
            (newtonian1b_Potential[i]).coeffs[1] = constant_term(μ[i]) / constant_term(r_p1d2[i])
            TaylorSeries.zero!(pn3[i])
            (pn3[i]).coeffs[1] = constant_term(3.5) * constant_term(newtonian1b_Potential[i])
            TaylorSeries.zero!(U_t_pn2[i])
            (U_t_pn2[i]).coeffs[1] = constant_term(pn2[i]) * constant_term(U[i])
            TaylorSeries.zero!(V_t_pn2[i])
            (V_t_pn2[i]).coeffs[1] = constant_term(pn2[i]) * constant_term(V[i])
            TaylorSeries.zero!(W_t_pn2[i])
            (W_t_pn2[i]).coeffs[1] = constant_term(pn2[i]) * constant_term(W[i])
            if UJ_interaction[i]
                TaylorSeries.zero!(tmp1364[i])
                (tmp1364[i]).coeffs[1] = -(constant_term(X[i]))
                TaylorSeries.zero!(t31[i])
                (t31[i]).coeffs[1] = constant_term(tmp1364[i]) * constant_term(M_[1, 3, i])
                TaylorSeries.zero!(tmp1366[i])
                (tmp1366[i]).coeffs[1] = -(constant_term(Y[i]))
                TaylorSeries.zero!(t32[i])
                (t32[i]).coeffs[1] = constant_term(tmp1366[i]) * constant_term(M_[2, 3, i])
                TaylorSeries.zero!(tmp1368[i])
                (tmp1368[i]).coeffs[1] = -(constant_term(Z[i]))
                TaylorSeries.zero!(t33[i])
                (t33[i]).coeffs[1] = constant_term(tmp1368[i]) * constant_term(M_[3, 3, i])
                TaylorSeries.zero!(tmp1370[i])
                (tmp1370[i]).coeffs[1] = constant_term(t31[i]) + constant_term(t32[i])
                TaylorSeries.zero!(r_sin_ϕ[i])
                (r_sin_ϕ[i]).coeffs[1] = constant_term(tmp1370[i]) + constant_term(t33[i])
                TaylorSeries.zero!(sin_ϕ[i])
                (sin_ϕ[i]).coeffs[1] = constant_term(r_sin_ϕ[i]) / constant_term(r_p1d2[i])
                TaylorSeries.zero!(ϕ[i])
                (ϕ[i]).coeffs[1] = asin(constant_term(sin_ϕ[i]))
                TaylorSeries.zero!(tmp1527[i])
                (tmp1527[i]).coeffs[1] = sqrt(1 - constant_term(sin_ϕ[i]) ^ 2)
                TaylorSeries.zero!(cos_ϕ[i])
                (cos_ϕ[i]).coeffs[1] = cos(constant_term(ϕ[i]))
                TaylorSeries.zero!(tmp1528[i])
                (tmp1528[i]).coeffs[1] = sin(constant_term(ϕ[i]))
                TaylorSeries.zero!(sin2_ϕ[i])
                (sin2_ϕ[i]).coeffs[1] = constant_term(sin_ϕ[i]) ^ float(constant_term(2))
                TaylorSeries.zero!(sin3_ϕ[i])
                (sin3_ϕ[i]).coeffs[1] = constant_term(sin_ϕ[i]) ^ float(constant_term(3))
                TaylorSeries.zero!(tmp1380[i])
                (tmp1380[i]).coeffs[1] = constant_term(1.5) * constant_term(sin2_ϕ[i])
                TaylorSeries.zero!(P_2_sin_ϕ[i])
                (P_2_sin_ϕ[i]).coeffs[1] = constant_term(tmp1380[i]) - constant_term(0.5)
                TaylorSeries.zero!(∂P_2_sin_ϕ[i])
                (∂P_2_sin_ϕ[i]).coeffs[1] = constant_term(3) * constant_term(sin_ϕ[i])
                TaylorSeries.zero!(tmp1386[i])
                (tmp1386[i]).coeffs[1] = constant_term(-1.5) * constant_term(sin_ϕ[i])
                TaylorSeries.zero!(tmp1388[i])
                (tmp1388[i]).coeffs[1] = constant_term(2.5) * constant_term(sin3_ϕ[i])
                TaylorSeries.zero!(P_3_sin_ϕ[i])
                (P_3_sin_ϕ[i]).coeffs[1] = constant_term(tmp1386[i]) + constant_term(tmp1388[i])
                TaylorSeries.zero!(tmp1392[i])
                (tmp1392[i]).coeffs[1] = constant_term(7.5) * constant_term(sin2_ϕ[i])
                TaylorSeries.zero!(∂P_3_sin_ϕ[i])
                (∂P_3_sin_ϕ[i]).coeffs[1] = constant_term(-1.5) + constant_term(tmp1392[i])
                TaylorSeries.zero!(tmp1395[i])
                (tmp1395[i]).coeffs[1] = constant_term(r_p2[i]) ^ float(constant_term(2))
                TaylorSeries.zero!(tmp1396[i])
                (tmp1396[i]).coeffs[1] = constant_term(Λ2[i]) / constant_term(tmp1395[i])
                TaylorSeries.zero!(Λ2j_div_r4[i])
                (Λ2j_div_r4[i]).coeffs[1] = -(constant_term(tmp1396[i]))
                TaylorSeries.zero!(tmp1399[i])
                (tmp1399[i]).coeffs[1] = constant_term(r_p1d2[i]) ^ float(constant_term(5))
                TaylorSeries.zero!(tmp1400[i])
                (tmp1400[i]).coeffs[1] = constant_term(Λ3[i]) / constant_term(tmp1399[i])
                TaylorSeries.zero!(Λ3j_div_r5[i])
                (Λ3j_div_r5[i]).coeffs[1] = -(constant_term(tmp1400[i]))
                TaylorSeries.zero!(tmp1402[i])
                (tmp1402[i]).coeffs[1] = -(constant_term(cos_ϕ[i]))
                TaylorSeries.zero!(m_c_ϕ_∂P_2[i])
                (m_c_ϕ_∂P_2[i]).coeffs[1] = constant_term(tmp1402[i]) * constant_term(∂P_2_sin_ϕ[i])
                TaylorSeries.zero!(tmp1404[i])
                (tmp1404[i]).coeffs[1] = -(constant_term(cos_ϕ[i]))
                TaylorSeries.zero!(m_c_ϕ_∂P_3[i])
                (m_c_ϕ_∂P_3[i]).coeffs[1] = constant_term(tmp1404[i]) * constant_term(∂P_3_sin_ϕ[i])
                TaylorSeries.zero!(tmp1407[i])
                (tmp1407[i]).coeffs[1] = constant_term(Λ2j_div_r4[i]) * constant_term(3)
                TaylorSeries.zero!(F_J2_ξ[i])
                (F_J2_ξ[i]).coeffs[1] = constant_term(tmp1407[i]) * constant_term(P_2_sin_ϕ[i])
                TaylorSeries.zero!(F_J2_ζ[i])
                (F_J2_ζ[i]).coeffs[1] = constant_term(Λ2j_div_r4[i]) * constant_term(m_c_ϕ_∂P_2[i])
                TaylorSeries.zero!(tmp1411[i])
                (tmp1411[i]).coeffs[1] = constant_term(Λ3j_div_r5[i]) * constant_term(4)
                TaylorSeries.zero!(F_J3_ξ[i])
                (F_J3_ξ[i]).coeffs[1] = constant_term(tmp1411[i]) * constant_term(P_3_sin_ϕ[i])
                TaylorSeries.zero!(F_J3_ζ[i])
                (F_J3_ζ[i]).coeffs[1] = constant_term(Λ3j_div_r5[i]) * constant_term(m_c_ϕ_∂P_3[i])
                TaylorSeries.zero!(F_J_ξ[i])
                (F_J_ξ[i]).coeffs[1] = identity(constant_term(F_J2_ξ[i]))
                TaylorSeries.zero!(F_J_ζ[i])
                (F_J_ζ[i]).coeffs[1] = identity(constant_term(F_J2_ζ[i]))
                TaylorSeries.zero!(tmp1414[i])
                (tmp1414[i]).coeffs[1] = -(constant_term(X[i]))
                TaylorSeries.zero!(ξx[i])
                (ξx[i]).coeffs[1] = constant_term(tmp1414[i]) / constant_term(r_p1d2[i])
                TaylorSeries.zero!(tmp1416[i])
                (tmp1416[i]).coeffs[1] = -(constant_term(Y[i]))
                TaylorSeries.zero!(ξy[i])
                (ξy[i]).coeffs[1] = constant_term(tmp1416[i]) / constant_term(r_p1d2[i])
                TaylorSeries.zero!(tmp1418[i])
                (tmp1418[i]).coeffs[1] = -(constant_term(Z[i]))
                TaylorSeries.zero!(ξz[i])
                (ξz[i]).coeffs[1] = constant_term(tmp1418[i]) / constant_term(r_p1d2[i])
                TaylorSeries.zero!(ηx1[i])
                (ηx1[i]).coeffs[1] = constant_term(M_[2, 3, i]) * constant_term(ξz[i])
                TaylorSeries.zero!(ηy1[i])
                (ηy1[i]).coeffs[1] = constant_term(M_[3, 3, i]) * constant_term(ξx[i])
                TaylorSeries.zero!(ηz1[i])
                (ηz1[i]).coeffs[1] = constant_term(M_[1, 3, i]) * constant_term(ξy[i])
                TaylorSeries.zero!(ηx2[i])
                (ηx2[i]).coeffs[1] = constant_term(M_[3, 3, i]) * constant_term(ξy[i])
                TaylorSeries.zero!(ηy2[i])
                (ηy2[i]).coeffs[1] = constant_term(M_[1, 3, i]) * constant_term(ξz[i])
                TaylorSeries.zero!(ηz2[i])
                (ηz2[i]).coeffs[1] = constant_term(M_[2, 3, i]) * constant_term(ξx[i])
                TaylorSeries.zero!(ηx[i])
                (ηx[i]).coeffs[1] = constant_term(ηx1[i]) - constant_term(ηx2[i])
                TaylorSeries.zero!(ηy[i])
                (ηy[i]).coeffs[1] = constant_term(ηy1[i]) - constant_term(ηy2[i])
                TaylorSeries.zero!(ηz[i])
                (ηz[i]).coeffs[1] = constant_term(ηz1[i]) - constant_term(ηz2[i])
                TaylorSeries.zero!(ζx1[i])
                (ζx1[i]).coeffs[1] = constant_term(ξy[i]) * constant_term(ηz[i])
                TaylorSeries.zero!(ζy1[i])
                (ζy1[i]).coeffs[1] = constant_term(ξz[i]) * constant_term(ηx[i])
                TaylorSeries.zero!(ζz1[i])
                (ζz1[i]).coeffs[1] = constant_term(ξx[i]) * constant_term(ηy[i])
                TaylorSeries.zero!(ζx2[i])
                (ζx2[i]).coeffs[1] = constant_term(ξz[i]) * constant_term(ηy[i])
                TaylorSeries.zero!(ζy2[i])
                (ζy2[i]).coeffs[1] = constant_term(ξx[i]) * constant_term(ηz[i])
                TaylorSeries.zero!(ζz2[i])
                (ζz2[i]).coeffs[1] = constant_term(ξy[i]) * constant_term(ηx[i])
                TaylorSeries.zero!(ζx[i])
                (ζx[i]).coeffs[1] = constant_term(ζx1[i]) - constant_term(ζx2[i])
                TaylorSeries.zero!(ζy[i])
                (ζy[i]).coeffs[1] = constant_term(ζy1[i]) - constant_term(ζy2[i])
                TaylorSeries.zero!(ζz[i])
                (ζz[i]).coeffs[1] = constant_term(ζz1[i]) - constant_term(ζz2[i])
                TaylorSeries.zero!(F_J2_x1[i])
                (F_J2_x1[i]).coeffs[1] = constant_term(F_J_ξ[i]) * constant_term(ξx[i])
                TaylorSeries.zero!(F_J2_y1[i])
                (F_J2_y1[i]).coeffs[1] = constant_term(F_J_ξ[i]) * constant_term(ξy[i])
                TaylorSeries.zero!(F_J2_z1[i])
                (F_J2_z1[i]).coeffs[1] = constant_term(F_J_ξ[i]) * constant_term(ξz[i])
                TaylorSeries.zero!(F_J2_x2[i])
                (F_J2_x2[i]).coeffs[1] = constant_term(F_J_ζ[i]) * constant_term(ζx[i])
                TaylorSeries.zero!(F_J2_y2[i])
                (F_J2_y2[i]).coeffs[1] = constant_term(F_J_ζ[i]) * constant_term(ζy[i])
                TaylorSeries.zero!(F_J2_z2[i])
                (F_J2_z2[i]).coeffs[1] = constant_term(F_J_ζ[i]) * constant_term(ζz[i])
                TaylorSeries.zero!(F_J2_x[i])
                (F_J2_x[i]).coeffs[1] = constant_term(F_J2_x1[i]) + constant_term(F_J2_x2[i])
                TaylorSeries.zero!(F_J2_y[i])
                (F_J2_y[i]).coeffs[1] = constant_term(F_J2_y1[i]) + constant_term(F_J2_y2[i])
                TaylorSeries.zero!(F_J2_z[i])
                (F_J2_z[i]).coeffs[1] = constant_term(F_J2_z1[i]) + constant_term(F_J2_z2[i])
            end
            TaylorSeries.zero!(tmp1448[i])
            (tmp1448[i]).coeffs[1] = constant_term(ui[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp1450[i])
            (tmp1450[i]).coeffs[1] = constant_term(vi[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp1451[i])
            (tmp1451[i]).coeffs[1] = constant_term(tmp1448[i]) + constant_term(tmp1450[i])
            TaylorSeries.zero!(tmp1453[i])
            (tmp1453[i]).coeffs[1] = constant_term(wi[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(v2[i])
            (v2[i]).coeffs[1] = constant_term(tmp1451[i]) + constant_term(tmp1453[i])
        end
    TaylorSeries.zero!(tmp1456)
    tmp1456.coeffs[1] = constant_term(q[4]) ^ float(constant_term(2))
    TaylorSeries.zero!(tmp1458)
    tmp1458.coeffs[1] = constant_term(q[5]) ^ float(constant_term(2))
    TaylorSeries.zero!(tmp1459)
    tmp1459.coeffs[1] = constant_term(tmp1456) + constant_term(tmp1458)
    TaylorSeries.zero!(tmp1461)
    tmp1461.coeffs[1] = constant_term(q[6]) ^ float(constant_term(2))
    TaylorSeries.zero!(v2[N])
    (v2[N]).coeffs[1] = constant_term(tmp1459) + constant_term(tmp1461)
    for i = 1:Nm1
        TaylorSeries.zero!(temp_004[i])
        (temp_004[i]).coeffs[1] = constant_term(newtonian1b_Potential[i]) + constant_term(newtonianNb_Potential[N])
        TaylorSeries.zero!(newtonianNb_Potential[N])
        (newtonianNb_Potential[N]).coeffs[1] = identity(constant_term(temp_004[i]))
        if UJ_interaction[i]
            TaylorSeries.zero!(tmp1464[i])
            (tmp1464[i]).coeffs[1] = constant_term(μ[i]) * constant_term(F_J2_x[i])
            TaylorSeries.zero!(temp_accX_i[i])
            (temp_accX_i[i]).coeffs[1] = constant_term(accX) - constant_term(tmp1464[i])
            TaylorSeries.zero!(accX)
            accX.coeffs[1] = identity(constant_term(temp_accX_i[i]))
            TaylorSeries.zero!(tmp1466[i])
            (tmp1466[i]).coeffs[1] = constant_term(μ[i]) * constant_term(F_J2_y[i])
            TaylorSeries.zero!(temp_accY_i[i])
            (temp_accY_i[i]).coeffs[1] = constant_term(accY) - constant_term(tmp1466[i])
            TaylorSeries.zero!(accY)
            accY.coeffs[1] = identity(constant_term(temp_accY_i[i]))
            TaylorSeries.zero!(tmp1468[i])
            (tmp1468[i]).coeffs[1] = constant_term(μ[i]) * constant_term(F_J2_z[i])
            TaylorSeries.zero!(temp_accZ_i[i])
            (temp_accZ_i[i]).coeffs[1] = constant_term(accZ) - constant_term(tmp1468[i])
            TaylorSeries.zero!(accZ)
            accZ.coeffs[1] = identity(constant_term(temp_accZ_i[i]))
        end
    end
    TaylorSeries.zero!(_4ϕj[N])
    (_4ϕj[N]).coeffs[1] = constant_term(4) * constant_term(newtonianNb_Potential[N])
    #= REPL[79]:452 =# Threads.@threads for i = 1:10
            TaylorSeries.zero!(ϕi_plus_4ϕj[i])
            (ϕi_plus_4ϕj[i]).coeffs[1] = constant_term(newtonianNb_Potential_t[i]) + constant_term(_4ϕj[N])
            TaylorSeries.zero!(tmp1474[i])
            (tmp1474[i]).coeffs[1] = constant_term(2) * constant_term(v2[i])
            TaylorSeries.zero!(tmp1476[i])
            (tmp1476[i]).coeffs[1] = constant_term(4) * constant_term(vi_dot_vj[i])
            TaylorSeries.zero!(tmp1477[i])
            (tmp1477[i]).coeffs[1] = constant_term(tmp1474[i]) - constant_term(tmp1476[i])
            TaylorSeries.zero!(sj2_plus_2si2_minus_4vivj[i])
            (sj2_plus_2si2_minus_4vivj[i]).coeffs[1] = constant_term(tmp1477[i]) + constant_term(v2[N])
            TaylorSeries.zero!(ϕs_and_vs[i])
            (ϕs_and_vs[i]).coeffs[1] = constant_term(sj2_plus_2si2_minus_4vivj[i]) - constant_term(ϕi_plus_4ϕj[i])
            TaylorSeries.zero!(Xij_t_Ui[i])
            (Xij_t_Ui[i]).coeffs[1] = constant_term(X[i]) * constant_term(ui[i])
            TaylorSeries.zero!(Yij_t_Vi[i])
            (Yij_t_Vi[i]).coeffs[1] = constant_term(Y[i]) * constant_term(vi[i])
            TaylorSeries.zero!(Zij_t_Wi[i])
            (Zij_t_Wi[i]).coeffs[1] = constant_term(Z[i]) * constant_term(wi[i])
            TaylorSeries.zero!(tmp1483[i])
            (tmp1483[i]).coeffs[1] = constant_term(Xij_t_Ui[i]) + constant_term(Yij_t_Vi[i])
            TaylorSeries.zero!(Rij_dot_Vi[i])
            (Rij_dot_Vi[i]).coeffs[1] = constant_term(tmp1483[i]) + constant_term(Zij_t_Wi[i])
            TaylorSeries.zero!(tmp1486[i])
            (tmp1486[i]).coeffs[1] = constant_term(Rij_dot_Vi[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(pn1t7[i])
            (pn1t7[i]).coeffs[1] = constant_term(tmp1486[i]) / constant_term(r_p2[i])
            TaylorSeries.zero!(tmp1489[i])
            (tmp1489[i]).coeffs[1] = constant_term(1.5) * constant_term(pn1t7[i])
            TaylorSeries.zero!(pn1t2_7[i])
            (pn1t2_7[i]).coeffs[1] = constant_term(ϕs_and_vs[i]) - constant_term(tmp1489[i])
            TaylorSeries.zero!(pn1t1_7[i])
            (pn1t1_7[i]).coeffs[1] = constant_term(c_p2) + constant_term(pn1t2_7[i])
            TaylorSeries.zero!(pNX_t_X[i])
            (pNX_t_X[i]).coeffs[1] = constant_term(acceph_t[3i - 2]) * constant_term(X[i])
            TaylorSeries.zero!(pNY_t_Y[i])
            (pNY_t_Y[i]).coeffs[1] = constant_term(acceph_t[3i - 1]) * constant_term(Y[i])
            TaylorSeries.zero!(pNZ_t_Z[i])
            (pNZ_t_Z[i]).coeffs[1] = constant_term(acceph_t[3i]) * constant_term(Z[i])
            TaylorSeries.zero!(tmp1496[i])
            (tmp1496[i]).coeffs[1] = constant_term(pNX_t_X[i]) + constant_term(pNY_t_Y[i])
            TaylorSeries.zero!(tmp1497[i])
            (tmp1497[i]).coeffs[1] = constant_term(tmp1496[i]) + constant_term(pNZ_t_Z[i])
            TaylorSeries.zero!(tmp1498[i])
            (tmp1498[i]).coeffs[1] = constant_term(0.5) * constant_term(tmp1497[i])
            TaylorSeries.zero!(pn1[i])
            (pn1[i]).coeffs[1] = constant_term(pn1t1_7[i]) + constant_term(tmp1498[i])
            TaylorSeries.zero!(X_t_pn1[i])
            (X_t_pn1[i]).coeffs[1] = constant_term(newton_acc_X[i]) * constant_term(pn1[i])
            TaylorSeries.zero!(Y_t_pn1[i])
            (Y_t_pn1[i]).coeffs[1] = constant_term(newton_acc_Y[i]) * constant_term(pn1[i])
            TaylorSeries.zero!(Z_t_pn1[i])
            (Z_t_pn1[i]).coeffs[1] = constant_term(newton_acc_Z[i]) * constant_term(pn1[i])
            TaylorSeries.zero!(pNX_t_pn3[i])
            (pNX_t_pn3[i]).coeffs[1] = constant_term(acceph_t[3i - 2]) * constant_term(pn3[i])
            TaylorSeries.zero!(pNY_t_pn3[i])
            (pNY_t_pn3[i]).coeffs[1] = constant_term(acceph_t[3i - 1]) * constant_term(pn3[i])
            TaylorSeries.zero!(pNZ_t_pn3[i])
            (pNZ_t_pn3[i]).coeffs[1] = constant_term(acceph_t[3i]) * constant_term(pn3[i])
        end
    for i = 1:10
        TaylorSeries.zero!(tmp1506[i])
        (tmp1506[i]).coeffs[1] = constant_term(U_t_pn2[i]) + constant_term(pNX_t_pn3[i])
        TaylorSeries.zero!(termpnx[i])
        (termpnx[i]).coeffs[1] = constant_term(X_t_pn1[i]) + constant_term(tmp1506[i])
        TaylorSeries.zero!(sumpnx[i])
        (sumpnx[i]).coeffs[1] = constant_term(pntempX) + constant_term(termpnx[i])
        TaylorSeries.zero!(pntempX)
        pntempX.coeffs[1] = identity(constant_term(sumpnx[i]))
        TaylorSeries.zero!(tmp1509[i])
        (tmp1509[i]).coeffs[1] = constant_term(V_t_pn2[i]) + constant_term(pNY_t_pn3[i])
        TaylorSeries.zero!(termpny[i])
        (termpny[i]).coeffs[1] = constant_term(Y_t_pn1[i]) + constant_term(tmp1509[i])
        TaylorSeries.zero!(sumpny[i])
        (sumpny[i]).coeffs[1] = constant_term(pntempY) + constant_term(termpny[i])
        TaylorSeries.zero!(pntempY)
        pntempY.coeffs[1] = identity(constant_term(sumpny[i]))
        TaylorSeries.zero!(tmp1512[i])
        (tmp1512[i]).coeffs[1] = constant_term(W_t_pn2[i]) + constant_term(pNZ_t_pn3[i])
        TaylorSeries.zero!(termpnz[i])
        (termpnz[i]).coeffs[1] = constant_term(Z_t_pn1[i]) + constant_term(tmp1512[i])
        TaylorSeries.zero!(sumpnz[i])
        (sumpnz[i]).coeffs[1] = constant_term(pntempZ) + constant_term(termpnz[i])
        TaylorSeries.zero!(pntempZ)
        pntempZ.coeffs[1] = identity(constant_term(sumpnz[i]))
    end
    #= REPL[79]:505 =# Threads.@threads for i = 11:Nm1
            TaylorSeries.zero!(X_t_pn1[i])
            (X_t_pn1[i]).coeffs[1] = constant_term(c_p2) * constant_term(newton_acc_X[i])
            TaylorSeries.zero!(Y_t_pn1[i])
            (Y_t_pn1[i]).coeffs[1] = constant_term(c_p2) * constant_term(newton_acc_Y[i])
            TaylorSeries.zero!(Z_t_pn1[i])
            (Z_t_pn1[i]).coeffs[1] = constant_term(c_p2) * constant_term(newton_acc_Z[i])
        end
    for i = 11:Nm1
        TaylorSeries.zero!(termpnx[i])
        (termpnx[i]).coeffs[1] = identity(constant_term(X_t_pn1[i]))
        TaylorSeries.zero!(sumpnx[i])
        (sumpnx[i]).coeffs[1] = constant_term(pntempX) + constant_term(termpnx[i])
        TaylorSeries.zero!(pntempX)
        pntempX.coeffs[1] = identity(constant_term(sumpnx[i]))
        TaylorSeries.zero!(termpny[i])
        (termpny[i]).coeffs[1] = identity(constant_term(Y_t_pn1[i]))
        TaylorSeries.zero!(sumpny[i])
        (sumpny[i]).coeffs[1] = constant_term(pntempY) + constant_term(termpny[i])
        TaylorSeries.zero!(pntempY)
        pntempY.coeffs[1] = identity(constant_term(sumpny[i]))
        TaylorSeries.zero!(termpnz[i])
        (termpnz[i]).coeffs[1] = identity(constant_term(Z_t_pn1[i]))
        TaylorSeries.zero!(sumpnz[i])
        (sumpnz[i]).coeffs[1] = constant_term(pntempZ) + constant_term(termpnz[i])
        TaylorSeries.zero!(pntempZ)
        pntempZ.coeffs[1] = identity(constant_term(sumpnz[i]))
    end
    TaylorSeries.zero!(postNewtonX)
    postNewtonX.coeffs[1] = constant_term(pntempX) * constant_term(c_m2)
    TaylorSeries.zero!(postNewtonY)
    postNewtonY.coeffs[1] = constant_term(pntempY) * constant_term(c_m2)
    TaylorSeries.zero!(postNewtonZ)
    postNewtonZ.coeffs[1] = constant_term(pntempZ) * constant_term(c_m2)
    TaylorSeries.zero!(dq[4])
    (dq[4]).coeffs[1] = constant_term(postNewtonX) + constant_term(accX)
    TaylorSeries.zero!(dq[5])
    (dq[5]).coeffs[1] = constant_term(postNewtonY) + constant_term(accY)
    TaylorSeries.zero!(dq[6])
    (dq[6]).coeffs[1] = constant_term(postNewtonZ) + constant_term(accZ)
    for __idx = eachindex(q)
        (q[__idx]).coeffs[2] = (dq[__idx]).coeffs[1]
    end
    for ord = 1:order - 1
        ordnext = ord + 1
        TaylorSeries.identity!(pntempX, zero_q_1, ord)
        TaylorSeries.identity!(pntempY, zero_q_1, ord)
        TaylorSeries.identity!(pntempZ, zero_q_1, ord)
        TaylorSeries.identity!(accX, zero_q_1, ord)
        TaylorSeries.identity!(accY, zero_q_1, ord)
        TaylorSeries.identity!(accZ, zero_q_1, ord)
        TaylorSeries.identity!(dq[1], q[4], ord)
        TaylorSeries.identity!(dq[2], q[5], ord)
        TaylorSeries.identity!(dq[3], q[6], ord)
        TaylorSeries.identity!(newtonianNb_Potential[N], zero_q_1, ord)
        TaylorSeries.mul!(_4dq[1], 4, dq[1], ord)
        TaylorSeries.mul!(_4dq[2], 4, dq[2], ord)
        TaylorSeries.mul!(_4dq[3], 4, dq[3], ord)
        #= REPL[79]:250 =# Threads.@threads for i = 1:Nm1
                TaylorSeries.identity!(ui[i], ss16asteph_t[3 * ((N - 1) + i) - 2], ord)
                TaylorSeries.identity!(vi[i], ss16asteph_t[3 * ((N - 1) + i) - 1], ord)
                TaylorSeries.identity!(wi[i], ss16asteph_t[3 * ((N - 1) + i)], ord)
                TaylorSeries.subst!(X[i], ss16asteph_t[3i - 2], q[1], ord)
                TaylorSeries.subst!(Y[i], ss16asteph_t[3i - 1], q[2], ord)
                TaylorSeries.subst!(Z[i], ss16asteph_t[3i], q[3], ord)
                TaylorSeries.subst!(U[i], ui[i], dq[1], ord)
                TaylorSeries.subst!(V[i], vi[i], dq[2], ord)
                TaylorSeries.subst!(W[i], wi[i], dq[3], ord)
                TaylorSeries.mul!(tmp1322[i], -3, ui[i], ord)
                TaylorSeries.add!(_4U_m_3X[i], tmp1322[i], _4dq[1], ord)
                TaylorSeries.mul!(tmp1325[i], -3, vi[i], ord)
                TaylorSeries.add!(_4V_m_3Y[i], tmp1325[i], _4dq[2], ord)
                TaylorSeries.mul!(tmp1328[i], -3, wi[i], ord)
                TaylorSeries.add!(_4W_m_3Z[i], tmp1328[i], _4dq[3], ord)
                TaylorSeries.mul!(pn2x[i], X[i], _4U_m_3X[i], ord)
                TaylorSeries.mul!(pn2y[i], Y[i], _4V_m_3Y[i], ord)
                TaylorSeries.mul!(pn2z[i], Z[i], _4W_m_3Z[i], ord)
                TaylorSeries.mul!(UU[i], ui[i], dq[1], ord)
                TaylorSeries.mul!(VV[i], vi[i], dq[2], ord)
                TaylorSeries.mul!(WW[i], wi[i], dq[3], ord)
                TaylorSeries.add!(tmp1336[i], UU[i], VV[i], ord)
                TaylorSeries.add!(vi_dot_vj[i], tmp1336[i], WW[i], ord)
                TaylorSeries.pow!(tmp1339[i], X[i], 2, ord)
                TaylorSeries.pow!(tmp1341[i], Y[i], 2, ord)
                TaylorSeries.add!(tmp1342[i], tmp1339[i], tmp1341[i], ord)
                TaylorSeries.pow!(tmp1344[i], Z[i], 2, ord)
                TaylorSeries.add!(r_p2[i], tmp1342[i], tmp1344[i], ord)
                TaylorSeries.sqrt!(r_p1d2[i], r_p2[i], ord)
                TaylorSeries.pow!(r_p3d2[i], r_p2[i], 1.5, ord)
                TaylorSeries.pow!(r_p7d2[i], r_p2[i], 3.5, ord)
                TaylorSeries.div!(newtonianCoeff[i], μ[i], r_p3d2[i], ord)
                TaylorSeries.add!(tmp1352[i], pn2x[i], pn2y[i], ord)
                TaylorSeries.add!(tmp1353[i], tmp1352[i], pn2z[i], ord)
                TaylorSeries.mul!(pn2[i], newtonianCoeff[i], tmp1353[i], ord)
                TaylorSeries.mul!(newton_acc_X[i], X[i], newtonianCoeff[i], ord)
                TaylorSeries.mul!(newton_acc_Y[i], Y[i], newtonianCoeff[i], ord)
                TaylorSeries.mul!(newton_acc_Z[i], Z[i], newtonianCoeff[i], ord)
                TaylorSeries.div!(newtonian1b_Potential[i], μ[i], r_p1d2[i], ord)
                TaylorSeries.mul!(pn3[i], 3.5, newtonian1b_Potential[i], ord)
                TaylorSeries.mul!(U_t_pn2[i], pn2[i], U[i], ord)
                TaylorSeries.mul!(V_t_pn2[i], pn2[i], V[i], ord)
                TaylorSeries.mul!(W_t_pn2[i], pn2[i], W[i], ord)
                if UJ_interaction[i]
                    TaylorSeries.subst!(tmp1364[i], X[i], ord)
                    TaylorSeries.mul!(t31[i], tmp1364[i], M_[1, 3, i], ord)
                    TaylorSeries.subst!(tmp1366[i], Y[i], ord)
                    TaylorSeries.mul!(t32[i], tmp1366[i], M_[2, 3, i], ord)
                    TaylorSeries.subst!(tmp1368[i], Z[i], ord)
                    TaylorSeries.mul!(t33[i], tmp1368[i], M_[3, 3, i], ord)
                    TaylorSeries.add!(tmp1370[i], t31[i], t32[i], ord)
                    TaylorSeries.add!(r_sin_ϕ[i], tmp1370[i], t33[i], ord)
                    TaylorSeries.div!(sin_ϕ[i], r_sin_ϕ[i], r_p1d2[i], ord)
                    TaylorSeries.asin!(ϕ[i], sin_ϕ[i], tmp1527[i], ord)
                    TaylorSeries.sincos!(tmp1528[i], cos_ϕ[i], ϕ[i], ord)
                    TaylorSeries.pow!(sin2_ϕ[i], sin_ϕ[i], 2, ord)
                    TaylorSeries.pow!(sin3_ϕ[i], sin_ϕ[i], 3, ord)
                    TaylorSeries.mul!(tmp1380[i], 1.5, sin2_ϕ[i], ord)
                    TaylorSeries.subst!(P_2_sin_ϕ[i], tmp1380[i], 0.5, ord)
                    TaylorSeries.mul!(∂P_2_sin_ϕ[i], 3, sin_ϕ[i], ord)
                    TaylorSeries.mul!(tmp1386[i], -1.5, sin_ϕ[i], ord)
                    TaylorSeries.mul!(tmp1388[i], 2.5, sin3_ϕ[i], ord)
                    TaylorSeries.add!(P_3_sin_ϕ[i], tmp1386[i], tmp1388[i], ord)
                    TaylorSeries.mul!(tmp1392[i], 7.5, sin2_ϕ[i], ord)
                    TaylorSeries.add!(∂P_3_sin_ϕ[i], -1.5, tmp1392[i], ord)
                    TaylorSeries.pow!(tmp1395[i], r_p2[i], 2, ord)
                    TaylorSeries.div!(tmp1396[i], Λ2[i], tmp1395[i], ord)
                    TaylorSeries.subst!(Λ2j_div_r4[i], tmp1396[i], ord)
                    TaylorSeries.pow!(tmp1399[i], r_p1d2[i], 5, ord)
                    TaylorSeries.div!(tmp1400[i], Λ3[i], tmp1399[i], ord)
                    TaylorSeries.subst!(Λ3j_div_r5[i], tmp1400[i], ord)
                    TaylorSeries.subst!(tmp1402[i], cos_ϕ[i], ord)
                    TaylorSeries.mul!(m_c_ϕ_∂P_2[i], tmp1402[i], ∂P_2_sin_ϕ[i], ord)
                    TaylorSeries.subst!(tmp1404[i], cos_ϕ[i], ord)
                    TaylorSeries.mul!(m_c_ϕ_∂P_3[i], tmp1404[i], ∂P_3_sin_ϕ[i], ord)
                    TaylorSeries.mul!(tmp1407[i], Λ2j_div_r4[i], 3, ord)
                    TaylorSeries.mul!(F_J2_ξ[i], tmp1407[i], P_2_sin_ϕ[i], ord)
                    TaylorSeries.mul!(F_J2_ζ[i], Λ2j_div_r4[i], m_c_ϕ_∂P_2[i], ord)
                    TaylorSeries.mul!(tmp1411[i], Λ3j_div_r5[i], 4, ord)
                    TaylorSeries.mul!(F_J3_ξ[i], tmp1411[i], P_3_sin_ϕ[i], ord)
                    TaylorSeries.mul!(F_J3_ζ[i], Λ3j_div_r5[i], m_c_ϕ_∂P_3[i], ord)
                    TaylorSeries.identity!(F_J_ξ[i], F_J2_ξ[i], ord)
                    TaylorSeries.identity!(F_J_ζ[i], F_J2_ζ[i], ord)
                    TaylorSeries.subst!(tmp1414[i], X[i], ord)
                    TaylorSeries.div!(ξx[i], tmp1414[i], r_p1d2[i], ord)
                    TaylorSeries.subst!(tmp1416[i], Y[i], ord)
                    TaylorSeries.div!(ξy[i], tmp1416[i], r_p1d2[i], ord)
                    TaylorSeries.subst!(tmp1418[i], Z[i], ord)
                    TaylorSeries.div!(ξz[i], tmp1418[i], r_p1d2[i], ord)
                    TaylorSeries.mul!(ηx1[i], M_[2, 3, i], ξz[i], ord)
                    TaylorSeries.mul!(ηy1[i], M_[3, 3, i], ξx[i], ord)
                    TaylorSeries.mul!(ηz1[i], M_[1, 3, i], ξy[i], ord)
                    TaylorSeries.mul!(ηx2[i], M_[3, 3, i], ξy[i], ord)
                    TaylorSeries.mul!(ηy2[i], M_[1, 3, i], ξz[i], ord)
                    TaylorSeries.mul!(ηz2[i], M_[2, 3, i], ξx[i], ord)
                    TaylorSeries.subst!(ηx[i], ηx1[i], ηx2[i], ord)
                    TaylorSeries.subst!(ηy[i], ηy1[i], ηy2[i], ord)
                    TaylorSeries.subst!(ηz[i], ηz1[i], ηz2[i], ord)
                    TaylorSeries.mul!(ζx1[i], ξy[i], ηz[i], ord)
                    TaylorSeries.mul!(ζy1[i], ξz[i], ηx[i], ord)
                    TaylorSeries.mul!(ζz1[i], ξx[i], ηy[i], ord)
                    TaylorSeries.mul!(ζx2[i], ξz[i], ηy[i], ord)
                    TaylorSeries.mul!(ζy2[i], ξx[i], ηz[i], ord)
                    TaylorSeries.mul!(ζz2[i], ξy[i], ηx[i], ord)
                    TaylorSeries.subst!(ζx[i], ζx1[i], ζx2[i], ord)
                    TaylorSeries.subst!(ζy[i], ζy1[i], ζy2[i], ord)
                    TaylorSeries.subst!(ζz[i], ζz1[i], ζz2[i], ord)
                    TaylorSeries.mul!(F_J2_x1[i], F_J_ξ[i], ξx[i], ord)
                    TaylorSeries.mul!(F_J2_y1[i], F_J_ξ[i], ξy[i], ord)
                    TaylorSeries.mul!(F_J2_z1[i], F_J_ξ[i], ξz[i], ord)
                    TaylorSeries.mul!(F_J2_x2[i], F_J_ζ[i], ζx[i], ord)
                    TaylorSeries.mul!(F_J2_y2[i], F_J_ζ[i], ζy[i], ord)
                    TaylorSeries.mul!(F_J2_z2[i], F_J_ζ[i], ζz[i], ord)
                    TaylorSeries.add!(F_J2_x[i], F_J2_x1[i], F_J2_x2[i], ord)
                    TaylorSeries.add!(F_J2_y[i], F_J2_y1[i], F_J2_y2[i], ord)
                    TaylorSeries.add!(F_J2_z[i], F_J2_z1[i], F_J2_z2[i], ord)
                end
                TaylorSeries.pow!(tmp1448[i], ui[i], 2, ord)
                TaylorSeries.pow!(tmp1450[i], vi[i], 2, ord)
                TaylorSeries.add!(tmp1451[i], tmp1448[i], tmp1450[i], ord)
                TaylorSeries.pow!(tmp1453[i], wi[i], 2, ord)
                TaylorSeries.add!(v2[i], tmp1451[i], tmp1453[i], ord)
            end
        TaylorSeries.pow!(tmp1456, q[4], 2, ord)
        TaylorSeries.pow!(tmp1458, q[5], 2, ord)
        TaylorSeries.add!(tmp1459, tmp1456, tmp1458, ord)
        TaylorSeries.pow!(tmp1461, q[6], 2, ord)
        TaylorSeries.add!(v2[N], tmp1459, tmp1461, ord)
        for i = 1:Nm1
            TaylorSeries.add!(temp_004[i], newtonian1b_Potential[i], newtonianNb_Potential[N], ord)
            TaylorSeries.identity!(newtonianNb_Potential[N], temp_004[i], ord)
            if UJ_interaction[i]
                TaylorSeries.mul!(tmp1464[i], μ[i], F_J2_x[i], ord)
                TaylorSeries.subst!(temp_accX_i[i], accX, tmp1464[i], ord)
                TaylorSeries.identity!(accX, temp_accX_i[i], ord)
                TaylorSeries.mul!(tmp1466[i], μ[i], F_J2_y[i], ord)
                TaylorSeries.subst!(temp_accY_i[i], accY, tmp1466[i], ord)
                TaylorSeries.identity!(accY, temp_accY_i[i], ord)
                TaylorSeries.mul!(tmp1468[i], μ[i], F_J2_z[i], ord)
                TaylorSeries.subst!(temp_accZ_i[i], accZ, tmp1468[i], ord)
                TaylorSeries.identity!(accZ, temp_accZ_i[i], ord)
            end
        end
        TaylorSeries.mul!(_4ϕj[N], 4, newtonianNb_Potential[N], ord)
        #= REPL[79]:452 =# Threads.@threads for i = 1:10
                TaylorSeries.add!(ϕi_plus_4ϕj[i], newtonianNb_Potential_t[i], _4ϕj[N], ord)
                TaylorSeries.mul!(tmp1474[i], 2, v2[i], ord)
                TaylorSeries.mul!(tmp1476[i], 4, vi_dot_vj[i], ord)
                TaylorSeries.subst!(tmp1477[i], tmp1474[i], tmp1476[i], ord)
                TaylorSeries.add!(sj2_plus_2si2_minus_4vivj[i], tmp1477[i], v2[N], ord)
                TaylorSeries.subst!(ϕs_and_vs[i], sj2_plus_2si2_minus_4vivj[i], ϕi_plus_4ϕj[i], ord)
                TaylorSeries.mul!(Xij_t_Ui[i], X[i], ui[i], ord)
                TaylorSeries.mul!(Yij_t_Vi[i], Y[i], vi[i], ord)
                TaylorSeries.mul!(Zij_t_Wi[i], Z[i], wi[i], ord)
                TaylorSeries.add!(tmp1483[i], Xij_t_Ui[i], Yij_t_Vi[i], ord)
                TaylorSeries.add!(Rij_dot_Vi[i], tmp1483[i], Zij_t_Wi[i], ord)
                TaylorSeries.pow!(tmp1486[i], Rij_dot_Vi[i], 2, ord)
                TaylorSeries.div!(pn1t7[i], tmp1486[i], r_p2[i], ord)
                TaylorSeries.mul!(tmp1489[i], 1.5, pn1t7[i], ord)
                TaylorSeries.subst!(pn1t2_7[i], ϕs_and_vs[i], tmp1489[i], ord)
                TaylorSeries.add!(pn1t1_7[i], c_p2, pn1t2_7[i], ord)
                TaylorSeries.mul!(pNX_t_X[i], acceph_t[3i - 2], X[i], ord)
                TaylorSeries.mul!(pNY_t_Y[i], acceph_t[3i - 1], Y[i], ord)
                TaylorSeries.mul!(pNZ_t_Z[i], acceph_t[3i], Z[i], ord)
                TaylorSeries.add!(tmp1496[i], pNX_t_X[i], pNY_t_Y[i], ord)
                TaylorSeries.add!(tmp1497[i], tmp1496[i], pNZ_t_Z[i], ord)
                TaylorSeries.mul!(tmp1498[i], 0.5, tmp1497[i], ord)
                TaylorSeries.add!(pn1[i], pn1t1_7[i], tmp1498[i], ord)
                TaylorSeries.mul!(X_t_pn1[i], newton_acc_X[i], pn1[i], ord)
                TaylorSeries.mul!(Y_t_pn1[i], newton_acc_Y[i], pn1[i], ord)
                TaylorSeries.mul!(Z_t_pn1[i], newton_acc_Z[i], pn1[i], ord)
                TaylorSeries.mul!(pNX_t_pn3[i], acceph_t[3i - 2], pn3[i], ord)
                TaylorSeries.mul!(pNY_t_pn3[i], acceph_t[3i - 1], pn3[i], ord)
                TaylorSeries.mul!(pNZ_t_pn3[i], acceph_t[3i], pn3[i], ord)
            end
        for i = 1:10
            TaylorSeries.add!(tmp1506[i], U_t_pn2[i], pNX_t_pn3[i], ord)
            TaylorSeries.add!(termpnx[i], X_t_pn1[i], tmp1506[i], ord)
            TaylorSeries.add!(sumpnx[i], pntempX, termpnx[i], ord)
            TaylorSeries.identity!(pntempX, sumpnx[i], ord)
            TaylorSeries.add!(tmp1509[i], V_t_pn2[i], pNY_t_pn3[i], ord)
            TaylorSeries.add!(termpny[i], Y_t_pn1[i], tmp1509[i], ord)
            TaylorSeries.add!(sumpny[i], pntempY, termpny[i], ord)
            TaylorSeries.identity!(pntempY, sumpny[i], ord)
            TaylorSeries.add!(tmp1512[i], W_t_pn2[i], pNZ_t_pn3[i], ord)
            TaylorSeries.add!(termpnz[i], Z_t_pn1[i], tmp1512[i], ord)
            TaylorSeries.add!(sumpnz[i], pntempZ, termpnz[i], ord)
            TaylorSeries.identity!(pntempZ, sumpnz[i], ord)
        end
        #= REPL[79]:505 =# Threads.@threads for i = 11:Nm1
                TaylorSeries.mul!(X_t_pn1[i], c_p2, newton_acc_X[i], ord)
                TaylorSeries.mul!(Y_t_pn1[i], c_p2, newton_acc_Y[i], ord)
                TaylorSeries.mul!(Z_t_pn1[i], c_p2, newton_acc_Z[i], ord)
            end
        for i = 11:Nm1
            TaylorSeries.identity!(termpnx[i], X_t_pn1[i], ord)
            TaylorSeries.add!(sumpnx[i], pntempX, termpnx[i], ord)
            TaylorSeries.identity!(pntempX, sumpnx[i], ord)
            TaylorSeries.identity!(termpny[i], Y_t_pn1[i], ord)
            TaylorSeries.add!(sumpny[i], pntempY, termpny[i], ord)
            TaylorSeries.identity!(pntempY, sumpny[i], ord)
            TaylorSeries.identity!(termpnz[i], Z_t_pn1[i], ord)
            TaylorSeries.add!(sumpnz[i], pntempZ, termpnz[i], ord)
            TaylorSeries.identity!(pntempZ, sumpnz[i], ord)
        end
        TaylorSeries.mul!(postNewtonX, pntempX, c_m2, ord)
        TaylorSeries.mul!(postNewtonY, pntempY, c_m2, ord)
        TaylorSeries.mul!(postNewtonZ, pntempZ, c_m2, ord)
        TaylorSeries.add!(dq[4], postNewtonX, accX, ord)
        TaylorSeries.add!(dq[5], postNewtonY, accY, ord)
        TaylorSeries.add!(dq[6], postNewtonZ, accZ, ord)
        for __idx = eachindex(q)
            (q[__idx]).coeffs[ordnext + 1] = (dq[__idx]).coeffs[ordnext] / ordnext
        end
    end
    return nothing
end

# TaylorIntegration._allocate_jetcoeffs! method for src/propagation/asteroid_dynamical_models.jl: newtonian!
function TaylorIntegration._allocate_jetcoeffs!(::Val{newtonian!}, t::Taylor1{_T}, q::AbstractArray{Taylor1{_S}, _N}, dq::AbstractArray{Taylor1{_S}, _N}, params) where {_T <: Real, _S <: Number, _N}
    order = t.order
    local jd0 = params.jd0
    local dsj2k = t + (jd0 - JD_J2000)
    local ss16asteph_t = evaleph(params.sseph, dsj2k, q[1])
    local S = eltype(q)
    local N = 10
    local Nm1 = N - 1
    local μ = params.μ[1:10]
    local zero_q_1 = auxzero(q[1])
    X = Array{S}(undef, N)
    Y = Array{S}(undef, N)
    Z = Array{S}(undef, N)
    r_p2 = Array{S}(undef, N)
    r_p3d2 = Array{S}(undef, N)
    newtonianCoeff = Array{S}(undef, N)
    newton_acc_X = Array{S}(undef, N)
    newton_acc_Y = Array{S}(undef, N)
    newton_acc_Z = Array{S}(undef, N)
    temp_accX_i = Array{S}(undef, N)
    temp_accY_i = Array{S}(undef, N)
    temp_accZ_i = Array{S}(undef, N)
    accX = Taylor1(identity(constant_term(zero_q_1)), order)
    accY = Taylor1(identity(constant_term(zero_q_1)), order)
    accZ = Taylor1(identity(constant_term(zero_q_1)), order)
    dq[1] = Taylor1(identity(constant_term(q[4])), order)
    dq[2] = Taylor1(identity(constant_term(q[5])), order)
    dq[3] = Taylor1(identity(constant_term(q[6])), order)
    tmp1581 = Array{Taylor1{_S}}(undef, size(X))
    for i = CartesianIndices(tmp1581)
        tmp1581[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1583 = Array{Taylor1{_S}}(undef, size(Y))
    for i = CartesianIndices(tmp1583)
        tmp1583[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1584 = Array{Taylor1{_S}}(undef, size(tmp1581))
    for i = CartesianIndices(tmp1584)
        tmp1584[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    tmp1586 = Array{Taylor1{_S}}(undef, size(Z))
    for i = CartesianIndices(tmp1586)
        tmp1586[i] = Taylor1(zero(constant_term(q[1])), order)
    end
    #= REPL[83]:62 =# Threads.@threads for i = 1:Nm1
            X[i] = Taylor1(constant_term(ss16asteph_t[3i - 2]) - constant_term(q[1]), order)
            Y[i] = Taylor1(constant_term(ss16asteph_t[3i - 1]) - constant_term(q[2]), order)
            Z[i] = Taylor1(constant_term(ss16asteph_t[3i]) - constant_term(q[3]), order)
            tmp1581[i] = Taylor1(constant_term(X[i]) ^ float(constant_term(2)), order)
            tmp1583[i] = Taylor1(constant_term(Y[i]) ^ float(constant_term(2)), order)
            tmp1584[i] = Taylor1(constant_term(tmp1581[i]) + constant_term(tmp1583[i]), order)
            tmp1586[i] = Taylor1(constant_term(Z[i]) ^ float(constant_term(2)), order)
            r_p2[i] = Taylor1(constant_term(tmp1584[i]) + constant_term(tmp1586[i]), order)
            r_p3d2[i] = Taylor1(constant_term(r_p2[i]) ^ float(constant_term(1.5)), order)
            newtonianCoeff[i] = Taylor1(constant_term(μ[i]) / constant_term(r_p3d2[i]), order)
            newton_acc_X[i] = Taylor1(constant_term(X[i]) * constant_term(newtonianCoeff[i]), order)
            newton_acc_Y[i] = Taylor1(constant_term(Y[i]) * constant_term(newtonianCoeff[i]), order)
            newton_acc_Z[i] = Taylor1(constant_term(Z[i]) * constant_term(newtonianCoeff[i]), order)
        end
    for i = 1:Nm1
        temp_accX_i[i] = Taylor1(constant_term(accX) + constant_term(newton_acc_X[i]), order)
        accX = Taylor1(identity(constant_term(temp_accX_i[i])), order)
        temp_accY_i[i] = Taylor1(constant_term(accY) + constant_term(newton_acc_Y[i]), order)
        accY = Taylor1(identity(constant_term(temp_accY_i[i])), order)
        temp_accZ_i[i] = Taylor1(constant_term(accZ) + constant_term(newton_acc_Z[i]), order)
        accZ = Taylor1(identity(constant_term(temp_accZ_i[i])), order)
    end
    dq[4] = Taylor1(identity(constant_term(accX)), order)
    dq[5] = Taylor1(identity(constant_term(accY)), order)
    dq[6] = Taylor1(identity(constant_term(accZ)), order)
    return TaylorIntegration.RetAlloc{Taylor1{_S}}([accX, accY, accZ], [X, Y, Z, r_p2, r_p3d2, newtonianCoeff, newton_acc_X, newton_acc_Y, newton_acc_Z, temp_accX_i, temp_accY_i, temp_accZ_i, tmp1581, tmp1583, tmp1584, tmp1586], [Array{Taylor1{_S}, 2}(undef, 0, 0)], [Array{Taylor1{_S}, 3}(undef, 0, 0, 0)], [Array{Taylor1{_S}, 4}(undef, 0, 0, 0, 0)])
end

# TaylorIntegration.jetcoeffs! method for src/propagation/asteroid_dynamical_models.jl: newtonian!
function TaylorIntegration.jetcoeffs!(::Val{newtonian!}, t::Taylor1{_T}, q::AbstractArray{Taylor1{_S}, _N}, dq::AbstractArray{Taylor1{_S}, _N}, params, __ralloc::TaylorIntegration.RetAlloc{Taylor1{_S}}) where {_T <: Real, _S <: Number, _N}
    order = t.order
    accX = __ralloc.v0[1]
    accY = __ralloc.v0[2]
    accZ = __ralloc.v0[3]
    X = __ralloc.v1[1]
    Y = __ralloc.v1[2]
    Z = __ralloc.v1[3]
    r_p2 = __ralloc.v1[4]
    r_p3d2 = __ralloc.v1[5]
    newtonianCoeff = __ralloc.v1[6]
    newton_acc_X = __ralloc.v1[7]
    newton_acc_Y = __ralloc.v1[8]
    newton_acc_Z = __ralloc.v1[9]
    temp_accX_i = __ralloc.v1[10]
    temp_accY_i = __ralloc.v1[11]
    temp_accZ_i = __ralloc.v1[12]
    tmp1581 = __ralloc.v1[13]
    tmp1583 = __ralloc.v1[14]
    tmp1584 = __ralloc.v1[15]
    tmp1586 = __ralloc.v1[16]
    local jd0 = params.jd0
    local dsj2k = t + (jd0 - JD_J2000)
    local ss16asteph_t = evaleph(params.sseph, dsj2k, q[1])
    local S = eltype(q)
    local N = 10
    local Nm1 = N - 1
    local μ = params.μ[1:10]
    local zero_q_1 = auxzero(q[1])
    TaylorSeries.zero!(accX)
    accX.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(accY)
    accY.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(accZ)
    accZ.coeffs[1] = identity(constant_term(zero_q_1))
    TaylorSeries.zero!(dq[1])
    (dq[1]).coeffs[1] = identity(constant_term(q[4]))
    TaylorSeries.zero!(dq[2])
    (dq[2]).coeffs[1] = identity(constant_term(q[5]))
    TaylorSeries.zero!(dq[3])
    (dq[3]).coeffs[1] = identity(constant_term(q[6]))
    #= REPL[83]:62 =# Threads.@threads for i = 1:Nm1
            TaylorSeries.zero!(X[i])
            (X[i]).coeffs[1] = constant_term(ss16asteph_t[3i - 2]) - constant_term(q[1])
            TaylorSeries.zero!(Y[i])
            (Y[i]).coeffs[1] = constant_term(ss16asteph_t[3i - 1]) - constant_term(q[2])
            TaylorSeries.zero!(Z[i])
            (Z[i]).coeffs[1] = constant_term(ss16asteph_t[3i]) - constant_term(q[3])
            TaylorSeries.zero!(tmp1581[i])
            (tmp1581[i]).coeffs[1] = constant_term(X[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp1583[i])
            (tmp1583[i]).coeffs[1] = constant_term(Y[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(tmp1584[i])
            (tmp1584[i]).coeffs[1] = constant_term(tmp1581[i]) + constant_term(tmp1583[i])
            TaylorSeries.zero!(tmp1586[i])
            (tmp1586[i]).coeffs[1] = constant_term(Z[i]) ^ float(constant_term(2))
            TaylorSeries.zero!(r_p2[i])
            (r_p2[i]).coeffs[1] = constant_term(tmp1584[i]) + constant_term(tmp1586[i])
            TaylorSeries.zero!(r_p3d2[i])
            (r_p3d2[i]).coeffs[1] = constant_term(r_p2[i]) ^ float(constant_term(1.5))
            TaylorSeries.zero!(newtonianCoeff[i])
            (newtonianCoeff[i]).coeffs[1] = constant_term(μ[i]) / constant_term(r_p3d2[i])
            TaylorSeries.zero!(newton_acc_X[i])
            (newton_acc_X[i]).coeffs[1] = constant_term(X[i]) * constant_term(newtonianCoeff[i])
            TaylorSeries.zero!(newton_acc_Y[i])
            (newton_acc_Y[i]).coeffs[1] = constant_term(Y[i]) * constant_term(newtonianCoeff[i])
            TaylorSeries.zero!(newton_acc_Z[i])
            (newton_acc_Z[i]).coeffs[1] = constant_term(Z[i]) * constant_term(newtonianCoeff[i])
        end
    for i = 1:Nm1
        TaylorSeries.zero!(temp_accX_i[i])
        (temp_accX_i[i]).coeffs[1] = constant_term(accX) + constant_term(newton_acc_X[i])
        TaylorSeries.zero!(accX)
        accX.coeffs[1] = identity(constant_term(temp_accX_i[i]))
        TaylorSeries.zero!(temp_accY_i[i])
        (temp_accY_i[i]).coeffs[1] = constant_term(accY) + constant_term(newton_acc_Y[i])
        TaylorSeries.zero!(accY)
        accY.coeffs[1] = identity(constant_term(temp_accY_i[i]))
        TaylorSeries.zero!(temp_accZ_i[i])
        (temp_accZ_i[i]).coeffs[1] = constant_term(accZ) + constant_term(newton_acc_Z[i])
        TaylorSeries.zero!(accZ)
        accZ.coeffs[1] = identity(constant_term(temp_accZ_i[i]))
    end
    TaylorSeries.zero!(dq[4])
    (dq[4]).coeffs[1] = identity(constant_term(accX))
    TaylorSeries.zero!(dq[5])
    (dq[5]).coeffs[1] = identity(constant_term(accY))
    TaylorSeries.zero!(dq[6])
    (dq[6]).coeffs[1] = identity(constant_term(accZ))
    for __idx = eachindex(q)
        (q[__idx]).coeffs[2] = (dq[__idx]).coeffs[1]
    end
    for ord = 1:order - 1
        ordnext = ord + 1
        TaylorSeries.identity!(accX, zero_q_1, ord)
        TaylorSeries.identity!(accY, zero_q_1, ord)
        TaylorSeries.identity!(accZ, zero_q_1, ord)
        TaylorSeries.identity!(dq[1], q[4], ord)
        TaylorSeries.identity!(dq[2], q[5], ord)
        TaylorSeries.identity!(dq[3], q[6], ord)
        #= REPL[83]:62 =# Threads.@threads for i = 1:Nm1
                TaylorSeries.subst!(X[i], ss16asteph_t[3i - 2], q[1], ord)
                TaylorSeries.subst!(Y[i], ss16asteph_t[3i - 1], q[2], ord)
                TaylorSeries.subst!(Z[i], ss16asteph_t[3i], q[3], ord)
                TaylorSeries.pow!(tmp1581[i], X[i], 2, ord)
                TaylorSeries.pow!(tmp1583[i], Y[i], 2, ord)
                TaylorSeries.add!(tmp1584[i], tmp1581[i], tmp1583[i], ord)
                TaylorSeries.pow!(tmp1586[i], Z[i], 2, ord)
                TaylorSeries.add!(r_p2[i], tmp1584[i], tmp1586[i], ord)
                TaylorSeries.pow!(r_p3d2[i], r_p2[i], 1.5, ord)
                TaylorSeries.div!(newtonianCoeff[i], μ[i], r_p3d2[i], ord)
                TaylorSeries.mul!(newton_acc_X[i], X[i], newtonianCoeff[i], ord)
                TaylorSeries.mul!(newton_acc_Y[i], Y[i], newtonianCoeff[i], ord)
                TaylorSeries.mul!(newton_acc_Z[i], Z[i], newtonianCoeff[i], ord)
            end
        for i = 1:Nm1
            TaylorSeries.add!(temp_accX_i[i], accX, newton_acc_X[i], ord)
            TaylorSeries.identity!(accX, temp_accX_i[i], ord)
            TaylorSeries.add!(temp_accY_i[i], accY, newton_acc_Y[i], ord)
            TaylorSeries.identity!(accY, temp_accY_i[i], ord)
            TaylorSeries.add!(temp_accZ_i[i], accZ, newton_acc_Z[i], ord)
            TaylorSeries.identity!(accZ, temp_accZ_i[i], ord)
        end
        TaylorSeries.identity!(dq[4], accX, ord)
        TaylorSeries.identity!(dq[5], accY, ord)
        TaylorSeries.identity!(dq[6], accZ, ord)
        for __idx = eachindex(q)
            (q[__idx]).coeffs[ordnext + 1] = (dq[__idx]).coeffs[ordnext] / ordnext
        end
    end
    return nothing
end